# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StcIntPythonPL')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StcIntPythonPL')
    _StcIntPythonPL = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StcIntPythonPL', [dirname(__file__)])
        except ImportError:
            import _StcIntPythonPL
            return _StcIntPythonPL
        if fp is not None:
            try:
                _mod = imp.load_module('_StcIntPythonPL', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _StcIntPythonPL = swig_import_helper()
    del swig_import_helper
else:
    import _StcIntPythonPL
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StcIntPythonPL.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _StcIntPythonPL.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StcIntPythonPL.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StcIntPythonPL.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StcIntPythonPL.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StcIntPythonPL.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StcIntPythonPL.SwigPyIterator_copy(self)

    def next(self):
        return _StcIntPythonPL.SwigPyIterator_next(self)

    def __next__(self):
        return _StcIntPythonPL.SwigPyIterator___next__(self)

    def previous(self):
        return _StcIntPythonPL.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StcIntPythonPL.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StcIntPythonPL.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StcIntPythonPL.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StcIntPythonPL.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StcIntPythonPL.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StcIntPythonPL.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StcIntPythonPL.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StcIntPythonPL.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class RelationType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RelationType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RelationType, name)
    __repr__ = _swig_repr

    def __init__(self, relationName, reverseDir=False):
        this = _StcIntPythonPL.new_RelationType(relationName, reverseDir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        ReverseDir = staticmethod(_StcIntPythonPL.RelationType_ReverseDir)
    else:
        ReverseDir = _StcIntPythonPL.RelationType_ReverseDir
    __swig_destroy__ = _StcIntPythonPL.delete_RelationType
    __del__ = lambda self: None
RelationType_swigregister = _StcIntPythonPL.RelationType_swigregister
RelationType_swigregister(RelationType)

def RelationType_ReverseDir(relationName):
    return _StcIntPythonPL.RelationType_ReverseDir(relationName)
RelationType_ReverseDir = _StcIntPythonPL.RelationType_ReverseDir

class CMeta(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMeta, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMeta, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        GetClasses = staticmethod(_StcIntPythonPL.CMeta_GetClasses)
    else:
        GetClasses = _StcIntPythonPL.CMeta_GetClasses
    if _newclass:
        ClassExists = staticmethod(_StcIntPythonPL.CMeta_ClassExists)
    else:
        ClassExists = _StcIntPythonPL.CMeta_ClassExists
    if _newclass:
        GetClassMeta = staticmethod(_StcIntPythonPL.CMeta_GetClassMeta)
    else:
        GetClassMeta = _StcIntPythonPL.CMeta_GetClassMeta
    if _newclass:
        GetClassAttribute = staticmethod(_StcIntPythonPL.CMeta_GetClassAttribute)
    else:
        GetClassAttribute = _StcIntPythonPL.CMeta_GetClassAttribute
    if _newclass:
        HasClassAttribute = staticmethod(_StcIntPythonPL.CMeta_HasClassAttribute)
    else:
        HasClassAttribute = _StcIntPythonPL.CMeta_HasClassAttribute
    if _newclass:
        GetProperties = staticmethod(_StcIntPythonPL.CMeta_GetProperties)
    else:
        GetProperties = _StcIntPythonPL.CMeta_GetProperties
    if _newclass:
        GetPropertyMeta = staticmethod(_StcIntPythonPL.CMeta_GetPropertyMeta)
    else:
        GetPropertyMeta = _StcIntPythonPL.CMeta_GetPropertyMeta
    if _newclass:
        GetPropertyAttribute = staticmethod(_StcIntPythonPL.CMeta_GetPropertyAttribute)
    else:
        GetPropertyAttribute = _StcIntPythonPL.CMeta_GetPropertyAttribute
    if _newclass:
        HasPropertyAttribute = staticmethod(_StcIntPythonPL.CMeta_HasPropertyAttribute)
    else:
        HasPropertyAttribute = _StcIntPythonPL.CMeta_HasPropertyAttribute
    if _newclass:
        GetEnumerationValue = staticmethod(_StcIntPythonPL.CMeta_GetEnumerationValue)
    else:
        GetEnumerationValue = _StcIntPythonPL.CMeta_GetEnumerationValue
    if _newclass:
        GetEnumerationString = staticmethod(_StcIntPythonPL.CMeta_GetEnumerationString)
    else:
        GetEnumerationString = _StcIntPythonPL.CMeta_GetEnumerationString
    if _newclass:
        GetEnumerationDisplayString = staticmethod(_StcIntPythonPL.CMeta_GetEnumerationDisplayString)
    else:
        GetEnumerationDisplayString = _StcIntPythonPL.CMeta_GetEnumerationDisplayString
    if _newclass:
        GetRelations = staticmethod(_StcIntPythonPL.CMeta_GetRelations)
    else:
        GetRelations = _StcIntPythonPL.CMeta_GetRelations
    if _newclass:
        GetRelationMeta = staticmethod(_StcIntPythonPL.CMeta_GetRelationMeta)
    else:
        GetRelationMeta = _StcIntPythonPL.CMeta_GetRelationMeta
    if _newclass:
        IsPropertyValueValid = staticmethod(_StcIntPythonPL.CMeta_IsPropertyValueValid)
    else:
        IsPropertyValueValid = _StcIntPythonPL.CMeta_IsPropertyValueValid
    if _newclass:
        GetPropertyRange = staticmethod(_StcIntPythonPL.CMeta_GetPropertyRange)
    else:
        GetPropertyRange = _StcIntPythonPL.CMeta_GetPropertyRange
    if _newclass:
        GetEnumerationValueToStringMap = staticmethod(_StcIntPythonPL.CMeta_GetEnumerationValueToStringMap)
    else:
        GetEnumerationValueToStringMap = _StcIntPythonPL.CMeta_GetEnumerationValueToStringMap
CMeta_swigregister = _StcIntPythonPL.CMeta_swigregister
CMeta_swigregister(CMeta)

def CMeta_GetClasses():
    return _StcIntPythonPL.CMeta_GetClasses()
CMeta_GetClasses = _StcIntPythonPL.CMeta_GetClasses

def CMeta_ClassExists(className):
    return _StcIntPythonPL.CMeta_ClassExists(className)
CMeta_ClassExists = _StcIntPythonPL.CMeta_ClassExists

def CMeta_GetClassMeta(*args):
    return _StcIntPythonPL.CMeta_GetClassMeta(*args)
CMeta_GetClassMeta = _StcIntPythonPL.CMeta_GetClassMeta

def CMeta_GetClassAttribute(className, attName):
    return _StcIntPythonPL.CMeta_GetClassAttribute(className, attName)
CMeta_GetClassAttribute = _StcIntPythonPL.CMeta_GetClassAttribute

def CMeta_HasClassAttribute(className, attName):
    return _StcIntPythonPL.CMeta_HasClassAttribute(className, attName)
CMeta_HasClassAttribute = _StcIntPythonPL.CMeta_HasClassAttribute

def CMeta_GetProperties(className):
    return _StcIntPythonPL.CMeta_GetProperties(className)
CMeta_GetProperties = _StcIntPythonPL.CMeta_GetProperties

def CMeta_GetPropertyMeta(className, propName):
    return _StcIntPythonPL.CMeta_GetPropertyMeta(className, propName)
CMeta_GetPropertyMeta = _StcIntPythonPL.CMeta_GetPropertyMeta

def CMeta_GetPropertyAttribute(className, propName, attName):
    return _StcIntPythonPL.CMeta_GetPropertyAttribute(className, propName, attName)
CMeta_GetPropertyAttribute = _StcIntPythonPL.CMeta_GetPropertyAttribute

def CMeta_HasPropertyAttribute(className, propName, attName):
    return _StcIntPythonPL.CMeta_HasPropertyAttribute(className, propName, attName)
CMeta_HasPropertyAttribute = _StcIntPythonPL.CMeta_HasPropertyAttribute

def CMeta_GetEnumerationValue(className, propName, enumStr):
    return _StcIntPythonPL.CMeta_GetEnumerationValue(className, propName, enumStr)
CMeta_GetEnumerationValue = _StcIntPythonPL.CMeta_GetEnumerationValue

def CMeta_GetEnumerationString(className, propName, enumVal):
    return _StcIntPythonPL.CMeta_GetEnumerationString(className, propName, enumVal)
CMeta_GetEnumerationString = _StcIntPythonPL.CMeta_GetEnumerationString

def CMeta_GetEnumerationDisplayString(className, propName, enumVal):
    return _StcIntPythonPL.CMeta_GetEnumerationDisplayString(className, propName, enumVal)
CMeta_GetEnumerationDisplayString = _StcIntPythonPL.CMeta_GetEnumerationDisplayString

def CMeta_GetRelations(className, dir):
    return _StcIntPythonPL.CMeta_GetRelations(className, dir)
CMeta_GetRelations = _StcIntPythonPL.CMeta_GetRelations

def CMeta_GetRelationMeta(className, typeName, dir):
    return _StcIntPythonPL.CMeta_GetRelationMeta(className, typeName, dir)
CMeta_GetRelationMeta = _StcIntPythonPL.CMeta_GetRelationMeta

def CMeta_IsPropertyValueValid(className, propName, val):
    return _StcIntPythonPL.CMeta_IsPropertyValueValid(className, propName, val)
CMeta_IsPropertyValueValid = _StcIntPythonPL.CMeta_IsPropertyValueValid

def CMeta_GetPropertyRange(className, propName):
    return _StcIntPythonPL.CMeta_GetPropertyRange(className, propName)
CMeta_GetPropertyRange = _StcIntPythonPL.CMeta_GetPropertyRange

def CMeta_GetEnumerationValueToStringMap(className, propName):
    return _StcIntPythonPL.CMeta_GetEnumerationValueToStringMap(className, propName)
CMeta_GetEnumerationValueToStringMap = _StcIntPythonPL.CMeta_GetEnumerationValueToStringMap

class CFileManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFileManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFileManager, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        AddFile = staticmethod(_StcIntPythonPL.CFileManager_AddFile)
    else:
        AddFile = _StcIntPythonPL.CFileManager_AddFile
    if _newclass:
        GetServerSideOutputFilePath = staticmethod(_StcIntPythonPL.CFileManager_GetServerSideOutputFilePath)
    else:
        GetServerSideOutputFilePath = _StcIntPythonPL.CFileManager_GetServerSideOutputFilePath
    if _newclass:
        GetServerSideInputFilePath = staticmethod(_StcIntPythonPL.CFileManager_GetServerSideInputFilePath)
    else:
        GetServerSideInputFilePath = _StcIntPythonPL.CFileManager_GetServerSideInputFilePath
CFileManager_swigregister = _StcIntPythonPL.CFileManager_swigregister
CFileManager_swigregister(CFileManager)

def CFileManager_AddFile(outputPath, category):
    return _StcIntPythonPL.CFileManager_AddFile(outputPath, category)
CFileManager_AddFile = _StcIntPythonPL.CFileManager_AddFile

def CFileManager_GetServerSideOutputFilePath(path):
    return _StcIntPythonPL.CFileManager_GetServerSideOutputFilePath(path)
CFileManager_GetServerSideOutputFilePath = _StcIntPythonPL.CFileManager_GetServerSideOutputFilePath

def CFileManager_GetServerSideInputFilePath(path):
    return _StcIntPythonPL.CFileManager_GetServerSideInputFilePath(path)
CFileManager_GetServerSideInputFilePath = _StcIntPythonPL.CFileManager_GetServerSideInputFilePath

class CObjectRefStore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CObjectRefStore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CObjectRefStore, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Put = staticmethod(_StcIntPythonPL.CObjectRefStore_Put)
    else:
        Put = _StcIntPythonPL.CObjectRefStore_Put
    if _newclass:
        Get = staticmethod(_StcIntPythonPL.CObjectRefStore_Get)
    else:
        Get = _StcIntPythonPL.CObjectRefStore_Get
    if _newclass:
        Exists = staticmethod(_StcIntPythonPL.CObjectRefStore_Exists)
    else:
        Exists = _StcIntPythonPL.CObjectRefStore_Exists
    if _newclass:
        Release = staticmethod(_StcIntPythonPL.CObjectRefStore_Release)
    else:
        Release = _StcIntPythonPL.CObjectRefStore_Release
    if _newclass:
        Reset = staticmethod(_StcIntPythonPL.CObjectRefStore_Reset)
    else:
        Reset = _StcIntPythonPL.CObjectRefStore_Reset
CObjectRefStore_swigregister = _StcIntPythonPL.CObjectRefStore_swigregister
CObjectRefStore_swigregister(CObjectRefStore)

def CObjectRefStore_Put(key, obj, overwrite=False):
    return _StcIntPythonPL.CObjectRefStore_Put(key, obj, overwrite)
CObjectRefStore_Put = _StcIntPythonPL.CObjectRefStore_Put

def CObjectRefStore_Get(key):
    return _StcIntPythonPL.CObjectRefStore_Get(key)
CObjectRefStore_Get = _StcIntPythonPL.CObjectRefStore_Get

def CObjectRefStore_Exists(key):
    return _StcIntPythonPL.CObjectRefStore_Exists(key)
CObjectRefStore_Exists = _StcIntPythonPL.CObjectRefStore_Exists

def CObjectRefStore_Release(key):
    return _StcIntPythonPL.CObjectRefStore_Release(key)
CObjectRefStore_Release = _StcIntPythonPL.CObjectRefStore_Release

def CObjectRefStore_Reset():
    return _StcIntPythonPL.CObjectRefStore_Reset()
CObjectRefStore_Reset = _StcIntPythonPL.CObjectRefStore_Reset

class CCommandEx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCommandEx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCommandEx, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        ProcessInputHandleVec = staticmethod(_StcIntPythonPL.CCommandEx_ProcessInputHandleVec)
    else:
        ProcessInputHandleVec = _StcIntPythonPL.CCommandEx_ProcessInputHandleVec
CCommandEx_swigregister = _StcIntPythonPL.CCommandEx_swigregister
CCommandEx_swigregister(CCommandEx)

def CCommandEx_ProcessInputHandleVec(leafType, rootVec):
    return _StcIntPythonPL.CCommandEx_ProcessInputHandleVec(leafType, rootVec)
CCommandEx_ProcessInputHandleVec = _StcIntPythonPL.CCommandEx_ProcessInputHandleVec

class CHandleMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHandleMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHandleMap, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Instance = staticmethod(_StcIntPythonPL.CHandleMap_Instance)
    else:
        Instance = _StcIntPythonPL.CHandleMap_Instance

    def GetStcHandle(self, stringHandle):
        return _StcIntPythonPL.CHandleMap_GetStcHandle(self, stringHandle)

    def GetStringHandle(self, stcHandle, type):
        return _StcIntPythonPL.CHandleMap_GetStringHandle(self, stcHandle, type)
CHandleMap_swigregister = _StcIntPythonPL.CHandleMap_swigregister
CHandleMap_swigregister(CHandleMap)

def CHandleMap_Instance():
    return _StcIntPythonPL.CHandleMap_Instance()
CHandleMap_Instance = _StcIntPythonPL.CHandleMap_Instance

class CTestResultSettingExt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTestResultSettingExt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTestResultSettingExt, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        GetResultDbBaseDirectory = staticmethod(_StcIntPythonPL.CTestResultSettingExt_GetResultDbBaseDirectory)
    else:
        GetResultDbBaseDirectory = _StcIntPythonPL.CTestResultSettingExt_GetResultDbBaseDirectory
    if _newclass:
        GetOutputBaseDirectory = staticmethod(_StcIntPythonPL.CTestResultSettingExt_GetOutputBaseDirectory)
    else:
        GetOutputBaseDirectory = _StcIntPythonPL.CTestResultSettingExt_GetOutputBaseDirectory
CTestResultSettingExt_swigregister = _StcIntPythonPL.CTestResultSettingExt_swigregister
CTestResultSettingExt_swigregister(CTestResultSettingExt)

def CTestResultSettingExt_GetResultDbBaseDirectory():
    return _StcIntPythonPL.CTestResultSettingExt_GetResultDbBaseDirectory()
CTestResultSettingExt_GetResultDbBaseDirectory = _StcIntPythonPL.CTestResultSettingExt_GetResultDbBaseDirectory

def CTestResultSettingExt_GetOutputBaseDirectory():
    return _StcIntPythonPL.CTestResultSettingExt_GetOutputBaseDirectory()
CTestResultSettingExt_GetOutputBaseDirectory = _StcIntPythonPL.CTestResultSettingExt_GetOutputBaseDirectory

class Path(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Path, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Path, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        GetFullOutputFilePath = staticmethod(_StcIntPythonPL.Path_GetFullOutputFilePath)
    else:
        GetFullOutputFilePath = _StcIntPythonPL.Path_GetFullOutputFilePath
Path_swigregister = _StcIntPythonPL.Path_swigregister
Path_swigregister(Path)

def Path_GetFullOutputFilePath(path):
    return _StcIntPythonPL.Path_GetFullOutputFilePath(path)
Path_GetFullOutputFilePath = _StcIntPythonPL.Path_GetFullOutputFilePath

class CScriptable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScriptable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CScriptable, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsTypeOf(self, id):
        return _StcIntPythonPL.CScriptable_IsTypeOf(self, id)

    def GetType(self):
        return _StcIntPythonPL.CScriptable_GetType(self)

    def GetObjectHandle(self):
        return _StcIntPythonPL.CScriptable_GetObjectHandle(self)

    def GetParent(self):
        return _StcIntPythonPL.CScriptable_GetParent(self)

    def AddObject(self, *args):
        return _StcIntPythonPL.CScriptable_AddObject(self, *args)

    def ContainsObject(self, *args):
        return _StcIntPythonPL.CScriptable_ContainsObject(self, *args)

    def GetObject(self, *args):
        return _StcIntPythonPL.CScriptable_GetObject(self, *args)

    def RemoveObject(self, *args):
        return _StcIntPythonPL.CScriptable_RemoveObject(self, *args)

    def GetObjects(self, *args):
        return _StcIntPythonPL.CScriptable_GetObjects(self, *args)

    def MarkDelete(self, genEvent=True, useAutoDeferDelete=True):
        return _StcIntPythonPL.CScriptable_MarkDelete(self, genEvent, useAutoDeferDelete)

    def IsDeleted(self):
        return _StcIntPythonPL.CScriptable_IsDeleted(self)

    def Delete(self):
        return _StcIntPythonPL.CScriptable_Delete(self)

    def Set(self, id, val):
        return _StcIntPythonPL.CScriptable_Set(self, id, val)

    def Get(self, id):
        return _StcIntPythonPL.CScriptable_Get(self, id)

    def SetCollection(self, propName, vec):
        return _StcIntPythonPL.CScriptable_SetCollection(self, propName, vec)

    def GetCollection(self, propName):
        return _StcIntPythonPL.CScriptable_GetCollection(self, propName)
CScriptable_swigregister = _StcIntPythonPL.CScriptable_swigregister
CScriptable_swigregister(CScriptable)

class CScriptableCreator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CScriptableCreator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CScriptableCreator, name)
    __repr__ = _swig_repr

    def Create(self, *args):
        return _StcIntPythonPL.CScriptableCreator_Create(self, *args)

    def CreateCommand(self, clsName):
        return _StcIntPythonPL.CScriptableCreator_CreateCommand(self, clsName)

    def __init__(self):
        this = _StcIntPythonPL.new_CScriptableCreator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StcIntPythonPL.delete_CScriptableCreator
    __del__ = lambda self: None
CScriptableCreator_swigregister = _StcIntPythonPL.CScriptableCreator_swigregister
CScriptableCreator_swigregister(CScriptableCreator)

class CStcSystem(CScriptable):
    __swig_setmethods__ = {}
    for _s in [CScriptable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStcSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [CScriptable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CStcSystem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Instance = staticmethod(_StcIntPythonPL.CStcSystem_Instance)
    else:
        Instance = _StcIntPythonPL.CStcSystem_Instance
    if _newclass:
        GetApplicationInstallPath = staticmethod(_StcIntPythonPL.CStcSystem_GetApplicationInstallPath)
    else:
        GetApplicationInstallPath = _StcIntPythonPL.CStcSystem_GetApplicationInstallPath
    if _newclass:
        GetApplicationUserDataPath = staticmethod(_StcIntPythonPL.CStcSystem_GetApplicationUserDataPath)
    else:
        GetApplicationUserDataPath = _StcIntPythonPL.CStcSystem_GetApplicationUserDataPath
    if _newclass:
        GetApplicationCommonDataPath = staticmethod(_StcIntPythonPL.CStcSystem_GetApplicationCommonDataPath)
    else:
        GetApplicationCommonDataPath = _StcIntPythonPL.CStcSystem_GetApplicationCommonDataPath
    if _newclass:
        GetApplicationSessionDataPath = staticmethod(_StcIntPythonPL.CStcSystem_GetApplicationSessionDataPath)
    else:
        GetApplicationSessionDataPath = _StcIntPythonPL.CStcSystem_GetApplicationSessionDataPath
    if _newclass:
        GetLogOutputPath = staticmethod(_StcIntPythonPL.CStcSystem_GetLogOutputPath)
    else:
        GetLogOutputPath = _StcIntPythonPL.CStcSystem_GetLogOutputPath
CStcSystem_swigregister = _StcIntPythonPL.CStcSystem_swigregister
CStcSystem_swigregister(CStcSystem)

def CStcSystem_Instance():
    return _StcIntPythonPL.CStcSystem_Instance()
CStcSystem_Instance = _StcIntPythonPL.CStcSystem_Instance

def CStcSystem_GetApplicationInstallPath():
    return _StcIntPythonPL.CStcSystem_GetApplicationInstallPath()
CStcSystem_GetApplicationInstallPath = _StcIntPythonPL.CStcSystem_GetApplicationInstallPath

def CStcSystem_GetApplicationUserDataPath():
    return _StcIntPythonPL.CStcSystem_GetApplicationUserDataPath()
CStcSystem_GetApplicationUserDataPath = _StcIntPythonPL.CStcSystem_GetApplicationUserDataPath

def CStcSystem_GetApplicationCommonDataPath():
    return _StcIntPythonPL.CStcSystem_GetApplicationCommonDataPath()
CStcSystem_GetApplicationCommonDataPath = _StcIntPythonPL.CStcSystem_GetApplicationCommonDataPath

def CStcSystem_GetApplicationSessionDataPath():
    return _StcIntPythonPL.CStcSystem_GetApplicationSessionDataPath()
CStcSystem_GetApplicationSessionDataPath = _StcIntPythonPL.CStcSystem_GetApplicationSessionDataPath

def CStcSystem_GetLogOutputPath():
    return _StcIntPythonPL.CStcSystem_GetLogOutputPath()
CStcSystem_GetLogOutputPath = _StcIntPythonPL.CStcSystem_GetLogOutputPath

class CRunnable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRunnable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRunnable, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _StcIntPythonPL.new_CRunnable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StcIntPythonPL.delete_CRunnable
    __del__ = lambda self: None
CRunnable_swigregister = _StcIntPythonPL.CRunnable_swigregister
CRunnable_swigregister(CRunnable)

class CCommand(CScriptable, CRunnable):
    __swig_setmethods__ = {}
    for _s in [CScriptable, CRunnable]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCommand, name, value)
    __swig_getmethods__ = {}
    for _s in [CScriptable, CRunnable]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CCommand, name)
    __repr__ = _swig_repr

    def Reset(self):
        return _StcIntPythonPL.CCommand_Reset(self)

    def Execute(self, inBackground=False):
        return _StcIntPythonPL.CCommand_Execute(self, inBackground)

    def IsCompleted(self):
        return _StcIntPythonPL.CCommand_IsCompleted(self)

    def IsRunning(self):
        return _StcIntPythonPL.CCommand_IsRunning(self)

    def __init__(self):
        this = _StcIntPythonPL.new_CCommand()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StcIntPythonPL.delete_CCommand
    __del__ = lambda self: None
CCommand_swigregister = _StcIntPythonPL.CCommand_swigregister
CCommand_swigregister(CCommand)

class CHandleRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CHandleRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CHandleRegistry, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Instance = staticmethod(_StcIntPythonPL.CHandleRegistry_Instance)
    else:
        Instance = _StcIntPythonPL.CHandleRegistry_Instance

    def Find(self, key):
        return _StcIntPythonPL.CHandleRegistry_Find(self, key)
CHandleRegistry_swigregister = _StcIntPythonPL.CHandleRegistry_swigregister
CHandleRegistry_swigregister(CHandleRegistry)

def CHandleRegistry_Instance():
    return _StcIntPythonPL.CHandleRegistry_Instance()
CHandleRegistry_Instance = _StcIntPythonPL.CHandleRegistry_Instance

class CTaskManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTaskManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTaskManager, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Instance = staticmethod(_StcIntPythonPL.CTaskManager_Instance)
    else:
        Instance = _StcIntPythonPL.CTaskManager_Instance

    def CtmYield(self, ms=0, pTargetTask=None, yieldRightBack=False):
        return _StcIntPythonPL.CTaskManager_CtmYield(self, ms, pTargetTask, yieldRightBack)
CTaskManager_swigregister = _StcIntPythonPL.CTaskManager_swigregister
CTaskManager_swigregister(CTaskManager)

def CTaskManager_Instance():
    return _StcIntPythonPL.CTaskManager_Instance()
CTaskManager_Instance = _StcIntPythonPL.CTaskManager_Instance

class CUserLogResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CUserLogResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CUserLogResult, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Instance = staticmethod(_StcIntPythonPL.CUserLogResult_Instance)
    else:
        Instance = _StcIntPythonPL.CUserLogResult_Instance

    def FlushCache(self):
        return _StcIntPythonPL.CUserLogResult_FlushCache(self)
CUserLogResult_swigregister = _StcIntPythonPL.CUserLogResult_swigregister
CUserLogResult_swigregister(CUserLogResult)

def CUserLogResult_Instance():
    return _StcIntPythonPL.CUserLogResult_Instance()
CUserLogResult_Instance = _StcIntPythonPL.CUserLogResult_Instance

class PLLogger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PLLogger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PLLogger, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        GetLogger = staticmethod(_StcIntPythonPL.PLLogger_GetLogger)
    else:
        GetLogger = _StcIntPythonPL.PLLogger_GetLogger
    if _newclass:
        GetUserLogger = staticmethod(_StcIntPythonPL.PLLogger_GetUserLogger)
    else:
        GetUserLogger = _StcIntPythonPL.PLLogger_GetUserLogger
    if _newclass:
        GetDevLogger = staticmethod(_StcIntPythonPL.PLLogger_GetDevLogger)
    else:
        GetDevLogger = _StcIntPythonPL.PLLogger_GetDevLogger

    def LogInfo(self, msg):
        return _StcIntPythonPL.PLLogger_LogInfo(self, msg)

    def LogDebug(self, msg):
        return _StcIntPythonPL.PLLogger_LogDebug(self, msg)

    def LogWarn(self, msg):
        return _StcIntPythonPL.PLLogger_LogWarn(self, msg)

    def LogError(self, msg):
        return _StcIntPythonPL.PLLogger_LogError(self, msg)
PLLogger_swigregister = _StcIntPythonPL.PLLogger_swigregister
PLLogger_swigregister(PLLogger)

def PLLogger_GetLogger(name):
    return _StcIntPythonPL.PLLogger_GetLogger(name)
PLLogger_GetLogger = _StcIntPythonPL.PLLogger_GetLogger

def PLLogger_GetUserLogger(name):
    return _StcIntPythonPL.PLLogger_GetUserLogger(name)
PLLogger_GetUserLogger = _StcIntPythonPL.PLLogger_GetUserLogger

def PLLogger_GetDevLogger(name):
    return _StcIntPythonPL.PLLogger_GetDevLogger(name)
PLLogger_GetDevLogger = _StcIntPythonPL.PLLogger_GetDevLogger

class UnitTestManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnitTestManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnitTestManager, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        Instance = staticmethod(_StcIntPythonPL.UnitTestManager_Instance)
    else:
        Instance = _StcIntPythonPL.UnitTestManager_Instance

    def Init(self, pluginList):
        return _StcIntPythonPL.UnitTestManager_Init(self, pluginList)
UnitTestManager_swigregister = _StcIntPythonPL.UnitTestManager_swigregister
UnitTestManager_swigregister(UnitTestManager)

def UnitTestManager_Instance():
    return _StcIntPythonPL.UnitTestManager_Instance()
UnitTestManager_Instance = _StcIntPythonPL.UnitTestManager_Instance

# This file is compatible with both classic and new-style classes.



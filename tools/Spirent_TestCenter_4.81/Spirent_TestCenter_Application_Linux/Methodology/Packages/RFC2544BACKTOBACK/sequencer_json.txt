Working Sequencer:

******************************
**  Initialize Methodology  **
******************************
InitGroupCommand
Methodology Initialization Parameters
Parameters used for methodology initialization

Clean up generated templates and objects
DeleteTemplatesAndGeneratedObjectsCommand

Prep the summary database
SaveResultsCommand
rfc2544_backtoback.db
C:\Users\kevmatsumo\Documents\Spirent\TestCenter 9.90\rfc2544_backtoback.db
True/True/True/Append

Prepare results system for test
StartOfTestCommand

Results: Create the Frame Size + Burst Size + Trial table
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "CREATE TABLE MethRfc2544B2B_FrameBurstTrial (FrameSize INTEGER, BurstSize INTEGER, Trial INTEGER, FramesSent INTEGER, FramesReceived INTEGER, BurstsSent FLOAT, FramesLost INTEGER, Loss FLOAT, Load FLOAT, Verdict TEXT)" }] }] }
<blank>
False

Initialize Real Time Results - MethRfc2544B2B_FrameBurstTrial
InitRealTimeResultsCommand
[{ "definition": { "headers": ["Frame Size (bytes)", "Burst Size (frames)", "Trial", "Frames Sent", "Frames Received", "Frames Lost", "Loss %", "Load %", "Verdict"], "rows": [] }, "enable": true, "query": { "data_column_names": ["FrameSize", "BurstSize", "Trial", "FramesSent", "FramesReceived", "FramesLost", "Loss", "Load", "Verdict"], "table": "MethRfc2544B2B_FrameBurstTrial", "timestamp_column_name": "rowid" }, "result_id": "iter_result", "source_type": "SUMMARY_DB", "type": "table" }]

Initialize Real Time Results - Chart
InitRealTimeResultsCommand
[{ "enable": true, "result_id": "1", "source_type": "RESULTS_SUBSCRIBE", "type": "chart", "definition": { "chart": { "type": "line" }, "title": { "text": "System Level Tx/Rx Rates" }, "subtitle": { "text": "Tx/Rx rate over time." }, "xAxis": { "title": { "text": "Time (s)" }, "gridLineWidth": 1, "minPadding": 0.2, "maxPadding": 0.2 }, "yAxis": { "title": { "text": "Rate (fps)" }, "minPadding": 0.2, "maxPadding": 0.2 }, "legend": { "enabled": true }, "plotOptions": { "series": { "lineWidth": 1 } }, "tooltip": { "headerFormat": "<span style=\"font-size: 10px\">{point.key}s</span><br/>" }, "series": [] }, "subscribe": [{ "config_type": "generator", "result_type": "generatorportresults", "view_attribute_list": ["generatorsigframerate"], "result_parent_tags": ["West_Port_Group", "East_Port_Group"] }, { "config_type": "analyzer", "result_type": "analyzerportresults", "view_attribute_list": ["sigframerate"], "result_parent_tags": ["West_Port_Group", "East_Port_Group"] }] }]


*********************************
**  Set up East-West Topology  **
*********************************
WestEastTopologyCommand

Set up West Topology
TopologyGroupCommand
West-side Configuration
Configuration for the ports on the west side of the topology
West side

Create West Endpoint
CreateTemplateConfigCommand
True/null
{ "baseTemplateFile": "EmulatedDevice.xml", "modifyList": [{ "description": "Build the Network Interface Stack", "operationList": [{ "buildStack": { "deviceTagName": "ttEmulatedDevice", "stack": [{ "className": "EthIIIf", "isLowestLayer": true, "tagName": "ttEthIIIf" }, { "className": "VlanIf", "tagName": "ttOuterVlanIf", "useIf": true }, { "className": "VlanIf", "stackSplit": [ [{ "className": "Ipv4If", "isPrimary": true, "isTopLevel": true, "tagName": "ttIpv4If", "useIf": false }], [{ "className": "Ipv6If", "isPrimary": true, "isTopLevel": true, "tagName": "ttIpv6If", "useIf": true }], [{ "className": "Ipv6If", "isPrimary": true, "isTopLevel": true, "tagName": "ttLinkLocalIf", "useIf": true }] ], "tagName": "ttInnerVlanIf", "useIf": false }] } }] }, { "description": "Modify the Ipv4If", "enable": false, "operationList": [{ "propertyValue": { "className": "Ipv4If", "propertyValueList": { "PrefixLength": "24" }, "tagName": "ttIpv4If" } }, { "stmPropertyModifier": { "className": "Ipv4If", "parentTagName": "ttIpv4If", "propertyName": "Gateway", "propertyValueList": { "Start": "198.19.1.1", "Step": "0.0.0.0", "ResetOnNewTargetObject": false }, "tagName": "ttIpv4If.Gateway" } }, { "stmPropertyModifier": { "className": "Ipv4If", "parentTagName": "ttIpv4If", "propertyName": "Address", "propertyValueList": { "Start": "198.19.1.2", "Step": "0.0.0.1", "ResetOnNewTargetObject": false }, "tagName": "ttIpv4If.Address" } }] }, { "description": "Modify the IPv6Ifs", "enable": true, "operationList": [{ "propertyValue": { "className": "Ipv6If", "propertyValueList": { "PrefixLength": "64" }, "tagName": "ttIpv6If" } }, { "stmPropertyModifier": { "className": "Ipv6If", "parentTagName": "ttIpv6If", "propertyName": "Gateway", "propertyValueList": { "Start": "2001::1", "Step": "::1:0", "ResetOnNewTargetObject": false }, "tagName": "ttIpv6If.Gateway" } }, { "stmPropertyModifier": { "className": "Ipv6If", "parentTagName": "ttIpv6If", "propertyName": "Address", "propertyValueList": { "Start": "2001::2", "Step": "::1:0", "ResetOnNewTargetObject": false }, "tagName": "ttIpv6If.Address" } }, { "stmPropertyModifier": { "className": "Ipv6If", "parentTagName": "ttLinkLocalIf", "propertyName": "Address", "propertyValueList": { "Start": "FE80::1:1", "Step": "::1", "ResetOnNewTargetObject": false }, "tagName": "ttLinkLocalIf.Address" } }] }, { "description": "Modify the EthIIIf", "enable": true, "operationList": [{ "stmPropertyModifier": { "className": "EthIIIf", "parentTagName": "ttEthIIIf", "propertyName": "SourceMac", "propertyValueList": { "Start": "00:10:94:11:00:02", "Step": "00:00:00:00:00:01", "ResetOnNewTargetObject": false }, "tagName": "ttEthIIIf.SourceMac" } }] }, { "description": "Modify the Outer VlanIf", "enable": true, "operationList": [{ "stmPropertyModifier": { "className": "VlanIf", "parentTagName": "ttOuterVlanIf", "propertyName": "VlanId", "propertyValueList": { "Start": "100", "Step": "1", "ResetOnNewTargetObject": false }, "tagName": "ttOuterVlanIf.VlanId" } }] }, { "description": "Modify the Inner VlanIf", "enable": false, "operationList": [{ "stmPropertyModifier": { "className": "VlanIf", "parentTagName": "ttInnerVlanIf", "propertyName": "VlanId", "propertyValueList": { "Start": "100", "Step": "1", "ResetOnNewTargetObject": false }, "tagName": "ttInnerVlanIf.VlanId" } }] }], "tagPrefix": "West_" }
1/empty
West_Port_Group

Set up East Topology
TopologyGroupCommand
East-side Configuration
Configuration for the ports on the east side of the topology
East side

Create East Endpoint
CreateTemplateConfigCommand
True/null
{ "baseTemplateFile": "EmulatedDevice.xml", "modifyList": [{ "description": "Build the Network Interface Stack", "operationList": [{ "buildStack": { "deviceTagName": "ttEmulatedDevice", "stack": [{ "className": "EthIIIf", "isLowestLayer": true, "tagName": "ttEthIIIf" }, { "className": "VlanIf", "tagName": "ttOuterVlanIf", "useIf": true }, { "className": "VlanIf", "stackSplit": [ [{ "className": "Ipv4If", "isPrimary": true, "isTopLevel": true, "tagName": "ttIpv4If", "useIf": false }], [{ "className": "Ipv6If", "isPrimary": true, "isTopLevel": true, "tagName": "ttIpv6If", "useIf": true }], [{ "className": "Ipv6If", "isPrimary": true, "isTopLevel": true, "tagName": "ttLinkLocalIf", "useIf": true }] ], "tagName": "ttInnerVlanIf", "useIf": false }] } }] }, { "description": "Modify the Ipv4If", "enable": false, "operationList": [{ "propertyValue": { "className": "Ipv4If", "propertyValueList": { "PrefixLength": "24" }, "tagName": "ttIpv4If" } }, { "stmPropertyModifier": { "className": "Ipv4If", "parentTagName": "ttIpv4If", "propertyName": "Gateway", "propertyValueList": { "Start": "198.18.1.1", "Step": "0.0.0.0", "ResetOnNewTargetObject": false }, "tagName": "ttIpv4If.Gateway" } }, { "stmPropertyModifier": { "className": "Ipv4If", "parentTagName": "ttIpv4If", "propertyName": "Address", "propertyValueList": { "Start": "198.18.1.2", "Step": "0.0.0.1", "ResetOnNewTargetObject": false }, "tagName": "ttIpv4If.Address" } }] }, { "description": "Modify the IPv6Ifs", "enable": true, "operationList": [{ "propertyValue": { "className": "Ipv6If", "propertyValueList": { "PrefixLength": "64" }, "tagName": "ttIpv6If" } }, { "stmPropertyModifier": { "className": "Ipv6If", "parentTagName": "ttIpv6If", "propertyName": "Gateway", "propertyValueList": { "Start": "2000::1", "Step": "::1:0", "ResetOnNewTargetObject": false }, "tagName": "ttIpv6If.Gateway" } }, { "stmPropertyModifier": { "className": "Ipv6If", "parentTagName": "ttIpv6If", "propertyName": "Address", "propertyValueList": { "Start": "2000::2", "Step": "::1:0", "ResetOnNewTargetObject": false }, "tagName": "ttIpv6If.Address" } }, { "stmPropertyModifier": { "className": "Ipv6If", "parentTagName": "ttLinkLocalIf", "propertyName": "Address", "propertyValueList": { "Start": "FE80::1", "Step": "::1", "ResetOnNewTargetObject": false }, "tagName": "ttLinkLocalIf.Address" } }] }, { "description": "Modify the EthIIIf", "enable": true, "operationList": [{ "stmPropertyModifier": { "className": "EthIIIf", "parentTagName": "ttEthIIIf", "propertyName": "SourceMac", "propertyValueList": { "Start": "00:10:94:00:00:02", "Step": "00:00:00:00:00:01", "ResetOnNewTargetObject": false }, "tagName": "ttEthIIIf.SourceMac" } }] }, { "description": "Modify the Outer VlanIf", "enable": true, "operationList": [{ "stmPropertyModifier": { "className": "VlanIf", "parentTagName": "ttOuterVlanIf", "propertyName": "VlanId", "propertyValueList": { "Start": "100", "Step": "1", "ResetOnNewTargetObject": false }, "tagName": "ttOuterVlanIf.VlanId" } }] }, { "description": "Modify the Inner VlanIf", "enable": false, "operationList": [{ "stmPropertyModifier": { "className": "VlanIf", "parentTagName": "ttInnerVlanIf", "propertyName": "VlanId", "propertyValueList": { "Start": "100", "Step": "1", "ResetOnNewTargetObject": false }, "tagName": "ttInnerVlanIf.VlanId" } }] }], "tagPrefix": "East_" }
1/empty
East_Port_Group


**********************
**  Set up traffic  **
**********************
TrafficGroupCommand
Traffic
Parameters for traffic configuration

Create Traffic Mix
CreateTrafficMixCommand
{ "load": 1, "loadUnits": "PERCENT_LINE_RATE", "table": [{ "enable": false, "baseTemplateFile": "Ipv4_Stream.xml", "modifyList": [{ "description": "East to West Traffic", "operationList": [{ "propertyValue": { "className": "StreamBlock", "propertyValueList": { "TrafficPattern": "PAIR" }, "tagName": "ttStreamBlock" } }, { "pduBuilder": { "pduData": { "pdu_list": [{ "element_type": "pdu", "enable": true, "name": "eth1", "pdu": "ethernet:EthernetII", "pdu_data": [{ "element_type": "vlans", "enable": true, "name": "vlan_cont", "pdu_data": [{ "element_type": "Vlan", "enable": true, "name": "Vlan" }, { "element_type": "Vlan", "enable": false, "name": "Vlan_1" }] }] }, { "element_type": "pdu", "enable": true, "name": "ip", "pdu": "ipv4:IPv4" }, { "element_type": "pdu", "enable": false, "name": "udp", "pdu": "udp:Udp", "property_data": { "destPort": 7, "sourcePort": 2048 } }] }, "tagNameList": ["ttStreamBlock"] } }] }], "postExpandModify": [{ "enable": true, "streamBlockExpand": { "endpointMapping": { "bidirectional": true, "dstBindingTagList": ["East_ttIpv4If"], "srcBindingTagList": ["West_ttIpv4If"] } } }, { "enable": false, "streamBlockExpand": { "endpointMapping": { "dstBindingTagList": ["East_ttIpv4If"], "srcBindingTagList": ["West_ttIpv4If"] } } }, { "enable": false, "streamBlockExpand": { "endpointMapping": { "dstBindingTagList": ["West_ttIpv4If"], "srcBindingTagList": ["East_ttIpv4If"] } } }], "weight": "100%" }, { "enable": true, "baseTemplateFile": "Ipv6_Stream.xml", "modifyList": [{ "description": "East to West Traffic", "operationList": [{ "propertyValue": { "className": "StreamBlock", "propertyValueList": { "TrafficPattern": "PAIR" }, "tagName": "ttStreamBlock" } }, { "pduBuilder": { "pduData": { "pdu_list": [{ "element_type": "pdu", "enable": true, "name": "eth1", "pdu": "ethernet:EthernetII", "pdu_data": [{ "element_type": "vlans", "enable": true, "name": "vlan_cont", "pdu_data": [{ "element_type": "Vlan", "enable": true, "name": "Vlan" }, { "element_type": "Vlan", "enable": false, "name": "Vlan_1" }] }] }, { "element_type": "pdu", "enable": true, "name": "ip", "pdu": "ipv6:IPv6" }, { "element_type": "pdu", "enable": false, "name": "udp", "pdu": "udp:Udp", "property_data": { "destPort": 7, "sourcePort": 2048 } }] }, "tagNameList": ["ttStreamBlock"] } }] }], "postExpandModify": [{ "enable": true, "streamBlockExpand": { "endpointMapping": { "bidirectional": true, "dstBindingTagList": ["East_ttIpv6If"], "srcBindingTagList": ["West_ttIpv6If"] } } }, { "enable": false, "streamBlockExpand": { "endpointMapping": { "dstBindingTagList": ["East_ttIpv6If"], "srcBindingTagList": ["West_ttIpv6If"] } } }, { "enable": false, "streamBlockExpand": { "endpointMapping": { "dstBindingTagList": ["West_ttIpv6If"], "srcBindingTagList": ["East_ttIpv6If"] } } }], "weight": "100%" }] }
TrafficMixTag/True

Set Generators to use Port Load
SetPropertyCommand
East_Port_Group, West_Port_Group
empty
GeneratorConfig
SchedulingMode
<blank>
PORT_BASED


*****************************
**  Methodology Procedure  **
*****************************
TestGroupCommand
Frame Size and Burst Size Iterations
Configuration for testing the stability of each frame size and burst size

Config: Populate the config table
AddToDbTableCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "CREATE TABLE MethRfc2544B2B_Config (FrameSize INTEGER, MinBurst INTEGER, MaxBurst INTEGER, StepBurst INTEGER, Load FLOAT)" }] }, { "db_information": { "columns": ["FrameSize", "MinBurst", "MaxBurst", "StepBurst", "Load"], "db_name": "SUMMARY", "table_name": "MethRfc2544B2B_Config" }, "table": [ ["128", "100", "100", "35", "99"], ["256", "50", "50", "10", "90"], ["512", "20", "20", "5", "75"] ] }] }
<blank>
False

Results: Create the Frame table
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "CREATE TABLE MethRfc2544B2B_Frame (FrameSize INTEGER, MaxBurst INTEGER, AvgBursts FLOAT, Load FLOAT, Threshold INTEGER, Verdict TEXT)" }] }] }
<blank>
False

Results: Create the Frame Size + Burst Size table
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "CREATE TABLE MethRfc2544B2B_FrameBurst (FrameSize INTEGER, BurstSize INTEGER, TotalFramesSent INTEGER, TotalFramesReceived INTEGER, TotalFramesLost INTEGER, AvgBurstsSent FLOAT, AvgFramesLost FLOAT, Load FLOAT, Verdict TEXT)" }] }] }
<blank>
False

Results: Create the Current Trial table & insert the Threshold
AddToDbTableCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "CREATE TABLE MethRfc2544B2B_CurrentTrial (FrameSize INTEGER, BurstSize INTEGER, Trial INTEGER, FramesSent INTEGER, FramesReceived INTEGER, BurstsSent FLOAT, FramesLost INTEGER, Loss FLOAT, Load FLOAT, Threshold INTEGER, Verdict TEXT)" }] }, { "db_information": { "columns": ["Threshold"], "db_name": "SUMMARY", "table_name": "MethRfc2544B2B_CurrentTrial" }, "table": [ ["30"] ] }] }
<blank>
False

Results: Populate the color table (for the chart series)
AddToDbTableCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "CREATE TABLE MethRfc2544B2B_Colors (color STRING)" }] }, { "db_information": { "columns": ["color"], "db_name": "SUMMARY", "table_name": "MethRfc2544B2B_Colors" }, "table": [ ["#ff0000"], ["#ff8000"], ["#ffff00"], ["#00ff00"], ["#0000ff"], ["#7f00ff"], ["#ff00ff"], ["#ff0040"], ["#ffbf00"], ["#bfff00"], ["#40ff00"], ["#007fff"], ["#bf00ff"], ["#ff0080"], ["#ff4000"], ["#80ff00"], ["#00ff40"], ["#0040ff"], ["#4000ff"], ["#ff00bf"], ["#00ff80"], ["#00ffff"], ["#00bfff"], ["#00ffbf"] ] }] }
<blank>
False

Temp: Create MethRfc2544B2B_LoopVariables
AddToDbTableCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "CREATE TABLE MethRfc2544B2B_LoopVariables (FrameIter INTEGER, BurstIter INTEGER, TrialIter INTEGER)" }] }, { "db_information": { "columns": ["FrameIter", "BurstIter", "TrialIter"], "db_name": "SUMMARY", "table_name": "MethRfc2544B2B_LoopVariables" }, "table": [ ["0", "0", "0"] ] }] }
<blank>
False

Config: Set Analyzer to Forwarding Performance Mode
SetCounterGroupCommand
Forwarding Performance Mode

For each Frame Size specified by the user...
IterationGroupCommand

Config: Set frame sizes from MethRfc2544B2B_Config
SetPropertyFromQueryCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "set_property": [{ "class_name": "spirent.methodology.ObjectIteratorCommand", "conversion": "NORMAL", "property_name": "ValueList", "tag_list": ["WhileFrameSize"] }], "sql_statement": [{ "static": "SELECT FrameSize FROM MethRfc2544B2B_Config" }] }] }
<blank>
False

While
SequencerWhileCommand
Iterators: Object Iterator Command == Passed
False
80
100
True
Step
10
List
128, 256, 512
< Manually Tagged the ObjectIteratorCommand with WhileFrameSize >
--> <Relation type="UserTag" target="2702"/> (ID is dynamic)

Temp: Get FrameSize iteration number
IteratorConfigJsonPropertyValue
empty
SetFrameIter
512
3
spirent.methodology.RunSqlCommand
DbJsonString
<blank>
sql_operations[0].sql_statement[1].dynamic.value[0].dynamic
True

Temp: Set FrameIter in MethRfc2544B2B_LoopVariables
RunSqlCommand
{"sql_operations": [{"sql_statement": [{"static": "UPDATE MethRfc2544B2B_LoopVariables SET FrameIter=("}, {"dynamic": {"no_trailing_space": true, "enable": true, "value": [{"dynamic": "3"}, {"static": ")"}]}}], "db_information": {"db_name": "SUMMARY"}}]}
<blank>
False
--> Tagged SetFrameIter

Config: Set the stream block's frame size
IteratorConfigFrameSizeCommand
empty
TrafficMixTag
512
3

Config: Set Generator load
SetPropertyFromQueryCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "SELECT Load FROM MethRfc2544B2B_Config WHERE rowid=(SELECT FrameIter FROM MethRfc2544B2B_LoopVariables)" }], "set_property": [{ "class_name": "GeneratorConfig", "conversion": "NORMAL", "tag_list": ["East_Port_Group", "West_Port_Group"], "property_name": "FixedLoad" }] }] }
<blank>
False
--> Tagged SetGeneratorLoad

Results: Prepare the frame size JSON
IteratorConfigJsonPropertyValue
empty
AddFrameSize
512
3
spirent.methodology.RunSqlCommand
DbJsonString
<blank>
sql_operations[0].sql_statement[1].dynamic
False

Results: Add the Frame Size into MethRfc2544B2B_CurrentTrial
RunSqlCommand
{"sql_operations": [{"sql_statement": [{"static": "UPDATE MethRfc2544B2B_CurrentTrial SET FrameSize="}, {"dynamic": "512"}], "db_information": {"db_name": "SUMMARY"}}]}
<blank>
False
--> Tagged AddFrameSize

Results: Add the Load into MethRfc2544B2B_CurrentTrial
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_CurrentTrial SET Load=(SELECT Load FROM MethRfc2544B2B_Config WHERE rowid=(SELECT FrameIter FROM MethRfc2544B2B_LoopVariables))" }] }] }
<blank>
False
--> Tagged InitSummaryResults

For each Burst Size specified by the user (min, max, and step)...
IterationGroupCommand

Config: Set burst sizes from MethRfc2544B2B_Config
SetPropertyFromQueryCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "SELECT MinBurst FROM MethRfc2544B2B_Config WHERE rowid=(SELECT FrameIter FROM MethRfc2544B2B_LoopVariables)" }], "set_property": [{ "class_name": "spirent.methodology.ObjectIteratorCommand", "conversion": "NORMAL", "tag_list": ["WhileBurstSize"], "property_name": "MinVal" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "SELECT MaxBurst FROM MethRfc2544B2B_Config WHERE rowid=(SELECT FrameIter FROM MethRfc2544B2B_LoopVariables)" }], "set_property": [{ "class_name": "spirent.methodology.ObjectIteratorCommand", "conversion": "NORMAL", "tag_list": ["WhileBurstSize"], "property_name": "MaxVal" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "SELECT StepBurst FROM MethRfc2544B2B_Config WHERE rowid=(SELECT FrameIter FROM MethRfc2544B2B_LoopVariables)" }], "set_property": [{ "class_name": "spirent.methodology.ObjectIteratorCommand", "conversion": "NORMAL", "tag_list": ["WhileBurstSize"], "property_name": "StepVal" }] }] }
<blank>
False

While
SequencerWhileCommand
Iterators: Object Iterator Command == Passed
False
20
20
True
Binary
5
Range
empty
< Manually Tagged the ObjectIteratorCommand with WhileBurstSize >
--> <Relation type="UserTag" target="2703"/> (ID is dynamic)

Temp: Get BurstSize iteration number
IteratorConfigJsonPropertyValue
empty
SetBurstSizeIteration
20
1
spirent.methodology.RunSqlCommand
DbJsonString
<blank>
sql_operations[0].sql_statement[1].dynamic.value[0].dynamic
True

Temp: Set BurstIter in MethRfc2544B2B_LoopVariables
RunSqlCommand
{"sql_operations": [{"sql_statement": [{"static": "UPDATE MethRfc2544B2B_LoopVariables SET BurstIter=("}, {"dynamic": {"no_trailing_space": true, "enable": true, "value": [{"dynamic": "1"}, {"static": ")"}]}}], "db_information": {"db_name": "SUMMARY"}}]}
<blank>
False
--> Tagged SetBurstSizeIteration

Config: Set this iteration's burst size
IteratorConfigPropertyValueCommand
empty
East_Port_Group, West_Port_Group
20
1
GeneratorConfig
BurstSize
<blank>

Results: Prepare the burst size JSON
IteratorConfigJsonPropertyValue
empty
AddBurstSize
20
1
spirent.methodology.RunSqlCommand
DbJsonString
<blank>
sql_operations[0].sql_statement[1].dynamic
False

Results: Add the Burst Size into MethRfc2544B2B_CurrentTrial
RunSqlCommand
{"sql_operations": [{"sql_statement": [{"static": "UPDATE MethRfc2544B2B_CurrentTrial SET BurstSize="}, {"dynamic": "20"}], "db_information": {"db_name": "SUMMARY"}}]}
<blank>
False
--> Tagged AddBurstSize

For N trials (min = 1, max = N, step = 1)...
IterationGroupCommand

While
SequencerWhileCommand
Iterators: Object Iterator Command == Passed
False
1
2
True
Step
1
Range
empty

Results: Prepare the trial JSON
IteratorConfigJsonPropertyValue
empty
SetTrialIter
2
2
spirent.methodology.RunSqlCommand
DbJsonString
<blank>
sql_operations[0].sql_statement[1].dynamic.value[0].dynamic
True

Temp: Set TrialIter in MethRfc2544B2B_LoopVariables
RunSqlCommand
{"sql_operations": [{"sql_statement": [{"static": "UPDATE MethRfc2544B2B_LoopVariables SET TrialIter=("}, {"dynamic": {"no_trailing_space": true, "enable": true, "value": [{"dynamic": "2"}, {"static": ")"}]}}], "db_information": {"db_name": "SUMMARY"}}]}
<blank>
False
--> Tagged SetTrialIter

Comment
SequencerComment
Send Traffic from all Tx Ports, based on the user's Traffic Pattern

Learning Section
TestGroupCommand
Learning
Parameters to configure L2/L3 learning

Perform Learning Command(s)
ExecuteWithTagsCommand
{ "command_list": [{ "command_name": "L2LearningStartCommand", "enable": false, "handle_property_list": [{ "class_name_list": ["StreamBlock"], "property_name": "HandleList", "tag_name_list": ["ttStreamBlock"] }], "property_value": { "L2LearningOption": "TX_RX" } }, { "command_name": "L2LearningStopCommand", "enable": false, "handle_property_list": [{ "class_name_list": ["StreamBlock"], "property_name": "HandleList", "tag_name_list": ["ttStreamBlock"] }] }, { "command_name": "ArpNdStartCommand", "enable": true, "handle_property_list": [{ "class_name_list": ["StreamBlock"], "property_name": "HandleList", "tag_name_list": ["ttStreamBlock"] }], "property_value": { "ForceArp": true, "WaitForArpToFinish": true } }, { "command_name": "ArpNdStopCommand", "enable": true, "handle_property_list": [{ "class_name_list": ["StreamBlock"], "property_name": "HandleList", "tag_name_list": ["ttStreamBlock"] }] }, { "command_name": "ArpNdVerifyResolvedCommand", "enable": true, "handle_property_list": [{ "class_name_list": ["StreamBlock"], "property_name": "HandleList", "tag_name_list": ["ttStreamBlock"] }] }], "description": "Learning Commands", "enable": false }
<blank>
False
True

Wait after learning
WaitCommand
2

SequencerComment
FIXME:  Mark this test Incomplete if learning fails

Clear All Results
ResultsClearAllCommand
empty

Send Traffic
ExecuteWithTagsCommand
{ "enable": true, "description": "Traffic Commands", "command_list": [{ "enable": true, "command_name": "GeneratorStartCommand", "handle_property_list": [{ "property_name": "GeneratorList", "tag_name_list": ["West_Port_Group", "East_Port_Group"], "class_name_list": ["Generator"] }] }, { "enable": false, "command_name": "GeneratorStartCommand", "handle_property_list": [{ "property_name": "GeneratorList", "tag_name_list": ["West_Port_Group"], "class_name_list": ["Generator"] }] }, { "enable": false, "command_name": "GeneratorStartCommand", "handle_property_list": [{ "property_name": "GeneratorList", "tag_name_list": ["East_Port_Group"], "class_name_list": ["Generator"] }] }, { "enable": true, "command_name": "GeneratorWaitForStartCommand", "property_value": { "WaitTimeout": 30.0 }, "handle_property_list": [{ "property_name": "GeneratorList", "tag_name_list": ["West_Port_Group", "East_Port_Group"], "class_name_list": ["Generator"] }] }, { "enable": false, "command_name": "GeneratorWaitForStartCommand", "property_value": { "WaitTimeout": 30.0 }, "handle_property_list": [{ "property_name": "GeneratorList", "tag_name_list": ["West_Port_Group"], "class_name_list": ["Generator"] }] }, { "enable": false, "command_name": "GeneratorWaitForStartCommand", "property_value": { "WaitTimeout": 30.0 }, "handle_property_list": [{ "property_name": "GeneratorList", "tag_name_list": ["East_Port_Group"], "class_name_list": ["Generator"] }] }] }
<blank>
False
True

Wait after traffic started
WaitCommand
3

Stop Traffic
ExecuteWithTagsCommand
{ "enable": true, "description": "Traffic Commands", "command_list": [{ "enable": true, "command_name": "GeneratorStopCommand", "handle_property_list": [{ "property_name": "GeneratorList", "tag_name_list": ["West_Port_Group", "East_Port_Group"], "class_name_list": ["Generator"] }] }, { "enable": false, "command_name": "GeneratorStopCommand", "handle_property_list": [{ "property_name": "GeneratorList", "tag_name_list": ["West_Port_Group"], "class_name_list": ["Generator"] }] }, { "enable": false, "command_name": "GeneratorStopCommand", "handle_property_list": [{ "property_name": "GeneratorList", "tag_name_list": ["East_Port_Group"], "class_name_list": ["Generator"] }] }, { "enable": true, "command_name": "GeneratorWaitForStopCommand", "property_value": { "WaitTimeout": 30.0 }, "handle_property_list": [{ "property_name": "GeneratorList", "tag_name_list": ["West_Port_Group", "East_Port_Group"], "class_name_list": ["Generator"] }] }, { "enable": false, "command_name": "GeneratorWaitForStopCommand", "property_value": { "WaitTimeout": 30.0 }, "handle_property_list": [{ "property_name": "GeneratorList", "tag_name_list": ["West_Port_Group"], "class_name_list": ["Generator"] }] }, { "enable": false, "command_name": "GeneratorWaitForStopCommand", "property_value": { "WaitTimeout": 30.0 }, "handle_property_list": [{ "property_name": "GeneratorList", "tag_name_list": ["East_Port_Group"], "class_name_list": ["Generator"] }] }] }
<blank>
False
True

Wait after traffic stopped
WaitCommand
3

Save Results
SaveResultsCommand
rfc2544_backtoback.db
C:\Users\kevmatsumo\Documents\Spirent\TestCenter 9.90\rfc2544_backtoback.db
True/True/True/Append

Results: Copy the summary Config, LoopVariables, & CurrentTrial to iteration DB
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY", "dest_db": { "dest_db_name": "LAST_ITERATION", "dest_table_name": "MethRfc2544B2B_Config" } }, "sql_statement": [{ "static": "SELECT * FROM MethRfc2544B2B_Config" }] }, { "db_information": { "db_name": "SUMMARY", "dest_db": { "dest_db_name": "LAST_ITERATION", "dest_table_name": "MethRfc2544B2B_LoopVariables" } }, "sql_statement": [{ "static": "SELECT * FROM MethRfc2544B2B_LoopVariables" }] }, { "db_information": { "db_name": "SUMMARY", "dest_db": { "dest_db_name": "LAST_ITERATION", "dest_table_name": "MethRfc2544B2B_CurrentTrial" } }, "sql_statement": [{ "static": "SELECT * FROM MethRfc2544B2B_CurrentTrial" }] }] }
<blank>
False

Results: Add Trial into MethRfc2544B2B_CurrentTrial
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "LAST_ITERATION" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_CurrentTrial SET Trial=(SELECT TrialIter FROM MethRfc2544B2B_LoopVariables)" }] }] }
<blank>
False

Comment
SequencerComment
FIXME: How to determine the Number of Frames Lost?

Comment
SequencerComment
FIXME: I am ignoring the Dropped, Late, and OOS frame counts.

Results: Create MethRfc2544B2B_FrameCounts by joining the RxEotStreamResults and TxEotStreamResults tables
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "LAST_ITERATION" }, "sql_statement": [{ "static": "CREATE TABLE MethRfc2544B2B_FrameCounts AS SELECT RxPort AS RxPort, tx.FrameCount AS TxFrames, rx.FrameCount AS RxFrames, DroppedFrameCount, LateFrameCount, OutSeqFrameCount FROM TxEotStreamResults AS tx INNER JOIN RxEotStreamResults AS rx ON tx.StreamId=rx.Comp32" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "CREATE TABLE IF NOT EXISTS MethRfc2544B2B_FrameCounts (RxPort, TxFrames, RxFrames, DroppedFrameCount, LateFrameCount, OutSeqFrameCount)" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "DELETE FROM MethRfc2544B2B_FrameCounts" }] }, { "db_information": { "db_name": "LAST_ITERATION", "dest_db": { "dest_db_name": "SUMMARY", "dest_table_name": "MethRfc2544B2B_FrameCounts" } }, "sql_statement": [{ "static": "SELECT * FROM MethRfc2544B2B_FrameCounts" }] }] }
<blank>
False

Comment
SequencerComment
This is a hack - if ARP fails, the RxEotStreamResults and/or RxEotStreamResults table will be empty.  If either table is empty, the join will fail and MethRfc2544B2B_FrameCounts will also be empty.

SequencerIfCommand
If Run SQL Command
{ "sql_for_command_verdict": [{ "static": "SELECT CASE WHEN (SELECT COUNT(*) FROM MethRfc2544B2B_FrameCounts) = 0 THEN 1 ELSE 0 END" }], "sql_operations": [] }
<blank>
False

Insert a row of 0's
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "LAST_ITERATION" }, "sql_statement": [{ "static": "INSERT INTO MethRfc2544B2B_FrameCounts (RxPort, TxFrames, RxFrames, DroppedFrameCount, LateFrameCount, OutSeqFrameCount) VALUES (0, 0, 0, 0, 0, 0)" }] }] }
<blank>
False

Results: Add FramesLost into MethRfc2544B2B_CurrentTrial
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "LAST_ITERATION" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_CurrentTrial SET FramesSent = (SELECT SUM(TxFrames) FROM MethRfc2544B2B_FrameCounts)" }] }, { "db_information": { "db_name": "LAST_ITERATION" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_CurrentTrial SET BurstsSent = ROUND(((SELECT FramesSent FROM MethRfc2544B2B_CurrentTrial) / (1.0 * (SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial))), 2)" }] }, { "db_information": { "db_name": "LAST_ITERATION" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_CurrentTrial SET FramesReceived = (SELECT SUM(RxFrames) FROM MethRfc2544B2B_FrameCounts)" }] }, { "db_information": { "db_name": "LAST_ITERATION" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_CurrentTrial SET FramesLost = FramesSent - FramesReceived" }] }] }
<blank>
False

Results: Calculate and add Loss into MethRfc2544B2B_CurrentTrial
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "LAST_ITERATION" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_CurrentTrial SET Loss=(ROUND((SELECT FramesLost FROM MethRfc2544B2B_CurrentTrial) * 100.0 / (SELECT FramesSent FROM MethRfc2544B2B_CurrentTrial), 2))" }] }, { "db_information": { "db_name": "LAST_ITERATION" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_CurrentTrial SET Loss=0.0 WHERE Loss IS NULL" }] }] }
<blank>
False

Results: Add Verdict into MethRfc2544B2B_CurrentTrial
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "LAST_ITERATION" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_CurrentTrial SET Verdict=(SELECT CASE WHEN ((SELECT FramesSent FROM MethRfc2544B2B_CurrentTrial) > 0 AND (SELECT FramesReceived FROM MethRfc2544B2B_CurrentTrial) > 0 AND (SELECT Loss FROM MethRfc2544B2B_CurrentTrial) = 0) THEN 'PASS' ELSE 'FAIL' END)" }] }] }
<blank>
False

Results: Push iteration's MethRfc2544B2B_CurrentTrial into summary and append into MethRfc2544B2B_FrameBurstTrial
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "DELETE FROM MethRfc2544B2B_CurrentTrial" }] }, { "db_information": { "db_name": "LAST_ITERATION", "dest_db": { "dest_db_name": "SUMMARY", "dest_table_name": "MethRfc2544B2B_CurrentTrial" } }, "sql_statement": [{ "static": "SELECT * FROM MethRfc2544B2B_CurrentTrial" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "INSERT INTO MethRfc2544B2B_FrameBurstTrial SELECT FrameSize, BurstSize, Trial, FramesSent, FramesReceived, BurstsSent, FramesLost, Loss, Load, Verdict FROM MethRfc2544B2B_CurrentTrial" }] }] }
<blank>
False

Comment
SequencerComment
Reviews Frame Loss to determine if this trial passed

Trial Validations
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "enable": true, "report": { "display_name": "Trial Results", "explanation": "This trial can only pass if are no lost frames", "report_group": "GROUP_3", "report_verdict": { "apply_test_verdict": true, "failed_verdict_explanation": "FAIL:  At least one frame was lost", "passed_verdict_explanation": "PASS:  No frame loss was detected by the Analyzer", "sql_for_verdict": [{ "static": "SELECT CASE WHEN (SELECT COUNT (*) FROM MethRfc2544B2B_CurrentTrial WHERE Verdict != 'PASS') > 0 THEN 0 ELSE 1 END" }] } }, "sql_statement": [{ "static": "SELECT FrameSize AS 'Frame Size (bytes)', BurstSize AS 'Burst Size (frames)', Trial AS 'Trial #', FramesSent AS 'Tx Frame Count', BurstsSent AS 'Bursts Sent (frames)', FramesReceived AS 'Rx Frame Count', FramesLost AS 'Frames Lost', Loss AS 'Frame Loss %', Load AS 'Load %', Verdict FROM MethRfc2544B2B_CurrentTrial WHERE Verdict != 'PASS'" }] }] }
<blank>
False

Complete Trial
CompleteIterationCommand

Validate Trial
IteratorValidateCommand
2

Wait at end of iteration
WaitCommand
0.1

Comment
SequencerComment
Reviews Total Frame Loss to determine if this Burst Size is acceptable.

Results: Process the MethRfc2544B2B_FrameBurst entry
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "INSERT INTO MethRfc2544B2B_FrameBurst (FrameSize, BurstSize, Load) SELECT FrameSize, BurstSize, Load FROM MethRfc2544B2B_CurrentTrial" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_FrameBurst SET TotalFramesSent=(SELECT SUM(FramesSent) FROM MethRfc2544B2B_FrameBurstTrial WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)) WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_FrameBurst SET AvgBurstsSent=ROUND((SELECT TotalFramesSent FROM MethRfc2544B2B_FrameBurst WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)) / (1.0 * (SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)) / (SELECT Trial FROM MethRfc2544B2B_CurrentTrial), 2) WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_FrameBurst SET TotalFramesReceived=(SELECT SUM(FramesReceived) FROM MethRfc2544B2B_FrameBurstTrial WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)) WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_FrameBurst SET TotalFramesLost=(SELECT SUM(FramesLost) FROM MethRfc2544B2B_FrameBurstTrial WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)) WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_FrameBurst SET AvgFramesLost=(ROUND((SELECT TotalFramesLost FROM MethRfc2544B2B_FrameBurst WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)) * 100.0 / (SELECT TotalFramesSent FROM MethRfc2544B2B_FrameBurst WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)), 2)) WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_FrameBurst SET AvgFramesLost=0.0 WHERE AvgFramesLost IS NULL AND FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_FrameBurst SET Verdict=(SELECT CASE WHEN (SELECT TotalFramesLost FROM MethRfc2544B2B_FrameBurst WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)) > 0 THEN \"FAIL\" ELSE \"PASS\" END) WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_FrameBurst SET Verdict='FAIL' WHERE (TotalFramesSent = 0) OR (TotalFramesReceived = 0)" }] }] }
<blank>
False

Burst Size Validations
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "report": { "display_name": "Burst Size Results (Summary)", "explanation": "Reviews total frame loss to determine if this Burst Size is acceptable", "report_group": "GROUP_2", "report_verdict": { "apply_test_verdict": true, "failed_verdict_explanation": "FAIL:  The table shows the total number of frames lost for all trials of this burst size.", "passed_verdict_explanation": "PASS:  No frame loss was detected by the Analyzer.", "sql_for_verdict": [{ "static": "SELECT CASE WHEN (SELECT Verdict != 'PASS' FROM MethRfc2544B2B_FrameBurst WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)) THEN 0 ELSE 1 END" }] } }, "sql_statement": [{ "static": "SELECT FrameSize AS 'Frame Size (bytes)', BurstSize AS 'Burst Size (frames)', TotalFramesSent AS 'Tx Frame Count', AvgBurstsSent AS 'Avg Bursts Sent', TotalFramesReceived AS 'Rx Frame Count', TotalFramesLost AS 'Tx Frames Lost', AvgFramesLost AS 'Average Frames Lost', Load AS 'Load %', Verdict FROM MethRfc2544B2B_FrameBurst WHERE TotalFramesLost > 0 AND FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)" }] }, { "db_information": { "db_name": "SUMMARY" }, "report": { "display_name": "Burst Size Results (all trials)", "report_group": "GROUP_2" }, "sql_statement": [{ "static": "SELECT FrameSize AS 'Frame Size (bytes)', BurstSize AS 'Burst Size (frames)', Trial AS 'Trial #', FramesSent AS 'Tx Frame Count', BurstsSent AS 'Bursts Sent (frames)', FramesReceived AS 'Rx Frame Count', FramesLost AS 'Frames Lost', Loss AS 'Loss %', Load AS 'Load %', Verdict FROM MethRfc2544B2B_FrameBurstTrial WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT BurstSize FROM MethRfc2544B2B_CurrentTrial)" }] }] }
<blank>
False

Complete Burst Size
CompleteIterationCommand

Validate Burst Size
IteratorValidateCommand
0

Comment
SequencerComment
Reviews list of Burst Sizes to determine if this Frame Size is acceptable

Results: Process the MethRfc2544B2B_Frame entry
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "INSERT INTO MethRfc2544B2B_Frame (FrameSize, Load, Threshold) SELECT FrameSize, Load, Threshold FROM MethRfc2544B2B_CurrentTrial" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_Frame SET MaxBurst=(SELECT MAX(BurstSize) FROM MethRfc2544B2B_FrameBurst WHERE Verdict='PASS' AND FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial)) WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial)" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_Frame SET AvgBursts=(SELECT AvgBurstsSent FROM MethRfc2544B2B_FrameBurst WHERE Verdict='PASS' AND FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial) AND BurstSize=(SELECT MaxBurst FROM MethRfc2544B2B_Frame WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial))) WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial)" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_Frame SET MaxBurst=0 WHERE MaxBurst IS NULL" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_Frame SET AvgBursts=0 WHERE AvgBursts IS NULL" }] }, { "db_information": { "db_name": "SUMMARY" }, "sql_statement": [{ "static": "UPDATE MethRfc2544B2B_Frame SET Verdict=(SELECT CASE WHEN (SELECT MaxBurst FROM MethRfc2544B2B_Frame WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial)) >= (SELECT Threshold FROM MethRfc2544B2B_CurrentTrial) THEN \"PASS\" ELSE \"FAIL\" END) WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial)" }] }] }
<blank>
False

Frame Size Validations
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "enable": true, "report": { "display_name": "Frame Size Results (Summary)", "explanation": "Reviews list of burst sizes to determine if this Frame Size is acceptable", "report_group": "GROUP_1", "report_verdict": { "apply_test_verdict": true, "failed_verdict_explanation": "FAIL:  The table shows the burst size(s) that did not meet the threshold", "passed_verdict_explanation": "PASS:  This Frame Size has at least one acceptable Burst Size", "sql_for_verdict": [{ "static": "SELECT CASE WHEN (SELECT Verdict = 'PASS' FROM MethRfc2544B2B_Frame WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial)) THEN 1 ELSE 0 END" }] } }, "sql_statement": [{ "static": "SELECT FrameSize AS 'Frame Size (bytes)', MaxBurst AS 'Max Burst Size (frames)', AvgBursts AS 'Avg Bursts Sent', Threshold AS 'Min Acceptable Burst Size (frames)', Load AS 'Load %', Verdict FROM MethRfc2544B2B_Frame WHERE MaxBurst < (SELECT Threshold FROM MethRfc2544B2B_Frame) AND FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial)" }] }, { "db_information": { "db_name": "SUMMARY" }, "enable": true, "report": { "display_name": "Frame Size Results (all burst sizes)", "report_group": "GROUP_1" }, "sql_statement": [{ "static": "SELECT FrameSize AS 'Frame Size (bytes)', BurstSize AS 'Burst Size (frames)', TotalFramesSent AS 'Tx Frame Count', AvgBurstsSent AS 'Avg Bursts Sent', TotalFramesReceived AS 'Rx Frame Count', TotalFramesLost AS 'Tx Frames Lost', AvgFramesLost AS 'Average Frames Lost', Load AS 'Load %', Verdict FROM MethRfc2544B2B_FrameBurst WHERE FrameSize=(SELECT FrameSize FROM MethRfc2544B2B_CurrentTrial)" }] }] }
<blank>
False

Complete Frame Size
CompleteIterationCommand

Validate Frame Size
IteratorValidateCommand
3

***********************
**  Summary Results  **
***********************
ResultsGroupCommand
<blank>
<blank>

Split the queries into separate lists for the chart
SetPropertyFromQueryCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "set_property": [{ "class_name": "spirent.methodology.CreateMethodologyChartCommand", "conversion": "NORMAL", "property_name": "Series", "replace": "SELECT MaxBurst From MethRfc2544B2B_Frame WHERE FrameSize={}", "tag_list": [ "B2BSummaryChart" ] }], "sql_statement": [{ "static": "SELECT FrameSize FROM MethRfc2544B2B_Frame" }] }, { "db_information": { "db_name": "SUMMARY" }, "set_property": [{ "class_name": "spirent.methodology.CreateMethodologyChartCommand", "conversion": "DICT", "json_key": "series", "property_name": "TemplateModifier", "tag_list": [ "B2BSummaryChart" ] }], "sql_statement": [{ "static": "SELECT FrameSize || ' bytes' AS name FROM MethRfc2544B2B_Frame" }] }, { "db_information": { "db_name": "SUMMARY" }, "set_property": [{ "class_name": "spirent.methodology.CreateMethodologyChartCommand", "conversion": "NORMAL", "property_name": "TemplateModifier", "json_key": "yAxis.plotLines[0].value", "tag_list": [ "B2BSummaryChart" ] }], "sql_statement": [{ "static": "SELECT Threshold FROM MethRfc2544B2B_CurrentTrial" }] }, { "db_information": { "db_name": "SUMMARY" }, "set_property": [{ "class_name": "spirent.methodology.CreateMethodologyChartCommand", "conversion": "NORMAL", "property_name": "TemplateModifier", "json_key": "yAxis.minRange", "tag_list": [ "B2BSummaryChart" ] }], "sql_statement": [{ "static": "SELECT Threshold FROM MethRfc2544B2B_CurrentTrial" }] }] }
<blank>
False

Create Summary Chart
CreateMethodologyChartCommand
Summary
Column_Template.json
RFC 2544 Back-to-Back
Frame Size (bytes)
<blank>
Max Burst Size (frames)
empty
	SELECT MaxBurst From MethRfc2544B2B_Frame WHERE FrameSize=128
	SELECT MaxBurst From MethRfc2544B2B_Frame WHERE FrameSize=256
	SELECT MaxBurst From MethRfc2544B2B_Frame WHERE FrameSize=512
{ "series": [{ "name": "128 bytes" }, { "name": "256 bytes" }, { "name": "512 bytes" }], "plotOptions": { "series": { "dataLabels": { "enabled": true, "format": "{series.name}" } } }, "yAxis": { "min": 0, "minRange": 55, "plotLines": [{ "zIndex": "10", "value": "5", "width": "1", "color": "#ff0000", "dashStyle": "LongDash", "label": { "text": "Burst size threshold", "align": "left", "style": { "color": "#ff0000", "fontSize": "10" } } }] } }
Summary Database
--> Tagged B2BSummaryChart

Create Summary Table and Validation
RunSqlCommand
{ "sql_operations": [{ "db_information": { "db_name": "SUMMARY" }, "report": { "display_name": "Summary Results", "explanation": "Summary of maximum burst sizes for each frame size", "report_group": "SUMMARY", "report_verdict": { "apply_test_verdict": true, "failed_verdict_explanation": "FAIL:  At least one frame size did not have a lossless burst size > threshold.", "passed_verdict_explanation": "PASS:  All frame sizes were able to send bursts > threshold without any frame loss.", "sql_for_verdict": [{ "static": "SELECT CASE WHEN (SELECT COUNT (*) FROM MethRfc2544B2B_Frame WHERE Verdict!=\"PASS\") > 0 THEN 0 ELSE 1 END" }] } }, "sql_statement": [{ "static": "SELECT FrameSize AS 'Frame Size (bytes)', MaxBurst AS 'Maximum burst size (frames)', AvgBursts AS 'Avg Bursts Sent', Threshold AS 'Min Acceptable Burst Size (frames)', Load AS 'Load (%)', Verdict FROM MethRfc2544B2B_Frame WHERE Verdict!=\"PASS\"" }] }, { "db_information": { "db_name": "SUMMARY" }, "report": { "display_name": "RFC 2544 Back-to-Back Summary Table", "explanation": "Table of Maximum Burst Sizes per Frame Size", "report_group": "SUMMARY" }, "sql_statement": [{ "static": "SELECT FrameSize AS 'Frame Size (bytes)', MaxBurst AS 'Maximum burst size (frames)', AvgBursts AS 'Avg Bursts Sent', Threshold AS 'Min Acceptable Burst Size (frames)', Load AS 'Load (%)', Verdict FROM MethRfc2544B2B_Frame" }] }] }
<blank>
False

JSON Expression Manifest

==== Create Global Table
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "CREATE TABLE y1564Global (EnableCir INTEGER, EnableEir INTEGER, EnablePolicing INTEGER, EnableCbs INTEGER, EnableEbs INTEGER, CirSteps INTEGER, CirDuration FLOAT, EirDuration FLOAT, PolicingDuration FLOAT, CbsDuration FLOAT, EbsDuration FLOAT, TestMode TEXT)"
                }
            ]
        },
        {
            "db_information": {
                "columns": [
                    "EnableCir",
                    "EnableEir",
                    "EnablePolicing",
                    "EnableCbs",
                    "EnableEbs",
                    "CirSteps",
                    "CirDuration",
                    "EirDuration",
                    "PolicingDuration",
                    "CbsDuration",
                    "EbsDuration",
                    "TestMode"
                ],
                "db_name": "SUMMARY",
                "table_name": "y1564Global"
            },
            "sql_statement": [],
            "table": [
                [
                    "1",
                    "1",
                    "1",
                    "1",
                    "1",
                    "4",
                    "5.0",
                    "5.0",
                    "5.0",
                    "5.0",
                    "5.0",
                    "NORMAL"
                ]
            ]
        }
    ]
}

==== Create Config Table
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "CREATE TABLE y1564Config(ServiceName TEXT, SourcePortTag TEXT, FrameSizeList TEXT, CIR FLOAT, CBS INTEGER, EIR FLOAT, EBS INTEGER, FLR FLOAT, FTD FLOAT, FDV FLOAT, SVlanEnable INTEGER, SVlanId INTEGER, SvlanIdStep INTEGER, SVlanPri TEXT, CVlanEnable INTEGER, CVlanId INTEGER, CVlanIdStep INTEGER, CVlanPri TEXT, DstMac TEXT, DstMacStep TEXT, SrcMac TEXT, SrcMacStep TEXT, DscpHigh INTEGER, DscpLow, INTEGER, DstIpv4 TEXT, DstIpv4Step TEXT, SrcIpv4 TEXT, SrcIpv4Step TEXT, Ipv4Gw TEXT, Ipv4GwStep TEXT, ColorAware INTEGER, DiscSelect TEXT, DiscDscpHigh INTEGER, DiscDscpLow INTEGER, DiscVlanId INTEGER, DiscVlanIdStep INTEGER, DiscVlanPri TEXT)"
                }
            ]
        },
        {
            "db_information": {
                "columns": [
                    "ServiceName",
                    "SourcePortTag",
                    "FrameSizeList",
                    "CIR",
                    "CBS",
                    "EIR",
                    "EBS",
                    "FLR",
                    "FTD",
                    "FDV",
                    "SVlanEnable",
                    "SVlanId",
                    "SVlanIdStep",
                    "SVlanPri",
                    "CVlanEnable",
                    "CVlanId",
                    "CVlanIdStep",
                    "CVlanPri",
                    "DstMac",
                    "DstMacStep",
                    "SrcMac",
                    "SrcMacStep",
                    "DscpHigh",
                    "DscpLow",
                    "DstIpv4",
                    "DstIpv4Step",
                    "SrcIpv4",
                    "SrcIpv4Step",
                    "Ipv4Gw",
                    "Ipv4GwStep",
                    "ColorAware",
                    "DiscSelect",
                    "DiscDscpHigh",
                    "DiscDscpLow",
                    "DiscVlanId",
                    "DiscVlanIdStep",
                    "DiscVlanPri"
                ],
                "db_name": "SUMMARY",
                "table_name": "y1564Config"
            },
            "sql_statement": [],
            "table": [
                [
                    "Real-Time Data",
                    "West",
                    [
                        "512"
                    ],
                    "5",
                    "0",
                    "0",
                    "0",
                    "0.001",
                    "5",
                    "1",
                    "0",
                    "100",
                    "1",
                    "000",
                    "0",
                    "100",
                    "1",
                    "000",
                    "00:00:01:00:00:01",
                    "00:00:01:00:00:00",
                    "00:10:94:00:00:02",
                    "00:00:01:00:00:00",
                    "1",
                    "2",
                    "192.0.0.1",
                    "0.1.0.0",
                    "192.85.1.2",
                    "0.1.0.0",
                    "192.85.1.1",
                    "0.1.0.0",
                    "0",
                    "DSCP",
                    "0",
                    "0",
                    "100",
                    "1",
                    "000"
                ],
                [
                    "High-Priority Data",
                    "West",
                    [
                        "512"
                    ],
                    "10",
                    "0",
                    "5",
                    "0",
                    "0.05",
                    "15",
                    "9999999",
                    "0",
                    "100",
                    "1",
                    "000",
                    "0",
                    "100",
                    "1",
                    "000",
                    "00:00:01:00:00:01",
                    "00:00:01:00:00:00",
                    "00:10:94:00:00:02",
                    "00:00:01:00:00:00",
                    "1",
                    "2",
                    "192.0.0.1",
                    "0.1.0.0",
                    "192.85.1.2",
                    "0.1.0.0",
                    "192.85.1.1",
                    "0.1.0.0",
                    "0",
                    "DSCP",
                    "0",
                    "0",
                    "100",
                    "1",
                    "000"
                ],
                [
                    "Best-Effort Data",
                    "West",
                    [
                        "512"
                    ],
                    "2.5",
                    "0",
                    "5",
                    "0",
                    "0.05",
                    "30",
                    "9999999",
                    "0",
                    "100",
                    "1",
                    "000",
                    "0",
                    "100",
                    "1",
                    "000",
                    "00:00:01:00:00:01",
                    "00:00:01:00:00:00",
                    "00:10:94:00:00:02",
                    "00:00:01:00:00:00",
                    "1",
                    "2",
                    "192.0.0.1",
                    "0.1.0.0",
                    "192.85.1.2",
                    "0.1.0.0",
                    "192.85.1.1",
                    "0.1.0.0",
                    "0",
                    "DSCP",
                    "0",
                    "0",
                    "100",
                    "1",
                    "000"
                ]
            ]
        }
    ]
}

==== Create Results Table
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "CREATE TABLE y1564Results (Test TEXT, TxOk INTEGER, RateOk INTEGER, FlrOk INTEGER, FtdOk INTEGER, FdvOk INTEGER, ServiceId INTEGER, Step INTEGER, Color TEXT, StepLoad FLOAT, IrMean FLOAT, FlCount FLOAT, Flr FLOAT, TxFrameCount INTEGER, RxFrameCount INTEGER, FtdMin FLOAT, FtdMean FLOAT, FtdMax FLOAT, FdvMin FLOAT, FdvMean FLOAT, FdvMax FLOAT)"
                }
            ]
        }
    ]
}

==== Create Chart Table
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "CREATE TABLE y1564Chart( ServiceId INTEGER, Test TEXT, Step INTEGER, Time FLOAT, IrMean FLOAT)"
                }
            ]
        }
    ]
}

==== Create Iteration table
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "CREATE TABLE y1564Iter (curr INTEGER, step INTEGER, testphase TEXT)"
                }
            ]
        },
        {
            "db_information": {
                "columns": [
                    "curr",
                    "step",
                    "testphase"
                ],
                "db_name": "SUMMARY",
                "table_name": "y1564Iter"
            },
            "sql_statement": [],
            "table": [
                [
                    "0",
                    "0",
                    "CIR"
                ]
            ]
        }
    ]
}

==== Set Service names
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.objectiteratorcommand",
                    "conversion": "NORMAL",
                    "property_name": "ValueList",
                    "tag_list": [
                        "objIterCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT ServiceName FROM y1564Config ORDER BY rowid"
                }
            ]
        }
    ]
}

==== Set up real time subscriptions
[
    {
        "definition": {
            "chart": {
                "type": "line"
            },
            "legend": {
                "enabled": true
            },
            "plotOptions": {
                "series": {
                    "lineWidth": 1
                }
            },
            "series": [],
            "subtitle": {
                "text": "Tx/Rx rate over time."
            },
            "title": {
                "text": "System Level Tx/Rx Rates"
            },
            "tooltip": {
                "headerFormat": "<span style=\"font-size: 10px\">{point.key}s</span><br/>"
            },
            "xAxis": {
                "gridLineWidth": 1,
                "maxPadding": 0.2,
                "minPadding": 0.2,
                "title": {
                    "text": "Time (s)"
                }
            },
            "yAxis": {
                "maxPadding": 0.2,
                "minPadding": 0.2,
                "title": {
                    "text": "Rate (fps)"
                }
            }
        },
        "enable": true,
        "result_id": "1",
        "source_type": "RESULTS_SUBSCRIBE",
        "subscribe": [
            {
                "config_type": "generator",
                "result_parent_tags": [
                    "West",
                    "East"
                ],
                "result_type": "generatorportresults",
                "view_attribute_list": [
                    "generatorsigframerate"
                ]
            },
            {
                "config_type": "analyzer",
                "result_parent_tags": [
                    "West",
                    "East"
                ],
                "result_type": "analyzerportresults",
                "view_attribute_list": [
                    "sigframerate"
                ]
            }
        ],
        "type": "chart"
    }
]

==== Set Service Number
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "sql_statement": [
                {
                    "static": "UPDATE y1564Iter SET curr="
                },
                {
                    "dynamic": "1"
                },
                {
                    "static": "+(SELECT MIN(rowid)-1 FROM y1564Config)"
                }
            ]
        }
    ]
}
Tag: SetIteration

==== If Condition for continuing (both can't be zero)
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT CIR != 0 OR EIR != 0 FROM y1564Config AS cf JOIN y1564Iter AS it ON it.curr=cf.rowid"
        }
    ],
    "sql_operations": []
}

==== Set Frame Size List
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.RunPyScriptCommand",
                    "json_key": "frame_size_list",
                    "property_name": "Params",
                    "tag_list": [
                        "ConfigImixCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT FrameSizeList FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        }
    ]
}

==== Set Load Parameters **** removed
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.ObjectIteratorCommand",
                    "conversion": "NORMAL",
                    "property_name": "MinVal",
                    "tag_list": [
                        "cirIteratorCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CIR/CirSteps FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr, y1564Global"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.ObjectIteratorCommand",
                    "conversion": "NORMAL",
                    "property_name": "StepVal",
                    "tag_list": [
                        "cirIteratorCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE WHEN CirSteps!=1 AND testphase='CIR' THEN CIR/CirSteps ELSE 0 END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr, y1564Global"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.ObjectIteratorCommand",
                    "conversion": "NORMAL",
                    "property_name": "MaxVal",
                    "tag_list": [
                        "cirIteratorCmd"
                    ]
                },
                {
                    "class_name": "spirent.methodology.traffic.AllocateTrafficMixLoadCommand",
                    "conversion": "NORMAL",
                    "property_name": "Load",
                    "tag_list": [
                        "initCirAllocateCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CIR FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.AllocateTrafficMixLoadCommand",
                    "conversion": "NORMAL",
                    "property_name": "Load",
                    "tag_list": [
                        "eirAllocateCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CIR + EIR FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.AllocateTrafficMixLoadCommand",
                    "conversion": "NORMAL",
                    "property_name": "Load",
                    "tag_list": [
                        "color_eirAllocateCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT EIR FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.AllocateTrafficMixLoadCommand",
                    "conversion": "NORMAL",
                    "property_name": "Load",
                    "tag_list": [
                        "poliAllocateCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE WHEN EIR < CIR * 0.2 THEN CIR * 1.25 + EIR ELSE CIR + EIR * 1.25 END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.AllocateTrafficMixLoadCommand",
                    "conversion": "NORMAL",
                    "property_name": "Load",
                    "tag_list": [
                        "color_poliAllocateCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE WHEN EIR < CIR * 0.2 THEN CIR * 0.25 + EIR ELSE EIR * 1.25 END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        }
    ]
}

==== Set Test Durations **** Removed
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "WaitCommand",
                    "property_name": "WaitTime",
                    "tag_list": [
                        "CirTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CirDuration FROM y1564Global"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "WaitCommand",
                    "property_name": "WaitTime",
                    "tag_list": [
                        "EirTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT EirDuration FROM y1564Global"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "WaitCommand",
                    "property_name": "WaitTime",
                    "tag_list": [
                        "PolicingTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT PolicingDuration FROM y1564Global"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "WaitComand",
                    "property_name": "WaitTime",
                    "tag_list": [
                        "CbsTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CbsDuration FROM y1564Global"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "WaitCommand",
                    "property_name": "WaitTime",
                    "tag_list": [
                        "EbsTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT EbsDuration FROM y1564Global"
                }
            ]
        }
    ]
}

==== Set Traffic Ports and Destinations
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.ExecuteWithTagsCommand",
                    "json_key": "command_list[0].handle_property_list[0].tag_name_list[0]",
                    "property_name": "CmdJsonString",
                    "tag_list": [
                        "BurstTraffic"
                    ]
                },
                {
                    "class_name": "spirent.methodology.ExecuteWithTagsCommand",
                    "json_key": "command_list[1].handle_property_list[0].tag_name_list[0]",
                    "property_name": "CmdJsonString",
                    "tag_list": [
                        "StreamTraffic",
                        "BurstTraffic"
                    ]
                },
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].expand.targetTagList[0]",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT SourcePortTag FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        }
    ]
}

==== Set Traffic Mix Parameters
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[0].propertyValue.propertyValueList.Name",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT ServiceName FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].enable",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE WHEN SVlanEnable OR CVlanEnable THEN 'True' ELSE 'False' END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[0].enable",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE WHEN SVlanEnable THEN 'True' ELSE 'False' END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[0].property_data.id",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT SVlanId FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[0].property_data.pri",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT SVlanPri FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[1].enable",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE WHEN CVlanEnable THEN 'True' ELSE 'False' END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[1].property_data.id",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CVlanId FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[1].property_data.pri",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CVlanPri FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].property_data.dstMac",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT DstMac FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].property_data.srcMac",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT SrcMac FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[1].pdu_data[0].pdu_data[0].property_data.dscpHigh",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT DscpHigh FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[1].pdu_data[0].pdu_data[0].property_data.dscpLow",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT DscpLow FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[1].property_data.destAddr",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT DstIpv4 FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[1].property_data.sourceAddr",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT SrcIpv4 FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[1].property_data.gateway",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "greenTraffic",
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT Ipv4Gw FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        }
    ]
}

==== If expression to handle DSCP only
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT CASE WHEN DiscSelect='DSCP' THEN 1 ELSE 0 END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
        }
    ],
    "sql_operations": []
}

==== Set up yellow streamblock values DSCP only
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[1].pdu_data[0].pdu_data[0].property_data.dscpHigh",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT DiscDscpHigh FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.CreateTrafficMixCommand",
                    "json_key": "table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[1].pdu_data[0].pdu_data[0].property_data.dscpLow",
                    "property_name": "MixInfo",
                    "tag_list": [
                        "yellowTraffic"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT DiscDscpLow FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        }
    ]
}

==== Set up yellow streamblock, non-DSCP (modifies SetPropertyCommand)
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.SetPropertyCommand",
                    "property_name": "JsonKey",
                    "tag_list": [
                        "setYellow"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE DiscSelect"
                },
                {
                    "static": "WHEN 'SVLAN_ID' THEN 'table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[0].property_data.id'"
                },
                {
                    "static": "WHEN 'SVLAN_PRI' THEN 'table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[0].property_data.pri'"
                },
                {
                    "static": "WHEN 'CVLAN_ID' THEN 'table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[1].property_data.id'"
                },
                {
                    "static": "WHEN 'CVLAN_PRI' THEN 'table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[1].property_data.pri'"
                },
                {
                    "static": "END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.SetPropertyCommand",
                    "property_name": "Value",
                    "tag_list": [
                        "setYellow"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE DiscSelect"
                },
                {
                    "static": "WHEN 'SVLAN_ID' THEN SVlanId"
                },
                {
                    "static": "WHEN 'SVLAN_PRI' THEN SVlanPri"
                },
                {
                    "static": "WHEN 'CVLAN_ID' THEN CVlanId"
                },
                {
                    "static": "WHEN 'CVLAN_PRI' THEN CVlanPri"
                },
                {
                    "static": "END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        }
    ]
}


==== Custom Script to make imix dictionary (SetPropertyFromQuery failed because the expression only creates strings and not integers)
{
    "enable": true,
    "frame_size_list": [
        "512"
    ],
    "imix_tag_name": "trafImix"
}

==== Set Command Verdict Modes **** removed
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[0].enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "eir_verdict",
                        "policing_verdict",
                        "ebs_verdict",
                        "eir_iteration",
                        "policing_iteration",
                        "ebs_iteration"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT NOT ColorAware FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[1].enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "eir_verdict",
                        "policing_verdict",
                        "ebs_verdict",
                        "eir_iteration",
                        "policing_iteration",
                        "ebs_iteration"
                    ]
                },
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[2].enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "eir_iteration",
                        "policing_iteration",
                        "ebs_iteration"
                    ]
                },
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[3].enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "eir_iteration",
                        "policing_iteration",
                        "ebs_iteration"
                    ]
                },
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[4].enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "policing_iteration"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT ColorAware FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        }
    ]
}

==== Green Traffic Mix
{
    "enable": true,
    "load": 1.0,
    "loadUnits": "MEGABITS_PER_SECOND",
    "table": [
        {
            "baseTemplateFile": "Ipv4_Stream.xml",
            "enable": true,
            "expand": {
                "targetTagList": [
                    "West"
                ]
            },
            "modifyList": [
                {
                    "operationList": [
                        {
                            "propertyValue": {
                                "className": "StreamBlock",
                                "propertyValueList": {
                                    "FixedFrameLength": "512",
                                    "FrameLengthMode": "IMIX",
                                    "Name": "CIR StreamBlock"
                                },
                                "tagName": "ttStreamBlock"
                            }
                        },
                        {
                            "pduBuilder": {
                                "pduData": {
                                    "enable": true,
                                    "pdu_list": [
                                        {
                                            "element_type": "pdu",
                                            "enable": true,
                                            "name": "eth1",
                                            "pdu": "ethernet:EthernetII",
                                            "pdu_data": [
                                                {
                                                    "element_type": "vlans",
                                                    "enable": false,
                                                    "name": "anon_2894",
                                                    "pdu_data": [
                                                        {
                                                            "element_type": "Vlan",
                                                            "enable": false,
                                                            "name": "Vlan_Outer",
                                                            "property_data": {
                                                                "cfi": "0",
                                                                "id": "100",
                                                                "pri": "000",
                                                                "type": "8100"
                                                            }
                                                        },
                                                        {
                                                            "element_type": "Vlan",
                                                            "enable": false,
                                                            "name": "Vlan_Inner",
                                                            "property_data": {
                                                                "cfi": "0",
                                                                "id": "101",
                                                                "pri": "000",
                                                                "type": "8100"
                                                            }
                                                        }
                                                    ]
                                                }
                                            ],
                                            "property_data": {
                                                "dstMac": "00:00:01:00:00:01",
                                                "srcMac": "00:10:94:00:00:02"
                                            }
                                        },
                                        {
                                            "element_type": "pdu",
                                            "enable": true,
                                            "name": "ip_1",
                                            "pdu": "ipv4:IPv4",
                                            "pdu_data": [
                                                {
                                                    "element_type": "tosDiffserv",
                                                    "enable": true,
                                                    "name": "anon_2897",
                                                    "pdu_data": [
                                                        {
                                                            "element_type": "diffServ",
                                                            "enable": true,
                                                            "name": "anon_3682",
                                                            "property_data": {
                                                                "dscpHigh": "1",
                                                                "dscpLow": "2",
                                                                "reserved": "00"
                                                            }
                                                        }
                                                    ]
                                                }
                                            ],
                                            "property_data": {
                                                "destAddr": "192.0.0.1",
                                                "gateway": "192.85.1.1",
                                                "sourceAddr": "192.85.1.2",
                                                "totalLength": "20",
                                                "ttl": "255"
                                            }
                                        },
                                        {
                                            "element_type": "pdu",
                                            "enable": false,
                                            "name": "proto1",
                                            "pdu": "ipv6:IPv6",
                                            "property_data": {
                                                "destAddr": "2000::1",
                                                "gateway": "::1",
                                                "hopLimit": "255",
                                                "payloadLength": "0",
                                                "sourceAddr": "2000::2",
                                                "trafficClass": "0"
                                            }
                                        }
                                    ]
                                },
                                "tagNameList": [
                                    "ttStreamBlock"
                                ]
                            }
                        }
                    ]
                }
            ],
            "tagPrefix": "green_",
            "weight": "100%"
        }
    ]
}
Tag: greenTraffic

Json keys:
table[0].expand.targetTagList -> SourcePort
table[0].modifyList[0].operationList[0].propertyValue.propertyValueList.Name -> Stream block name
table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].enable -> VLANS enable
table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[0].enable -> SVLAN Enable
table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[0].property_data.id -> SVLAN ID
table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[0].property_data.pri -> SVLAN Priority
table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[1].enable -> CVLAN Enable
table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[1].property_data.id -> CVLAN ID
table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].pdu_data[0].pdu_data[1].property_data.pri -> CVLAN Priority
table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].property_data.dstMac -> Dest MAC
table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[0].property_data.srcMac -> Source MAC
table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[1].pdu_data[0].pdu_data[0].property_data.dscpHigh -> DSCP High
table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[1].pdu_data[0].pdu_data[0].property_data.dscpLow -> DSCP Low
table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[1].property_data.destAddr -> Dest IPv4
table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[1].property_data.sourceAddr -> Source IPv4
table[0].modifyList[0].operationList[1].pduBuilder.pduData.pdu_list[1].property_data.gateway -> Gateway IPv4

==== Yellow traffic If Expression
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT ColorAware FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
        }
    ],
    "sql_operations": []
}

==== Yellow Traffic Mix Tag: yellowTraffic (identical to green, except prefix)
{
    "enable": true,
    "load": 1.0,
    "loadUnits": "MEGABITS_PER_SECOND",
    "table": [
        {
            "baseTemplateFile": "Ipv4_Stream.xml",
            "enable": true,
            "expand": {
                "targetTagList": [
                    "West"
                ]
            },
            "modifyList": [
                {
                    "operationList": [
                        {
                            "propertyValue": {
                                "className": "StreamBlock",
                                "propertyValueList": {
                                    "FixedFrameLength": "512",
                                    "FrameLengthMode": "IMIX",
                                    "Name": "CIR StreamBlock"
                                },
                                "tagName": "ttStreamBlock"
                            }
                        },
                        {
                            "pduBuilder": {
                                "pduData": {
                                    "enable": true,
                                    "pdu_list": [
                                        {
                                            "element_type": "pdu",
                                            "enable": true,
                                            "name": "eth1",
                                            "pdu": "ethernet:EthernetII",
                                            "pdu_data": [
                                                {
                                                    "element_type": "vlans",
                                                    "enable": false,
                                                    "name": "anon_2894",
                                                    "pdu_data": [
                                                        {
                                                            "element_type": "Vlan",
                                                            "enable": false,
                                                            "name": "Vlan_Outer",
                                                            "property_data": {
                                                                "cfi": "0",
                                                                "id": "100",
                                                                "pri": "000",
                                                                "type": "8100"
                                                            }
                                                        },
                                                        {
                                                            "element_type": "Vlan",
                                                            "enable": false,
                                                            "name": "Vlan_Inner",
                                                            "property_data": {
                                                                "cfi": "0",
                                                                "id": "101",
                                                                "pri": "000",
                                                                "type": "8100"
                                                            }
                                                        }
                                                    ]
                                                }
                                            ],
                                            "property_data": {
                                                "dstMac": "00:00:01:00:00:01",
                                                "srcMac": "00:10:94:00:00:02"
                                            }
                                        },
                                        {
                                            "element_type": "pdu",
                                            "enable": true,
                                            "name": "ip_1",
                                            "pdu": "ipv4:IPv4",
                                            "pdu_data": [
                                                {
                                                    "element_type": "tosDiffserv",
                                                    "enable": true,
                                                    "name": "anon_2897",
                                                    "pdu_data": [
                                                        {
                                                            "element_type": "diffServ",
                                                            "enable": true,
                                                            "name": "anon_3682",
                                                            "property_data": {
                                                                "dscpHigh": "1",
                                                                "dscpLow": "2",
                                                                "reserved": "00"
                                                            }
                                                        }
                                                    ]
                                                }
                                            ],
                                            "property_data": {
                                                "destAddr": "192.0.0.1",
                                                "gateway": "192.85.1.1",
                                                "sourceAddr": "192.85.1.2",
                                                "totalLength": "20",
                                                "ttl": "255"
                                            }
                                        },
                                        {
                                            "element_type": "pdu",
                                            "enable": false,
                                            "name": "proto1",
                                            "pdu": "ipv6:IPv6",
                                            "property_data": {
                                                "destAddr": "2000::1",
                                                "gateway": "::1",
                                                "hopLimit": "255",
                                                "payloadLength": "0",
                                                "sourceAddr": "2000::2",
                                                "trafficClass": "0"
                                            }
                                        }
                                    ]
                                },
                                "tagNameList": [
                                    "ttStreamBlock"
                                ]
                            }
                        }
                    ]
                }
            ],
            "tagPrefix": "yellow_",
            "weight": "100%"
        }
    ]
}

==== Create iMix Distribution
{
    "imixes": [
        {
            "name": "trafImix",
            "table": [
                {
                    "fixedFrameLength": 512,
                    "frameLengthMode": "FIXED",
                    "weight": 1
                }
            ],
            "tag": "trafImix"
        }
    ]
}
json keys:
imixes[0].table

=== Map While
{
    "enable": true,
    "leftComponents": {
        "objectType": "StreamBlock",
        "tagNames": [
            "green_ttStreamBlock",
            "yellow_ttStreamBlock"
        ]
    },
    "mapPattern": "BACKBONE",
    "rightComponents": {
        "objectType": "FrameLengthDistribution",
        "tagNames": [
            "trafImix"
        ]
    }
}

==== Build Pair Relations
{
    "enableLoadFromFileName": true,
    "leftTagName": "CHAINED_LEFT_TAG_NAME",
    "rightTagName": "CHAINED_RIGHT_TAG_NAME",
    "templateXmlFileName": "Streamblock_FrameLengthDistribution_Relation.xml"
}

==== Set Selected Tests
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.ObjectIteratorCommand",
                    "property_name": "ValueList",
                    "tag_list": [
                        "test_selection"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT Phase FROM ("
                },
                {
                    "static": "SELECT CASE WHEN EnableCir THEN 'CIR' END AS 'Phase', 0 AS 'Pri' FROM y1564Global"
                },
                {
                    "static": "UNION SELECT CASE WHEN EnableEir THEN 'EIR' END, 1 FROM y1564Global"
                },
                {
                    "static": "UNION SELECT CASE WHEN EnablePolicing THEN 'Policing' END, 2 FROM y1564Global"
                },
                {
                    "static": "UNION SELECT CASE WHEN EnableCbs THEN 'CBS' END, 3 FROM y1564Global"
                },
                {
                    "static": "UNION SELECT CASE WHEN EnableEbs THEN 'EBS' END, 4 FROM y1564Global"
                },
                {
                    "static": ") WHERE Phase IS NOT null ORDER BY Pri"
                }
            ]
        }
    ]
}

==== Set the test phase
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "UPDATE y1564Iter SET testphase='"
                },
                {
                    "dynamic": {
                        "enable": true,
                        "no_trailing_space": true,
                        "value": [
                            {
                                "static": "'"
                            },
                            {
                                "dynamic": "CIR"
                            },
                            {
                                "static": "'"
                            }
                        ]
                    }
                }
            ]
        }
    ]
}
json_key: sql_statement[1].dynamic.value[1].dynamic
tag: SetTestPhase

==== Set Test Duration
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "WaitCommand",
                    "property_name": "WaitTime",
                    "tag_list": [
                        "TrafficWait"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE testphase WHEN 'CIR' THEN CirDuration"
                },
                {
                    "static": "WHEN 'EIR' THEN EirDuration WHEN 'Policing' THEN PolicingDuration"
                },
                {
                    "static": "WHEN 'CBS' THEN CbsDuration WHEN 'EBS' THEN EbsDuration"
                },
                {
                    "static": "END FROM y1564Global, y1564Iter"
                }
            ]
        }
    ]
}


==== Test Phase Enable If Expression
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT CASE testphase"
        },
        {
            "static": "WHEN 'CIR' THEN CIR!=0"
        },
        {
            "static": "WHEN 'EIR' THEN EIR!=0"
        },
        {
            "static": "WHEN 'Policing' THEN CIR+EIR!=0"
        },
        {
            "static": "WHEN 'CBS' THEN CBS!=0"
        },
        {
            "static": "WHEN 'EBS' THEN EBS!=0"
        },
        {
            "static": "END FROM y1564Config AS cf JOIN y1564Iter AS it on cf.rowid=curr"
        }
    ],
    "sql_operations": []
}

==== Set Load Parameters
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.ObjectIteratorCommand",
                    "conversion": "NORMAL",
                    "property_name": "MinVal",
                    "tag_list": [
                        "rateIterCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE testphase WHEN 'CIR' THEN CIR/CirSteps WHEN 'EIR' THEN CIR+EIR"
                },
                {
                    "static": "WHEN 'Policing' THEN CASE WHEN EIR<CIR*0.2 THEN CIR*1.25+EIR ELSE CIR+EIR*1.25 END"
                },
                {
                    "static": "WHEN 'CBS' THEN CIR WHEN 'EBS' THEN CIR+EIR END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr, y1564Global"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.ObjectIteratorCommand",
                    "conversion": "NORMAL",
                    "property_name": "StepVal",
                    "tag_list": [
                        "rateIterCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE WHEN CirSteps!=1 AND testphase='CIR' THEN CIR/CirSteps ELSE 0 END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr, y1564Global"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.ObjectIteratorCommand",
                    "conversion": "NORMAL",
                    "property_name": "MaxVal",
                    "tag_list": [
                        "rateIterCmd"
                    ]
                },
                {
                    "class_name": "spirent.methodology.traffic.AllocateTrafficMixLoadCommand",
                    "conversion": "NORMAL",
                    "property_name": "Load",
                    "tag_list": [
                        "initCirAllocateCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE testPhase WHEN 'CIR' THEN CIR WHEN 'EIR' THEN CIR+EIR"
                },
                {
                    "static": "WHEN 'Policing' THEN CASE WHEN EIR<CIR*0.2 THEN CIR*1.25+EIR ELSE CIR+EIR*1.25 END"
                },
                {
                    "static": "WHEN 'CBS' THEN CIR WHEN 'EBS' THEN CIR+EIR END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.AllocateTrafficMixLoadCommand",
                    "conversion": "NORMAL",
                    "property_name": "Load",
                    "tag_list": [
                        "eirAllocateCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CIR + EIR FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.AllocateTrafficMixLoadCommand",
                    "conversion": "NORMAL",
                    "property_name": "Load",
                    "tag_list": [
                        "color_eirAllocateCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT EIR FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.AllocateTrafficMixLoadCommand",
                    "conversion": "NORMAL",
                    "property_name": "Load",
                    "tag_list": [
                        "poliAllocateCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE WHEN EIR < CIR * 0.2 THEN CIR * 1.25 + EIR ELSE CIR + EIR * 1.25 END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.traffic.AllocateTrafficMixLoadCommand",
                    "conversion": "NORMAL",
                    "property_name": "Load",
                    "tag_list": [
                        "color_poliAllocateCmd"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE WHEN EIR < CIR * 0.2 THEN CIR * 0.25 + EIR ELSE EIR * 1.25 END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        }
    ]
}

==== CIR Set Initial load expression (skip if zero)
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT CIR != 0 AND testphase='CIR' FROM y1564Config AS cf JOIN y1564Iter AS it ON it.curr=cf.rowid"
        }
    ],
    "sql_operations": []
}

==== EIR Set Load expression (skip if zero)
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT EIR != 0 AND testphase='EIR' FROM y1564Config AS cf JOIN y1564Iter AS it ON it.curr=cf.rowid"
        }
    ],
    "sql_operations": []
}

==== Policing Set Load expression (only when test phase matches)
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT testphase='Policing' FROM y1564Config AS cf JOIN y1564Iter AS it ON it.curr=cf.rowid"
        }
    ],
    "sql_operations": []
}

==== CBS Set Load expression (only when test phase matches)
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT testphase='CBS' FROM y1564Config AS cf JOIN y1564Iter AS it ON it.curr=cf.rowid"
        }
    ],
    "sql_operations": []
}

==== EBS Set Load expression (only when test phase matches)
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT testphase='EBS' FROM y1564Config AS cf JOIN y1564Iter AS it ON it.curr=cf.rowid"
        }
    ],
    "sql_operations": []
}



---- Rate iterator (Step set to zero for other phases)

==== Update y1564 CIR Step
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "sql_statement": [
                {
                    "static": "UPDATE y1564Iter SET step= (SELECT CASE WHEN testphase='CIR' THEN"
                },
                {
                    "dynamic": "1"
                },
                {
                    "static": "ELSE 'NA' END FROM y1564Iter)"
                }
            ]
        }
    ]
}

==== CIR-specific initialization block
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT testphase='CIR' FROM y1564Iter"
        }
    ],
    "sql_operations": []
}

==== If Expression between burst and stream traffic
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT testphase NOT IN ('CBS', 'EBS') FROM y1564Iter"
        }
    ],
    "sql_operations": []
}


==== Start Stream Traffic (the json_keys should match for all non-burst traffic)
{
    "command_list": [
        {
            "command_name": "StreamBlockStartCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "StreamBlock"
                    ],
                    "property_name": "StreamBlockList",
                    "tag_name_list": [
                        "green_ttStreamBlock",
                        "yellow_ttStreamBlock"
                    ]
                }
            ]
        },
        {
            "command_name": "GeneratorWaitForStartCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ],
            "property_value": {
                "WaitTimeout": 300
            }
        }
    ],
    "description": "Run and stop traffic",
    "enable": true
}
json keys:
command_list[1].handle_property_list[0].tag_name_list[0] -> Wait for start
tag: StreamTraffic

==== Start Burst Traffic (the waits should match, but we need to start per port)
{
    "command_list": [
        {
            "command_name": "GeneratorStartCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ]
        },
        {
            "command_name": "GeneratorWaitForStartCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ],
            "property_value": {
                "WaitTimeout": 300
            }
        }
    ],
    "description": "Run and stop traffic",
    "enable": true
}

==== Stop Stream Traffic
{
    "command_list": [
        {
            "command_name": "StreamBlockStopCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "StreamBlock"
                    ],
                    "property_name": "StreamBlockList",
                    "tag_name_list": [
                        "green_ttStreamBlock",
                        "yellow_ttStreamBlock"
                    ]
                }
            ]
        },
        {
            "command_name": "GeneratorWaitForStopCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ],
            "property_value": {
                "WaitTimeout": 300
            }
        }
    ],
    "description": "Run and stop traffic",
    "enable": true
}

==== Stop Burst Traffic (the waits should match, but we need to start per port)
{
    "command_list": [
        {
            "command_name": "GeneratorStopCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ]
        },
        {
            "command_name": "GeneratorWaitForStopCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ],
            "property_value": {
                "WaitTimeout": 300
            }
        }
    ],
    "description": "Run and stop traffic",
    "enable": true
}


==== CIR and EIR post-non-run block
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT testphase IN ('CIR', 'EIR') FROM y1564Iter"
        }
    ],
    "sql_operations": []
}

==== CIR-specific post-run block
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT testphase='CIR' FROM y1564Iter"
        }
    ],
    "sql_operations": []
}

==== EIR-specific post-run block
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT testphase='EIR' FROM y1564Iter"
        }
    ],
    "sql_operations": []
}

==== CBS/EBS post-run block
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT (testphase='CBS' AND CBS!=0) OR (testphase='EBS' AND EBS!=0) FROM y1564Config AS cf JOIN y1564Iter AS it ON cf.rowid=curr"
        }
    ],
    "sql_operations": []
}

==== Copy the y1564Iter table to last iteration db
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY",
                "dest_db": {
                    "dest_db_name": "LAST_ITERATION",
                    "dest_table_name": "y1564Iter"
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT * FROM y1564Iter"
                }
            ]
        }
    ]
}

==== Save test data to results table
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "LAST_ITERATION",
                "dest_db": {
                    "dest_db_name": "SUMMARY",
                    "dest_table_name": "y1564Results"
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT (SELECT testphase FROM y1564Iter) AS Test,"
                },
                {
                    "static": "0 AS TxOk, null AS RateOk,"
                },
                {
                    "static": "null AS FlrOk, null AS FtdOk, null AS FdvOk,"
                },
                {
                    "static": "(SELECT curr FROM y1564Iter) AS ServiceId,"
                },
                {
                    "static": "CASE WHEN (SELECT testphase FROM y1564Iter)='CIR' THEN (SELECT step FROM y1564Iter) ELSE 'NA' END AS Step,"
                },
                {
                    "static": "UPPER(SUBSTR(Tag.Name,1,1)) || SUBSTR(Tag.Name,2,LENGTH(Tag.Name)-15) AS Color,"
                },
                {
                    "static": "null AS StepLoad,"
                },
                {
                    "static": "0 AS IrMean,"
                },
                {
                    "static": "0 AS FlCount,"
                },
                {
                    "static": "'NA' AS Flr,"
                },
                {
                    "static": "0 AS TxFrameCount,"
                },
                {
                    "static": "0 AS RxFrameCount,"
                },
                {
                    "static": "'NA' AS FtdMin,"
                },
                {
                    "static": "'NA' AS FtdMean,"
                },
                {
                    "static": "'NA' AS FtdMax,"
                },
                {
                    "static": "'NA' AS FdvMin,"
                },
                {
                    "static": "'NA' AS FdvMean,"
                },
                {
                    "static": "'NA' AS FdvMax"
                },
                {
                    "static": "FROM StreamBlock AS sb"
                },
                {
                    "static": "JOIN RelationTable AS rt ON Sb.Handle=rt.SourceHnd JOIN Tag ON Rt.TargetHnd=Tag.Handle"
                },
                {
                    "static": "WHERE sb.Handle NOT IN (SELECT ParentStreamBlock FROM TxEotStreamResults) AND sb.Active GROUP BY Tag.Name"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "LAST_ITERATION",
                "dest_db": {
                    "dest_db_name": "SUMMARY",
                    "dest_table_name": "y1564Results"
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT (SELECT testphase FROM y1564Iter) AS Test,"
                },
                {
                    "static": "1 AS TxOk, null AS RateOk,"
                },
                {
                    "static": "CASE WHEN SUBSTR(Tag.Name,2,LENGTH(Tag.Name)-15) == 'reen' THEN 0 ELSE null END AS FlrOk, null AS FtdOk, null AS FdvOk,"
                },
                {
                    "static": "(SELECT curr FROM y1564Iter) AS ServiceId,"
                },
                {
                    "static": "CASE WHEN (SELECT testphase FROM y1564Iter)='CIR' THEN (SELECT step FROM y1564Iter) ELSE 'NA' END AS Step,"
                },
                {
                    "static": "UPPER(SUBSTR(Tag.Name,1,1)) || SUBSTR(Tag.Name,2,LENGTH(Tag.Name)-15) AS Color,"
                },
                {
                    "static": "null AS StepLoad,"
                },
                {
                    "static": "0 AS IrMean,"
                },
                {
                    "static": "tx.FrameCount AS FlCount,"
                },
                {
                    "static": "100 AS Flr,"
                },
                {
                    "static": "SUM(tx.FrameCount) AS TxFrameCount,"
                },
                {
                    "static": "0 AS RxFrameCount,"
                },
                {
                    "static": "'NA' AS FtdMin,"
                },
                {
                    "static": "'NA' AS FtdMean,"
                },
                {
                    "static": "'NA' AS FtdMax,"
                },
                {
                    "static": "'NA' AS FdvMin,"
                },
                {
                    "static": "'NA' AS FdvMean,"
                },
                {
                    "static": "'NA' AS FdvMax"
                },
                {
                    "static": "FROM StreamBlock AS sb JOIN TxEotStreamResults AS tx ON sb.Handle=tx.ParentStreamBlock"
                },
                {
                    "static": "JOIN RelationTable AS rt ON Sb.Handle=rt.SourceHnd JOIN Tag ON Rt.TargetHnd=Tag.Handle WHERE tx.StreamId NOT IN (SELECT Comp32 FROM RxEotStreamResults) AND sb.Active AND ((SELECT testphase!='CBS' FROM y1564Iter) OR SUBSTR(Tag.Name,2,LENGTH(Tag.Name)-15)='reen') GROUP BY Tag.Name"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "LAST_ITERATION",
                "dest_db": {
                    "dest_db_name": "SUMMARY",
                    "dest_table_name": "y1564Results"
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT * FROM (SELECT (SELECT testphase FROM y1564Iter) AS Test,"
                },
                {
                    "static": "1 AS TxOk, null AS RateOk,"
                },
                {
                    "static": "null AS FlrOk, null AS FtdOk, null AS FdvOk,"
                },
                {
                    "static": "(SELECT curr FROM y1564Iter) AS ServiceId,"
                },
                {
                    "static": "CASE WHEN (SELECT testphase FROM y1564Iter)='CIR' THEN (SELECT step FROM y1564Iter) ELSE 'NA' END AS Step,"
                },
                {
                    "static": "UPPER(SUBSTR(Tag.Name,1,1)) || SUBSTR(Tag.Name,2,LENGTH(Tag.Name)-15) AS Color,"
                },
                {
                    "static": "null AS StepLoad,"
                },
                {
                    "static": "ROUND((SUM(rx.L1BitCount) * (sb.L2Rate/sb.BpsLoad) / SUM(rx.LastArrivalTime - rx.FirstArrivalTime))-0.0005, 3) AS IrMean,"
                },
                {
                    "static": "SUM(tx.FrameCount - rx.FrameCount) AS FlCount,"
                },
                {
                    "static": "(SUM(tx.FrameCount - rx.FrameCount) * 100 / SUM(tx.FrameCount)) AS Flr,"
                },
                {
                    "static": "SUM(tx.FrameCount) AS TxFrameCount,"
                },
                {
                    "static": "SUM(rx.FrameCount) AS RxFrameCount,"
                },
                {
                    "static": "(MIN(rx.MinLatency) * 1e-3) AS FtdMin,"
                },
                {
                    "static": "(SUM(rx.AvgLatency * rx.FrameCount)/SUM(rx.FrameCount) * 1e-3) AS FtdMean,"
                },
                {
                    "static": "(MAX(rx.MaxLatency) * 1e-3) AS FtdMax,"
                },
                {
                    "static": "(MIN(rx.MinJitter) * 1e-3) AS FdvMin,"
                },
                {
                    "static": "(SUM(rx.AvgJitter * rx.FrameCount)/SUM(rx.FrameCount) * 1e-3) AS FdvMean,"
                },
                {
                    "static": "(MAX(rx.MaxJitter) * 1e-3) AS FdvMax"
                },
                {
                    "static": "FROM StreamBlock AS sb JOIN TxEotStreamResults AS tx ON sb.Handle=tx.ParentStreamBlock JOIN RxEotStreamResults AS rx ON tx.StreamId=rx.Comp32"
                },
                {
                    "static": "JOIN RelationTable AS rt ON Sb.Handle=rt.SourceHnd JOIN Tag ON Rt.TargetHnd=Tag.Handle WHERE Sb.Active GROUP BY Tag.Name)"
                },
                {
                    "static": "WHERE IrMean IS NOT null"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY",
                "dest_db": {
                    "dest_db_name": "SUMMARY",
                    "dest_table_name": "y1564Results"
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT * FROM (SELECT Test,"
                },
                {
                    "static": "1 AS TxOk, null AS RateOk,"
                },
                {
                    "static": "null AS FlrOk, null AS FtdOk, null AS FdvOk,"
                },
                {
                    "static": "ServiceId, CASE WHEN testphase='CIR' THEN res.step ELSE 'NA' END AS Step,"
                },
                {
                    "static": "'Total' AS Color,"
                },
                {
                    "static": "SUM(StepLoad) AS StepLoad,"
                },
                {
                    "static": "CASE WHEN SUM(IrMean)!=0 THEN ROUND(SUM(IrMean)-0.0005,3) ELSE 0 END AS IrMean, SUM(FlCount) AS FlCount,"
                },
                {
                    "static": "SUM(TxFrameCount - RxFrameCount) * 100 / SUM(TxFrameCount) AS Flr,"
                },
                {
                    "static": "SUM(TxFrameCount) AS TxFrameCount,"
                },
                {
                    "static": "SUM(RxFrameCount) AS RxFrameCount,"
                },
                {
                    "static": "MIN(FtdMin) AS FtdMin,"
                },
                {
                    "static": "CASE WHEN SUM(rxFrameCount)> 0 THEN SUM(FtdMean*RxFrameCount)/SUM(RxFrameCount) ELSE 'NA' END AS FtdMean,"
                },
                {
                    "static": "MAX(FtdMax) AS FtdMax,"
                },
                {
                    "static": "MIN(FdvMin) AS FdvMin,"
                },
                {
                    "static": "CASE WHEN SUM(rxFrameCount)>0 THEN SUM(FdvMean*RxFrameCount)/SUM(RxFrameCount) ELSE 'NA' END AS FdvMean,"
                },
                {
                    "static": "MAX(FdvMax) AS FdvMax"
                },
                {
                    "static": "FROM y1564Results AS res JOIN y1564Iter AS it ON curr=res.ServiceId WHERE Test=testphase)"
                },
                {
                    "static": "WHERE (SELECT COUNT(*) FROM y1564Results AS res JOIN y1564Iter AS it ON curr=res.ServiceId WHERE Test=testphase AND res.Color='Yellow')>0"
                }
            ]
        }
    ]
}

==== Update Step Load
{
    "sql_operations": [
        {
            "db_information": {
                "columns": [
                    "StepLoad"
                ],
                "db_name": "SUMMARY",
                "table_name": "y1564Results"
            },
            "sql_statement": [
                {
                    "static": "Update y1564Results SET StepLoad=(SELECT (y1564Config.CIR/CirSteps*Step) FROM y1564Config, y1564Global WHERE ServiceId=y1564Config.rowid)"
                },
                {
                    "static": "WHERE Test=(SELECT testphase FROM y1564Iter) AND Step=(SELECT step FROM y1564Iter)"
                }
            ]
        }
    ]
}

==== Set up verdict tests
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "set_property": [
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[0].enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "trial_verdict"
                    ]
                },
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[1].enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "trial_verdict"
                    ]
                },
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[2].enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "trial_verdict"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT testphase IN ('CIR', 'CBS') OR ColorAware FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "set_property": [
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[3].enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "trial_verdict"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT testphase='CIR' FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "set_property": [
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[4].enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "trial_verdict"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT testphase='EIR' AND NOT ColorAware FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "set_property": [
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[5].enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "trial_verdict"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT testphase='Policing' AND NOT ColorAware FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "set_property": [
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[6].enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "trial_verdict"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT testphase='Policing' AND ColorAware FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "set_property": [
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[7].enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "trial_verdict"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT testphase='EBS' AND NOT ColorAware FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        }
    ]
}

==== Set Verdicts for all tests
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "sql_statement": [
                {
                    "static": "UPDATE y1564Results SET FlrOk="
                },
                {
                    "static": "(SELECT rt.Flr<=cf.FLR FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase WHERE rt.Color='Green')"
                },
                {
                    "static": "WHERE Test=(SELECT testphase FROM y1564Iter) AND ServiceId=(SELECT curr FROM y1564Iter) AND (Step=(SELECT step FROM y1564Iter) OR (SELECT testphase!='CIR' FROM y1564Iter)) AND Color='Green'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "sql_statement": [
                {
                    "static": "UPDATE y1564Results SET FtdOk="
                },
                {
                    "static": "(SELECT rt.FtdMax IS NOT NULL AND rt.FtdMax<=cf.FTD FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase WHERE rt.Color='Green')"
                },
                {
                    "static": "WHERE Test=(SELECT testphase FROM y1564Iter) AND ServiceId=(SELECT curr FROM y1564Iter) AND (Step=(SELECT step FROM y1564Iter) OR (SELECT testphase!='CIR' FROM y1564Iter)) AND Color='Green'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "sql_statement": [
                {
                    "static": "UPDATE y1564Results SET FdvOk="
                },
                {
                    "static": "(SELECT rt.FdvMax IS NOT NULL AND rt.FdvMax<=cf.FDV FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase WHERE rt.Color='Green')"
                },
                {
                    "static": "WHERE Test=(SELECT testphase FROM y1564Iter) AND ServiceId=(SELECT curr FROM y1564Iter) AND (Step=(SELECT step FROM y1564Iter) OR (SELECT testphase!='CIR' FROM y1564Iter)) AND Color='Green'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "sql_statement": [
                {
                    "static": "UPDATE y1564Results SET RateOk="
                },
                {
                    "static": "(SELECT ROUND(rt.StepLoad*(1-cf.FLR/100.0)-0.0005,3)<=rt.IrMean FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase WHERE rt.Color='Green')"
                },
                {
                    "static": "WHERE Test=(SELECT testphase FROM y1564Iter) AND ServiceId=(SELECT curr FROM y1564Iter) AND (Step=(SELECT step FROM y1564Iter) OR (SELECT testphase!='CIR' FROM y1564Iter)) AND Color='Green'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "sql_statement": [
                {
                    "static": "UPDATE y1564Results SET RateOk="
                },
                {
                    "static": "(SELECT rt.IrMean BETWEEN ROUND(CIR*(1-cf.FLR/100.0)-0.0005,3) AND CIR+EIR FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase WHERE rt.Color='Green')"
                },
                {
                    "static": "WHERE Test=(SELECT testphase FROM y1564Iter) AND ServiceId=(SELECT curr FROM y1564Iter) AND (Step=(SELECT step FROM y1564Iter) OR (SELECT testphase!='CIR' FROM y1564Iter)) AND Color='Green'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "sql_statement": [
                {
                    "static": "UPDATE y1564Results SET RateOk="
                },
                {
                    "static": "(SELECT rt.IrMean BETWEEN ROUND(CIR*(1-cf.FLR/100.0)-0.0005,3) AND (1.01 * (CASE WHEN EIR<CIR*0.2 THEN CIR*1.25+EIR ELSE CIR+EIR*1.25 END)) FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase WHERE rt.Color='Green')"
                },
                {
                    "static": "WHERE Test=(SELECT testphase FROM y1564Iter) AND ServiceId=(SELECT curr FROM y1564Iter) AND (Step=(SELECT step FROM y1564Iter) OR (SELECT testphase!='CIR' FROM y1564Iter)) AND Color='Green'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "sql_statement": [
                {
                    "static": "UPDATE y1564Results SET RateOk="
                },
                {
                    "static": "(SELECT rt.IrMean <= (1.01 * (CASE WHEN EIR<CIR*0.2 THEN CIR*1.25+EIR ELSE CIR+EIR*1.25 END)) FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase WHERE rt.Color='Total')"
                },
                {
                    "static": "WHERE Test=(SELECT testphase FROM y1564Iter) AND ServiceId=(SELECT curr FROM y1564Iter) AND (Step=(SELECT step FROM y1564Iter) OR (SELECT testphase!='CIR' FROM y1564Iter)) AND Color='Green'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "sql_statement": [
                {
                    "static": "UPDATE y1564Results SET RateOk="
                },
                {
                    "static": "(SELECT rt.IrMean >= ROUND(CIR*(1-cf.FLR/100.0)-0.0005,3) FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase WHERE rt.Color='Green')"
                },
                {
                    "static": "WHERE Test=(SELECT testphase FROM y1564Iter) AND ServiceId=(SELECT curr FROM y1564Iter) AND (Step=(SELECT step FROM y1564Iter) OR (SELECT testphase!='CIR' FROM y1564Iter)) AND Color='Green'"
                }
            ]
        }
    ]
}
json_keys:
sql_operations[0].enable Flr
sql_operations[1].enable Ftd
sql_operations[2].enable Fdv
sql_operations[3].enable CIR Rate
sql_operations[4].enable EIR nCA Rate
sql_operations[5].enable Poli nCA Rate
sql_operations[6].enable Poli CA Rate
sql_operations[7].enable EBS Rate

==== Report failures (Same layout as above command, same tag)
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "report": {
                "display_name": "FLR (%)",
                "report_group": "GROUP_2",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "FLR exceeds threshold",
                    "passed_verdict_explanation": "FLR within threshold",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT FlrOk IS null OR FlrOk FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase AND (rt.step=it.step OR testphase!='CIR') WHERE rt.Color='Green'"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT cf.FLR AS 'FLR Max', rt.Flr AS 'Actual FLR'"
                },
                {
                    "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase AND (rt.Step=it.step OR testphase!='CIR') WHERE rt.Color='Green'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "report": {
                "display_name": "FTD (ms)",
                "report_group": "GROUP_2",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "FTD exceeds threshold",
                    "passed_verdict_explanation": "FTD within threshold",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT FtdOk IS null OR FtdOk FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase AND (rt.step=it.step OR testphase!='CIR') WHERE rt.Color='Green'"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT cf.FTD AS 'FTD Max', rt.Ftd AS 'Actual FTD'"
                },
                {
                    "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase AND (rt.Step=it.step OR testphase!='CIR') WHERE rt.Color='Green'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "report": {
                "display_name": "FDV (ms)",
                "report_group": "GROUP_2",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "FDV exceeds threshold",
                    "passed_verdict_explanation": "FDV within threshold",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT FdvOk IS null OR FdvOk FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase AND (rt.step=it.step OR testphase!='CIR') WHERE rt.Color='Green'"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT cf.FDV AS 'FDV Max', rt.Fdv AS 'Actual FDV'"
                },
                {
                    "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase AND (rt.Step=it.step OR testphase!='CIR') WHERE rt.Color='Green'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "report": {
                "display_name": "CIR Test: IR Mean (Mbps)",
                "report_group": "GROUP_2",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "IR Mean outside of expected range. Expected (StepLoad * (1 - FlrThreshold/100.0)) <= IrMean",
                    "passed_verdict_explanation": "IR Mean within threshold",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT RateOk IS null OR RateOk FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase AND (rt.step=it.step OR testphase!='CIR') WHERE rt.Color='Green'"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT ROUND(rt.StepLoad * (1 - cf.FLR/100.0)-0.0005,3) AS 'IR Min', rt.IrMean AS 'Actual IR'"
                },
                {
                    "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND CAST(rt.Step AS INTEGER)=it.step WHERE rt.Test = 'CIR'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "report": {
                "display_name": "EIR Test: IR Mean (Mbps)",
                "report_group": "GROUP_2",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "IR Mean outside of expected range. Expected CIR * (1-FLR/100) <= IrMean <= (CIR + EIR)",
                    "passed_verdict_explanation": "IR Mean within threshold",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT RateOk IS null OR RateOk FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase AND (rt.step=it.step OR testphase!='CIR') WHERE rt.Color='Green'"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT ROUND(cf.CIR * (1 - cf.FLR/100.0)-0.0005,3) AS 'IR Min', (cf.CIR + cf.EIR) AS 'IR Max', rt.IrMean AS 'Actual IR'"
                },
                {
                    "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid = rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr WHERE rt.Test = 'EIR'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "report": {
                "display_name": "Policing Test: IR Mean (Mbps)",
                "report_group": "GROUP_2",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "IR Mean outside of expected range. Expected CIR*(1-FLR/100) <= IR <= MAX (CIR + 125%EIR or 125%CIR + EIR)",
                    "passed_verdict_explanation": "IR Mean within threshold",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT RateOk IS null OR RateOk FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase AND (rt.step=it.step OR testphase!='CIR') WHERE rt.Color='Green'"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT ROUND(CIR * (1 - cf.FLR/100.0)-0.0005,3) AS 'IR Min', (1.01) * (CASE WHEN EIR < CIR * 0.2 THEN 1.25 * CIR + EIR ELSE CIR + 1.25 * EIR END) AS 'IR Max', IrMean AS 'Actual IR'"
                },
                {
                    "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid = ServiceId JOIN y1564Iter AS it ON cf.rowid = curr WHERE rt.Test = 'Policing'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "report": {
                "display_name": "Policing Test: IR Mean (Mbps)",
                "report_group": "GROUP_2",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "Total IR Mean beyond expected value. Expected IR <= MAX (CIR + 125%EIR or 125%CIR + EIR)",
                    "passed_verdict_explanation": "Total IR Mean within threshold",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT RateOk IS null OR RateOk FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase AND (rt.step=it.step OR testphase!='CIR') WHERE rt.Color='Green'"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT (1.01) * (CASE WHEN EIR < CIR * 0.2 THEN 1.25 * CIR + EIR ELSE CIR + 1.25 * EIR END) AS 'IR Max', IrMean AS 'Actual Total IR'"
                },
                {
                    "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid = ServiceId JOIN y1564Iter AS it ON cf.rowid = curr WHERE rt.Test = 'Policing' AND rt.Color='Total'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "report": {
                "display_name": "EBS Test: IR Mean (Mbps)",
                "report_group": "GROUP_2",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "IR Mean outside of expected range. Expected IrMean >= CIR * (1-FLR/100)",
                    "passed_verdict_explanation": "IR Mean within threshold",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT RateOk IS null OR RateOk FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase AND (rt.step=it.step OR testphase!='CIR') WHERE rt.Color='Green'"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT ROUND(cf.CIR * (1 - cf.FLR/100.0)-0.0005,3) AS 'IR Min', rt.IrMean AS 'Actual IR'"
                },
                {
                    "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid = rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr WHERE rt.Test = 'EBS'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "report": {
                "display_name": "Traffic Transmitted",
                "report_group": "GROUP_2",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "No traffic was transmitted",
                    "passed_verdict_explanation": "Traffic was transmitted",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT TxOk IS null OR TxOk FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase AND (rt.step=it.step OR testphase!='CIR') WHERE rt.Color='Green'"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT rt.TxFrameCount AS 'Transmitted Frames'"
                },
                {
                    "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase AND (rt.Step=it.step OR testphase!='CIR') WHERE rt.Color='Green'"
                }
            ]
        }
    ]
}

==== Don't end loop on if/else
{
    "enable": false,
    "sql_operations": []
}


==== CIR If expression **** removed
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT EnableCir AND (SELECT CIR FROM y1564Config AS cf JOIN y1564Iter AS it ON it.curr=cf.rowid)!=0 FROM y1564Global"
        }
    ],
    "sql_operations": []
}

==== Start CIR Traffic (the json_keys should match for all non-burst traffic)
{
    "command_list": [
        {
            "command_name": "StreamBlockStartCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "StreamBlock"
                    ],
                    "property_name": "StreamBlockList",
                    "tag_name_list": [
                        "green_ttStreamBlock"
                    ]
                }
            ]
        },
        {
            "command_name": "GeneratorWaitForStartCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ],
            "property_value": {
                "WaitTimeout": 300
            }
        }
    ],
    "description": "Run and stop traffic",
    "enable": true
}
json keys:
command_list[1].handle_property_list[0].tag_name_list[0] -> Wait for start
tag: CirTraffic

==== Stop CIR Traffic
{
    "command_list": [
        {
            "command_name": "StreamBlockStopCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "StreamBlock"
                    ],
                    "property_name": "StreamBlockList",
                    "tag_name_list": [
                        "green_ttStreamBlock"
                    ]
                }
            ]
        },
        {
            "command_name": "GeneratorWaitForStopCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ],
            "property_value": {
                "WaitTimeout": 300
            }
        }
    ],
    "description": "Run and stop traffic",
    "enable": true
}

==== Set the test phase to CIR
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "UPDATE y1564Iter SET testphase='"
                },
                {
                    "dynamic": "CIR"
                }
            ]
        }
    ]
}

==== Calculate CIR verdict
{
    "sql_operations": [
        {
            "db_information": {
                "columns": [
                    "Verdict"
                ],
                "db_name": "SUMMARY",
                "table_name": "y1564Results"
            },
            "sql_statement": [
                {
                    "static": "UPDATE y1564Results SET Verdict = ( CASE WHEN ("
                },
                {
                    "static": "SELECT ROUND(rt.StepLoad * (1 - cf.FLR/100.0)-0.0005,3) <= rt.IrMean AND "
                },
                {
                    "static": "rt.Flr<=cf.FLR AND rt.FtdMax IS NOT null AND rt.FtdMax <= cf.FTD AND rt.FdvMax IS NOT null AND rt.FdvMax <= cf.FDV "
                },
                {
                    "static": "FROM y1564Results AS rt, y1564Config AS cf WHERE cf.rowid = rt.ServiceId AND rt.Test = 'CIR' AND rt.ServiceId = (SELECT curr FROM y1564Iter)"
                },
                {
                    "static": " AND CAST(rt.Step AS INTEGER) = (SELECT step FROM y1564Iter)"
                },
                {
                    "static": ") THEN 'PASS' ELSE 'FAIL' END ) WHERE Test = 'CIR' AND ServiceId = (SELECT curr FROM y1564Iter)"
                },
                {
                    "static": " AND Step = (SELECT step FROM y1564Iter)"
                }
            ]
        }
    ]
}

==== CIR Iteration Results
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "report": {
                "display_name": "CIR Test: IR Mean (Mbps)",
                "report_group": "GROUP_2",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "IR Mean outside of expected range. Expected (StepLoad * (1 - FlrThreshold/100.0)) <= IrMean",
                    "passed_verdict_explanation": "IR Mean within threshold",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT ROUND(rt.StepLoad * (1 - cf.FLR/100.0)-0.0005,3) <= rt.IrMean"
                        },
                        {
                            "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND CAST(rt.Step AS INTEGER)=it.step WHERE rt.Test = 'CIR'"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT ROUND(rt.StepLoad * (1 - cf.FLR/100.0)-0.0005,3) AS 'IR Min', rt.IrMean AS 'Actual IR'"
                },
                {
                    "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND CAST(rt.Step AS INTEGER)=it.step WHERE rt.Test = 'CIR'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "report": {
                "display_name": "CIR Test: FLR (ms)",
                "report_group": "GROUP_2",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "FLR exceeds threshold",
                    "passed_verdict_explanation": "FLR within threshold",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT rt.Flr <= cf.FLR"
                        },
                        {
                            "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND CAST(rt.Step AS INTEGER)=it.step WHERE rt.Test = 'CIR'"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT cf.FLR AS 'FLR Max', rt.Flr AS 'Actual FLR'"
                },
                {
                    "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND rt.Test=testphase AND (rt.Step=it.step OR testphase!='CIR') WHERE rt.Color='Green'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "report": {
                "display_name": "CIR Test: FTD (ms)",
                "report_group": "GROUP_2",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "FTD exceeds threshold",
                    "passed_verdict_explanation": "FTD within threshold",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT rt.FtdMax IS NOT null AND rt.FtdMax <= cf.FTD"
                        },
                        {
                            "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND CAST(rt.Step AS INTEGER)=it.step WHERE rt.Test = 'CIR'"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT cf.FTD AS 'FTD Max', rt.FtdMax AS 'Actual FTD'"
                },
                {
                    "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND CAST(rt.Step AS INTEGER)=it.step WHERE rt.Test = 'CIR'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "report": {
                "display_name": "CIR Test: FDV (ms)",
                "report_group": "GROUP_2",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "FDV exceeds threshold",
                    "passed_verdict_explanation": "FDV within threshold",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT rt.FdvMax IS NOT null AND rt.FdvMax <= cf.FDV"
                        },
                        {
                            "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND CAST(rt.Step AS INTEGER)=it.step WHERE rt.Test = 'CIR'"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT cf.FDV AS 'FDV Max', rt.FdvMax AS 'Actual FDV'"
                },
                {
                    "static": "FROM y1564Results AS rt JOIN y1564Config AS cf ON cf.rowid=rt.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr AND CAST(rt.Step AS INTEGER)=it.step WHERE rt.Test = 'CIR'"
                }
            ]
        }
    ]
}

==== Store CIR Rate Information (for use in CBS)
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "CREATE TABLE IF NOT EXISTS y1564Rates(Phase TEXT, FpsLoad FLOAT, AvgFrameSize INTEGER)"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "DELETE FROM y1564Rates"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "LAST_ITERATION",
                "dest_db": {
                    "dest_db_name": "SUMMARY",
                    "dest_table_name": "y1564Rates"
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT DISTINCT 'CIR' AS 'Phase',"
                },
                {
                    "static": "FpsLoad AS 'FpsLoad',"
                },
                {
                    "static": "ROUND(L2Rate / FpsLoad / 8) AS 'AvgFrameSize'"
                },
                {
                    "static": "FROM StreamBlock AS Sb"
                },
                {
                    "static": "JOIN RelationTable AS Rt ON SourceHnd=Sb.Handle"
                },
                {
                    "static": "JOIN Tag ON Rt.TargetHnd=Tag.Handle"
                },
                {
                    "static": "WHERE Tag.Name='green_ttStreamBlock'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "UPDATE y1564Rates SET FpsLoad=0 WHERE Phase='CIR' AND (SELECT CIR FROM y1564Config AS cf JOIN y1564Iter AS it ON cf.rowid=curr)=0"
                }
            ]
        }
    ]
}

==== EIR If Expression
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT EnableEir AND (SELECT EIR FROM y1564Config AS cf JOIN y1564Iter AS it ON it.curr=cf.rowid)!=0 FROM y1564Global"
        }
    ],
    "sql_operations": []
}

==== Start EIR Traffic
{
    "command_list": [
        {
            "command_name": "StreamBlockStartCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "StreamBlock"
                    ],
                    "property_name": "StreamBlockList",
                    "tag_name_list": [
                        "green_ttStreamBlock",
                        "yellow_ttStreamBlock"
                    ]
                }
            ]
        },
        {
            "command_name": "GeneratorWaitForStartCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ],
            "property_value": {
                "WaitTimeout": 300
            }
        }
    ],
    "description": "Run and stop traffic",
    "enable": true
}

==== Stop EIR Traffic
{
    "command_list": [
        {
            "command_name": "StreamBlockStopCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "StreamBlock"
                    ],
                    "property_name": "StreamBlockList",
                    "tag_name_list": [
                        "green_ttStreamBlock",
                        "yellow_ttStreamBlock"
                    ]
                }
            ]
        },
        {
            "command_name": "GeneratorWaitForStopCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ],
            "property_value": {
                "WaitTimeout": 300
            }
        }
    ],
    "description": "Run and stop traffic",
    "enable": true
}

==== Set the test phase to EIR
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "UPDATE y1564Iter SET testphase='"
                },
                {
                    "dynamic": "EIR"
                }
            ]
        }
    ]
}

==== Store EIR Rate Information (for use in EBS)
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "CREATE TABLE IF NOT EXISTS y1564Rates(Phase TEXT, FpsLoad FLOAT, AvgFrameSize INTEGER)"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "DELETE FROM y1564Rates WHERE Phase!='CIR'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "LAST_ITERATION",
                "dest_db": {
                    "dest_db_name": "SUMMARY",
                    "dest_table_name": "y1564Rates"
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT * FROM ("
                },
                {
                    "static": "SELECT 'EIR' AS 'Phase', FpsLoad"
                },
                {
                    "static": ", ROUND(L2Rate / FpsLoad / 8) AS 'AvgFrameSize'"
                },
                {
                    "static": "FROM StreamBlock AS Sb JOIN RelationTable AS Rt ON SourceHnd=Sb.Handle"
                },
                {
                    "static": "JOIN Tag ON Rt.TargetHnd=Tag.Handle WHERE Tag.Name='yellow_ttStreamBlock')"
                },
                {
                    "static": "WHERE (SELECT COUNT(*) FROM StreamBlock AS Sb JOIN RelationTable AS Rt ON SourceHnd=Sb.Handle"
                },
                {
                    "static": "JOIN Tag ON Rt.TargetHnd=Tag.Handle WHERE Tag.Name='yellow_ttStreamBlock')>0"
                },
                {
                    "static": "UNION SELECT * FROM (SELECT 'CIR+EIR' AS 'Phase', FpsLoad"
                },
                {
                    "static": ", ROUND(L2Rate / FpsLoad / 8) AS 'AvgFrameSize'"
                },
                {
                    "static": "FROM StreamBlock)"
                },
                {
                    "static": "WHERE (SELECT COUNT(*) FROM StreamBlock AS Sb JOIN RelationTable AS Rt On SourceHnd=Sb.Handle"
                },
                {
                    "static": "JOIN Tag ON Rt.TargetHnd=Tag.Handle WHERE Tag.Name='yellow_ttStreamBlock')=0"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "INSERT INTO y1564Rates SELECT * FROM"
                },
                {
                    "static": "(SELECT 'EIR' AS 'Phase', (SELECT FpsLoad FROM y1564Rates WHERE Phase='CIR+EIR') - (SELECT FpsLoad FROM y1564Rates WHERE Phase='CIR') AS 'FpsLoad', (SELECT AvgFrameSize FROM y1564Rates WHERE Phase='CIR') AS 'AvgFrameSize')"
                },
                {
                    "static": "WHERE (SELECT COUNT(*) FROM y1564Rates WHERE Phase='EIR')=0"
                },
                {
                    "static": "UNION SELECT * FROM"
                },
                {
                    "static": "(SELECT 'CIR+EIR' AS 'Phase', (SELECT FpsLoad FROM y1564Rates WHERE Phase='CIR') + (SELECT FpsLoad FROM y1564Rates WHERE Phase='EIR') AS 'FpsLoad', (SELECT AvgFrameSize FROM y1564Rates WHERE Phase='CIR') AS 'AvgFrameSize')"
                },
                {
                    "static": "WHERE (SELECT COUNT(*) FROM y1564Rates WHERE Phase='CIR+EIR')=0"
                }
            ]
        }
    ]
}

==== Policing If expression
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT EnablePolicing AND (SELECT CIR+EIR FROM y1564Config AS cf JOIN y1564Iter AS it ON it.curr=cf.rowid)!=0 FROM y1564Global"
        }
    ],
    "sql_operations": []
}

==== Start Policing Traffic
{
    "command_list": [
        {
            "command_name": "StreamBlockStartCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "StreamBlock"
                    ],
                    "property_name": "StreamBlockList",
                    "tag_name_list": [
                        "green_ttStreamBlock",
                        "yellow_ttStreamBlock"
                    ]
                }
            ]
        },
        {
            "command_name": "GeneratorWaitForStartCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ],
            "property_value": {
                "WaitTimeout": 300
            }
        }
    ],
    "description": "Run and stop traffic",
    "enable": true
}

==== Stop Policing Traffic
{
    "command_list": [
        {
            "command_name": "StreamBlockStopCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "StreamBlock"
                    ],
                    "property_name": "StreamBlockList",
                    "tag_name_list": [
                        "green_ttStreamBlock",
                        "yellow_ttStreamBlock"
                    ]
                }
            ]
        },
        {
            "command_name": "GeneratorWaitForStopCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ],
            "property_value": {
                "WaitTimeout": 300
            }
        }
    ],
    "description": "Run and stop traffic",
    "enable": true
}

==== Set the test phase to Policing
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "UPDATE y1564Iter SET testphase='"
                },
                {
                    "dynamic": "Policing"
                }
            ]
        }
    ]
}

==== CBS If Expression
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT EnableCbs AND (SELECT CBS FROM y1564Config AS cf JOIN y1564Iter AS it ON it.curr=cf.rowid)!=0 FROM y1564Global"
        }
    ],
    "sql_operations": []
}

==== Set CBS parameters
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.CreateTemplateConfigCommand",
                    "property_name": "TargetTagList",
                    "tag_list": [
                        "cbs_schedule"
                    ]
                },
                {
                    "class_name": "spirent.methodology.SetPropertyCommand",
                    "property_name": "TagList",
                    "tag_list": [
                        "cbs_setGenMode"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT SourcePortTag || 'GenCfg' FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.CreateTemplateConfigCommand",
                    "json_key": "modifyList[0].operationList[0].addObject.propertyValueList.InterFrameGap",
                    "property_name": "InputJson",
                    "tag_list": [
                        "cbs_schedule"
                    ]
                },
                {
                    "class_name": "spirent.methodology.CreateTemplateConfigCommand",
                    "json_key": "modifyList[0].operationList[0].addObject.propertyValueList.InterBurstGap",
                    "property_name": "InputJson",
                    "tag_list": [
                        "cbs_schedule"
                    ]
                },
                {
                    "class_name": "spirent.methodology.CreateTemplateConfigCommand",
                    "json_key": "modifyList[0].operationList[0].addObject.propertyValueList.InterEntryGap",
                    "property_name": "InputJson",
                    "tag_list": [
                        "cbs_schedule"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT FpsLoad FROM y1564Rates WHERE Phase='CIR'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.CreateTemplateConfigCommand",
                    "json_key": "modifyList[0].operationList[0].addObject.propertyValueList.BurstSize",
                    "property_name": "InputJson",
                    "tag_list": [
                        "cbs_schedule"
                    ]
                },
                {
                    "class_name": "spirent.methodology.CreateTemplateConfigCommand",
                    "json_key": "modifyList[1].operationList[0].addObject.propertyValueList.BurstSize",
                    "property_name": "InputJson",
                    "tag_list": [
                        "cbs_schedule"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CAST(CBS/AvgFrameSize AS INTEGER) + CASE WHEN CBS%AvgFrameSize>0 THEN 1 ELSE 0 END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr, y1564Rates WHERE Phase='CIR'"
                }
            ]
        }
    ]
}

==== Set up CBS manual schedule
{
    "baseTemplateFile": "manual-sched-tmpl.xml",
    "modifyList": [
        {
            "description": "Manual Schedule",
            "enable": true,
            "operationList": [
                {
                    "addObject": {
                        "className": "ManualScheduleEntry",
                        "parentTagName": "ttManualSchedule",
                        "propertyValueList": {
                            "BurstCount": "1",
                            "BurstSize": "1",
                            "InterBurstGap": "1000",
                            "InterBurstGapUnit": "FRAMES_PER_SECOND",
                            "InterEntryGap": "1000",
                            "InterEntryGapUnit": "FRAMES_PER_SECOND",
                            "InterFrameGap": "1000",
                            "InterFrameGapUnit": "FRAMES_PER_SECOND",
                            "LoopCount": "9"
                        },
                        "tagName": "ttNormalSchedule"
                    }
                },
                {
                    "addObject": {
                        "className": "ManualScheduleEntry",
                        "parentTagName": "ttManualSchedule",
                        "propertyValueList": {
                            "BurstCount": "1",
                            "BurstSize": "1",
                            "InterBurstGap": "12",
                            "InterBurstGapUnit": "BYTES",
                            "InterEntryGap": "12",
                            "InterEntryGapUnit": "BYTES",
                            "InterFrameGap": "12",
                            "InterFrameGapUnit": "BYTES",
                            "LoopCount": "1"
                        },
                        "tagName": "ttBurstSchedule"
                    }
                },
                {
                    "relation": {
                        "relationType": "LoopBackToEntry",
                        "sourceTag": "ttNormalSchedule",
                        "targetTag": "ttNormalSchedule"
                    }
                }
            ]
        }
    ]
}
json keys:
modifyList[0].operationList[0].addObject.propertyValueList.InterFrameGap
modifyList[0].operationList[0].addObject.propertyValueList.InterBurstGap
modifyList[0].operationList[0].addObject.propertyValueList.InterEntryGap
modifyList[0].operationList[0].addObject.propertyValueList.BurstSize
modifyList[0].operationList[1].addObject.propertyValueList.BurstSize

==== Add streamblock to schedule
SrcTagNames=ttNormalSchedule ttBurstSchedule
TargetTagNames=green_ttStreamBlock
AffiliationManualScheduleEntryStreamBlock

==== Start CBS Traffic (the waits should match, but we need to start per port)
{
    "command_list": [
        {
            "command_name": "GeneratorStartCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ]
        },
        {
            "command_name": "GeneratorWaitForStartCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ],
            "property_value": {
                "WaitTimeout": 300
            }
        }
    ],
    "description": "Run and stop traffic",
    "enable": true
}

==== Stop CBS Traffic (the waits should match, but we need to start per port)
{
    "command_list": [
        {
            "command_name": "GeneratorStopCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ]
        },
        {
            "command_name": "GeneratorWaitForStopCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ],
            "property_value": {
                "WaitTimeout": 300
            }
        }
    ],
    "description": "Run and stop traffic",
    "enable": true
}

==== Set the test phase to CBS
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "UPDATE y1564Iter SET testphase='"
                },
                {
                    "dynamic": "CBS"
                }
            ]
        }
    ]
}

==== EBS If expression
{
    "sql_for_command_verdict": [
        {
            "static": "SELECT EnableEbs AND (SELECT EBS FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr)!=0 FROM y1564Global"
        }
    ],
    "sql_operations": []
}

==== Set EBS parameters
/// FIXME: This needs fixing up for color-aware bursts
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.CreateTemplateConfigCommand",
                    "property_name": "TargetTagList",
                    "tag_list": [
                        "ebs_schedule_color",
                        "ebs_schedule"
                    ]
                },
                {
                    "class_name": "spirent.methodology.SetPropertyCommand",
                    "property_name": "TagList",
                    "tag_list": [
                        "ebs_setGenMode"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT SourcePortTag || 'GenCfg' FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.CreateTemplateConfigCommand",
                    "json_key": "modifyList[0].operationList[0].addObject.propertyValueList.InterFrameGap",
                    "property_name": "InputJson",
                    "tag_list": [
                        "ebs_schedule"
                    ]
                },
                {
                    "class_name": "spirent.methodology.CreateTemplateConfigCommand",
                    "json_key": "modifyList[0].operationList[0].addObject.propertyValueList.InterBurstGap",
                    "property_name": "InputJson",
                    "tag_list": [
                        "ebs_schedule"
                    ]
                },
                {
                    "class_name": "spirent.methodology.CreateTemplateConfigCommand",
                    "json_key": "modifyList[0].operationList[0].addObject.propertyValueList.InterEntryGap",
                    "property_name": "InputJson",
                    "tag_list": [
                        "ebs_schedule"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT FpsLoad FROM y1564Rates WHERE Phase='CIR+EIR'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.CreateTemplateConfigCommand",
                    "json_key": "modifyList[0].operationList[0].addObject.propertyValueList.BurstSize",
                    "property_name": "InputJson",
                    "tag_list": [
                        "ebs_schedule"
                    ]
                },
                {
                    "class_name": "spirent.methodology.CreateTemplateConfigCommand",
                    "json_key": "modifyList[0].operationList[1].addObject.propertyValueList.BurstSize",
                    "property_name": "InputJson",
                    "tag_list": [
                        "ebs_schedule"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CAST((CBS+EBS)/AvgFrameSize AS INTEGER) + CASE WHEN (CBS+EBS)%AvgFrameSize>0 THEN 1 ELSE 0 END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr, y1564Rates WHERE Phase='CIR'"
                }
            ]
        }
    ]
}

==== Populate Custom Script's arguments
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.RunPyScriptCommand",
                    "conversion": "DICT",
                    "json_key": "values",
                    "property_name": "Params",
                    "tag_list": [
                        "ConfigEbsColorSchedule"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CBS, EBS, (SELECT AvgFrameSize FROM y1564Rates WHERE Phase='CIR') AS FrameSize, (SELECT FpsLoad FROM y1564Rates WHERE Phase='CIR') AS CirFpsLoad, (SELECT FpsLoad FROM y1564Rates WHERE Phase='EIR') AS EirFpsLoad FROM y1564Config AS cf JOIN y1564Iter as it ON cf.rowid=curr"
                }
            ]
        }
    ]
}

==== Custom Script to make EBS Color aware manual schedule (the whole thing)
{
    "enable": true,
    "values": [
        {
            "CBS": 30000,
            "CirFpsLoad": 1220.703125,
            "EBS": 10000,
            "EirFpsLoad": 488.28125,
            "FrameSize": 512
        }
    ]
}

==== Set up EBS Color Aware manual schedule
{
    "baseTemplateFile": "manual-sched-tmpl.xml",
    "modifyList": [
        {
            "description": "Manual Schedule",
            "enable": true,
            "operationList": [
                {
                    "addObject": {
                        "className": "ManualScheduleEntry",
                        "parentTagName": "ttManualSchedule",
                        "propertyValueList": {
                            "BurstCount": "1",
                            "BurstSize": "1",
                            "InterBurstGap": "1000",
                            "InterBurstGapUnit": "FRAMES_PER_SECOND",
                            "InterEntryGap": "1000",
                            "InterEntryGapUnit": "FRAMES_PER_SECOND",
                            "InterFrameGap": "1000",
                            "InterFrameGapUnit": "FRAMES_PER_SECOND",
                            "LoopCount": "0"
                        },
                        "tagName": "ttNormalScheduleGreen"
                    }
                },
                {
                    "addObject": {
                        "className": "ManualScheduleEntry",
                        "parentTagName": "ttManualSchedule",
                        "propertyValueList": {
                            "BurstCount": "1",
                            "BurstSize": "1",
                            "InterBurstGap": "1000",
                            "InterBurstGapUnit": "FRAMES_PER_SECOND",
                            "InterEntryGap": "1000",
                            "InterEntryGapUnit": "FRAMES_PER_SECOND",
                            "InterFrameGap": "1000",
                            "InterFrameGapUnit": "FRAMES_PER_SECOND",
                            "LoopCount": "9"
                        },
                        "tagName": "ttNormalScheduleYellow"
                    }
                },
                {
                    "addObject": {
                        "className": "ManualScheduleEntry",
                        "parentTagName": "ttManualSchedule",
                        "propertyValueList": {
                            "BurstCount": "1",
                            "BurstSize": "1",
                            "InterBurstGap": "12",
                            "InterBurstGapUnit": "BYTES",
                            "InterEntryGap": "12",
                            "InterEntryGapUnit": "BYTES",
                            "InterFrameGap": "12",
                            "InterFrameGapUnit": "BYTES",
                            "LoopCount": "1"
                        },
                        "tagName": "ttBurstScheduleGreen"
                    }
                },
                {
                    "addObject": {
                        "className": "ManualScheduleEntry",
                        "parentTagName": "ttManualSchedule",
                        "propertyValueList": {
                            "BurstCount": "1",
                            "BurstSize": "1",
                            "InterBurstGap": "12",
                            "InterBurstGapUnit": "BYTES",
                            "InterEntryGap": "12",
                            "InterEntryGapUnit": "BYTES",
                            "InterFrameGap": "12",
                            "InterFrameGapUnit": "BYTES",
                            "LoopCount": "1"
                        },
                        "tagName": "ttBurstScheduleYellow"
                    }
                },
                {
                    "relation": {
                        "relationType": "LoopBackToEntry",
                        "sourceTag": "ttNormalScheduleYellow",
                        "targetTag": "ttNormalScheduleGreen"
                    }
                }
            ]
        }
    ]
}
tag: ebs_schedule_color

==== Set up EBS Non-Color Aware manual schedule
{
    "baseTemplateFile": "manual-sched-tmpl.xml",
    "modifyList": [
        {
            "description": "Manual Schedule",
            "enable": true,
            "operationList": [
                {
                    "addObject": {
                        "className": "ManualScheduleEntry",
                        "parentTagName": "ttManualSchedule",
                        "propertyValueList": {
                            "BurstCount": "1",
                            "BurstSize": "1",
                            "InterBurstGap": "1000",
                            "InterBurstGapUnit": "FRAMES_PER_SECOND",
                            "InterEntryGap": "1000",
                            "InterEntryGapUnit": "FRAMES_PER_SECOND",
                            "InterFrameGap": "1000",
                            "InterFrameGapUnit": "FRAMES_PER_SECOND",
                            "LoopCount": "9"
                        },
                        "tagName": "ttNormalSchedule"
                    }
                },
                {
                    "addObject": {
                        "className": "ManualScheduleEntry",
                        "parentTagName": "ttManualSchedule",
                        "propertyValueList": {
                            "BurstCount": "1",
                            "BurstSize": "1",
                            "InterBurstGap": "12",
                            "InterBurstGapUnit": "BYTES",
                            "InterEntryGap": "12",
                            "InterEntryGapUnit": "BYTES",
                            "InterFrameGap": "12",
                            "InterFrameGapUnit": "BYTES",
                            "LoopCount": "1"
                        },
                        "tagName": "ttBurstSchedule"
                    }
                },
                {
                    "relation": {
                        "relationType": "LoopBackToEntry",
                        "sourceTag": "ttNormalSchedule",
                        "targetTag": "ttNormalSchedule"
                    }
                }
            ]
        }
    ]
}
tag: ebs_schedule
json keys:
modifyList[0].operationList[0].addObject.propertyValueList.InterFrameGap
modifyList[0].operationList[0].addObject.propertyValueList.InterBurstGap
modifyList[0].operationList[0].addObject.propertyValueList.InterEntryGap
modifyList[0].operationList[0].addObject.propertyValueList.BurstSize
modifyList[0].operationList[1].addObject.propertyValueList.BurstSize

==== Add streamblock to schedule
(color aware, one each for green and yellow)
SrcTagNames=ttNormalScheduleGreen ttBurstScheduleGreen
TargetTagNames=green_ttStreamBlock
AffiliationManualScheduleEntryStreamBlock

SrcTagNames=ttNormalScheduleYellow ttBurstScheduleYellow
TargetTagNames=yellow_ttStreamBlock
AffiliationManualScheduleEntryStreamBlock

(non-color aware)
SrcTagNames=ttNormalSchedule ttBurstSchedule
TargetTagNames=green_ttStreamBlock
AffiliationManualScheduleEntryStreamBlock

==== Start EBS Traffic (the waits should match, but we need to start per port)
{
    "command_list": [
        {
            "command_name": "GeneratorStartCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ]
        },
        {
            "command_name": "GeneratorWaitForStartCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ],
            "property_value": {
                "WaitTimeout": 300
            }
        }
    ],
    "description": "Run and stop traffic",
    "enable": true
}

==== Stop EBS Traffic (the waits should match, but we need to start per port)
{
    "command_list": [
        {
            "command_name": "GeneratorStopCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ]
        },
        {
            "command_name": "GeneratorWaitForStopCommand",
            "enable": true,
            "handle_property_list": [
                {
                    "class_name_list": [
                        "Generator"
                    ],
                    "property_name": "GeneratorList",
                    "tag_name_list": [
                        "West"
                    ]
                }
            ],
            "property_value": {
                "WaitTimeout": 300
            }
        }
    ],
    "description": "Run and stop traffic",
    "enable": true
}

==== Set the test phase to EBS
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "UPDATE y1564Iter SET testphase='"
                },
                {
                    "dynamic": "EBS"
                }
            ]
        }
    ]
}

==== Service Summary Table
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "report": {
                "display_name": "Y.1564 Service Configuration Test Summary Table",
                "explanation": "Table of Measured Metrics for each service",
                "report_group": "GROUP_1",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "Failing tests cases encountered",
                    "passed_verdict_explanation": "All test cases passed",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT CASE WHEN (SELECT COUNT(*) FROM y1564Results AS res JOIN y1564Iter ON res.ServiceId=curr WHERE NOT ((TxOK IS null OR TxOK) AND (RateOk IS null OR RateOk) AND (FlrOk IS null OR FlrOk) AND (FtdOk IS null OR FtdOk) AND (FdvOk IS null OR FdvOk)))>0 THEN 0 ELSE 1 END"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT cf.ServiceName AS 'Service Name', Test AS 'Test',"
                },
                {
                    "static": "CASE WHEN Test='CIR' THEN res.Step ELSE 'NA' END AS 'Step',"
                },
                {
                    "static": "CASE WHEN (cf.ColorAware AND Test NOT IN ('CIR', 'CBS')) THEN res.Color ELSE 'NA' END AS 'Color',"
                },
                {
                    "static": "CASE WHEN ((TxOk IS null OR TxOk) AND (RateOk IS null OR RateOk) AND (FlrOk IS null OR FlrOk) AND (FtdOk IS null OR FtdOk) AND (FdvOk IS null OR FdvOk)) THEN CASE WHEN COALESCE(RateOk,FlrOk,FtdOk,FdvOk) IS NOT NULL THEN 'PASS' ELSE 'NA' END ELSE 'FAIL' END AS 'PASS/FAIL',"
                },
                {
                    "static": "CASE res.Test WHEN 'CIR' THEN CirDuration WHEN 'EIR' THEN EirDuration WHEN 'Policing' THEN PolicingDuration WHEN 'CBS' THEN CbsDuration WHEN 'EBS' THEN EbsDuration END AS 'Duration',"
                },
                {
                    "static": "res.IrMean AS 'IR Mean (Mbit/s)', res.FlCount AS 'FL Count', ROUND(res.Flr, 3) AS 'FLR (%)',"
                },
                {
                    "static": "ROUND(res.FtdMin, 5) AS 'FTD Min (ms)',"
                },
                {
                    "static": "ROUND(res.FtdMean, 5) AS 'FTD Mean (ms)',"
                },
                {
                    "static": "ROUND(res.FtdMax, 5) AS 'FTD Max (ms)',"
                },
                {
                    "static": "ROUND(res.FdvMin, 5) AS 'FDV Min (ms)',"
                },
                {
                    "static": "ROUND(res.FdvMean, 5) AS 'FDV Mean (ms)',"
                },
                {
                    "static": "ROUND(res.FdvMax, 5) AS 'FDV Max (ms)'"
                },
                {
                    "static": "FROM y1564Results AS res JOIN y1564Config AS cf ON res.ServiceId=cf.rowid JOIN y1564Iter AS it ON cf.rowid=curr, y1564Global ORDER BY res.ServiceId, res.rowid"
                }
            ]
        }
    ]
}

==== Update y1564 Chart Table
Expression to support color-aware and non color-aware
SELECT res.ServiceId, res.Test, res.Step, EirDuration + (SELECT MAX(chart.Time) FROM y1564Chart AS chart JOIN y1564Iter AS it ON chart.ServiceId = curr, y1564Global) AS Time, res.IrMean
FROM y1564Config AS cf JOIN y1564Results AS res ON cf.rowid=res.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr WHERE res.Test = 'EIR' AND res.Color = 
CASE WHEN (SELECT COUNT(*) FROM y1564Config AS cf JOIN y1564Results AS res ON cf.rowid=res.ServiceId JOIN y1564Iter AS it ON cf.rowid=curr WHERE res.Test = 'EIR' AND res.Color='Yellow')>0 THEN 'Total' ELSE 'Green' END
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY",
                "dest_db": {
                    "dest_db_name": "SUMMARY",
                    "dest_table_name": "y1564Chart"
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT res.ServiceId, res.Test, res.Step, res.Step * CirDuration AS Time, res.IrMean FROM y1564Config AS cf JOIN y1564Results AS res ON cf.rowid=res.ServiceId JOIN y1564Iter AS it ON cf.rowid = it.curr, y1564Global WHERE res.Test = 'CIR'"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY",
                "dest_db": {
                    "dest_db_name": "SUMMARY",
                    "dest_table_name": "y1564Chart"
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT res.ServiceId, res.Test, res.Step,"
                },
                {
                    "static": "EirDuration + (SELECT MAX(chart.Time) FROM y1564Chart AS chart JOIN y1564Iter AS it ON chart.ServiceId = it.curr) AS Time,"
                },
                {
                    "static": "res.IrMean FROM y1564Config AS cf JOIN y1564Results AS res ON cf.rowid=res.ServiceId JOIN y1564Iter AS it ON cf.rowid=it.curr, y1564Global"
                },
                {
                    "static": "WHERE res.Test = 'EIR'"
                },
                {
                    "static": "AND res.Color = CASE WHEN (SELECT COUNT(*) FROM y1564Config AS cf JOIN y1564Results AS res ON cf.rowid=res.ServiceId JOIN y1564Iter AS it on cf.rowid=curr WHERE res.Test='EIR' AND res.Color='Yellow')>0 THEN 'Total' ELSE 'Green' END"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY",
                "dest_db": {
                    "dest_db_name": "SUMMARY",
                    "dest_table_name": "y1564Chart"
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT res.ServiceId, res.Test, res.Step,"
                },
                {
                    "static": "EirDuration + (SELECT MAX(chart.Time) FROM y1564Chart AS chart JOIN y1564Iter AS it ON chart.ServiceId = it.curr) AS Time,"
                },
                {
                    "static": "res.IrMean FROM y1564Config AS cf JOIN y1564Results AS res ON cf.rowid=res.ServiceId JOIN y1564Iter AS it ON cf.rowid=it.curr, y1564Global"
                },
                {
                    "static": "WHERE res.Test = 'Policing'"
                },
                {
                    "static": "AND res.Color = CASE WHEN (SELECT COUNT(*) FROM y1564Config AS cf JOIN y1564Results AS res ON cf.rowid=res.ServiceId JOIN y1564Iter AS it on cf.rowid=curr, y1564Global WHERE res.Test='Policing' AND res.Color='Yellow')>0 THEN 'Total' ELSE 'Green' END"
                }
            ]
        }
    ]
}

==== Add lines to chart
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.CreateMethodologyChartCommand",
                    "conversion": "NORMAL",
                    "property_name": "Title",
                    "tag_list": [
                        "BandwidthChart"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT 'Bandwidth Profile (' || ServiceName || ')' FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.CreateMethodologyChartCommand",
                    "conversion": "NORMAL",
                    "json_key": "yAxis.plotLines[0].value",
                    "property_name": "TemplateModifier",
                    "tag_list": [
                        "BandwidthChart"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CIR FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.CreateMethodologyChartCommand",
                    "conversion": "NORMAL",
                    "json_key": "yAxis.plotLines[1].value",
                    "property_name": "TemplateModifier",
                    "tag_list": [
                        "BandwidthChart"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CIR + EIR FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.CreateMethodologyChartCommand",
                    "conversion": "NORMAL",
                    "json_key": "yAxis.plotLines[1].width",
                    "property_name": "TemplateModifier",
                    "tag_list": [
                        "BandwidthChart"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT CASE WHEN EIR=0 THEN 0 ELSE 2 END FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr"
                }
            ]
        }
    ]
}

==== Chart Title
Bandwidth Profile
SELECT 'Bandwidth Profile (' || ServiceName || ')' FROM y1564Config AS cf JOIN y1564Iter ON cf.rowid=curr 

==== Chart Template Modifier
{
    "legend": {
        "enabled": false
    },
    "plotOptions": {
        "area": {
            "marker": {
                "enabled": false
            }
        },
        "series": {
            "fillOpacity": 1
        }
    },
    "series": [
        {
            "color": "#FF0000",
            "name": "TrafficPolicing",
            "step": "right",
            "type": "area"
        },
        {
            "color": "#FFFF00",
            "name": "EIR+CIR",
            "step": "right",
            "type": "area"
        },
        {
            "color": "#008000",
            "name": "CIR",
            "step": "right",
            "type": "area"
        }
    ],
    "yAxis": {
        "plotLines": [
            {
                "color": "black",
                "dashStyle": "shortdash",
                "label": {
                    "text": "CIR"
                },
                "value": 2.5,
                "width": 2,
                "zIndex": 5
            },
            {
                "color": "black",
                "dashStyle": "shortdash",
                "label": {
                    "text": "CIR + EIR"
                },
                "value": 7.5,
                "width": 2,
                "zIndex": 5
            }
        ]
    }
}

==== Enable Result Columns
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[2].sql_statement[6].dynamic.enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "configTables"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT SUM(CVlanEnable) > 0 FROM y1564Config"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "enable": true,
            "set_property": [
                {
                    "class_name": "spirent.methodology.RunSqlCommand",
                    "json_key": "sql_operations[2].sql_statement[7].dynamic.enable",
                    "property_name": "DbJsonString",
                    "tag_list": [
                        "configTables"
                    ]
                }
            ],
            "sql_statement": [
                {
                    "static": "SELECT SUM(SVlanEnable) > 0 FROM y1564Config"
                }
            ]
        }
    ]
}

==== Create Configuration Tables
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "report": {
                "display_name": "Global Test Parameters",
                "explanation": "Table of Parameters common to all services",
                "report_group": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "SELECT CASE WHEN EnableCir THEN 'Enabled' ELSE 'Disabled' END AS 'CIR Test',"
                },
                {
                    "static": "CASE WHEN EnableEir THEN 'Enabled' ELSE 'Disabled' END AS 'EIR Test',"
                },
                {
                    "static": "CASE WHEN EnablePolicing THEN 'Enabled' ELSE 'Disabled' END AS 'Policing Test',"
                },
                {
                    "static": "CASE WHEN EnableCbs THEN 'Enabled' ELSE 'Disabled' END AS 'CBS Test',"
                },
                {
                    "static": "CASE WHEN EnableEbs THEN 'Enabled' ELSE 'Disabled' END AS 'EBS Test', "
                },
                {
                    "static": "CirSteps AS 'Steps per CIR test'"
                },
                {
                    "static": "FROM y1564Global"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "report": {
                "display_name": "Test Duration Parameters",
                "explanation": "Table of Duration Parameters common to all services",
                "report_group": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "SELECT CirDuration AS 'CIR Test Duration',"
                },
                {
                    "static": "EirDuration AS 'EIR Test Duration',"
                },
                {
                    "static": "PolicingDuration AS 'Policing Test Duration',"
                },
                {
                    "static": "CbsDuration AS 'CBS Test Duration',"
                },
                {
                    "static": "EbsDuration AS 'EBS Test Duration'"
                },
                {
                    "static": "FROM y1564Global"
                }
            ]
        },
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "report": {
                "display_name": "Test Service Parameters",
                "explanation": "Table of Service Parameters",
                "report_group": "SUMMARY"
            },
            "sql_statement": [
                {
                    "static": "SELECT ServiceName AS 'Service Name',"
                },
                {
                    "static": "CASE SourcePortTag WHEN 'West' THEN 'West to East' ELSE 'East to West' END AS 'Traffic Direction',"
                },
                {
                    "static": "REPLACE(REPLACE(REPLACE(FrameSizeList, '\"', ''), '[', ''), ']', '') AS 'Frame Size List',"
                },
                {
                    "static": "CIR, CBS, EIR, EBS, FLR, FTD, FDV,"
                },
                {
                    "static": "DstMac AS 'Destination MAC Address',"
                },
                {
                    "static": "SrcMac AS 'Source MAC Address',"
                },
                {
                    "dynamic": {
                        "enable": false,
                        "value": [
                            {
                                "static": "CASE WHEN CVlanEnable THEN CVlanId ELSE 'NA' END AS 'C-VLAN ID',"
                            },
                            {
                                "static": "CASE WHEN CVlanEnable THEN CASE CVlanPri WHEN '000' THEN 0 WHEN '001' THEN 1 WHEN '010' THEN 2 WHEN '011' THEN 3 WHEN '100' THEN 4 WHEN '101' THEN 5 WHEN '110' THEN 6 WHEN '111' THEN 7 END ELSE 'NA' END AS 'C-VLAN Priority',"
                            }
                        ]
                    }
                },
                {
                    "dynamic": {
                        "enable": false,
                        "value": [
                            {
                                "static": "CASE WHEN SVlanEnable THEN SVlanId ELSE 'NA' END AS 'S-VLAN ID',"
                            },
                            {
                                "static": "CASE WHEN SVlanEnable THEN CASE SVlanPri WHEN '000' THEN 0 WHEN '001' THEN 1 WHEN '010' THEN 2 WHEN '011' THEN 3 WHEN '100' THEN 4 WHEN '101' THEN 5 WHEN '110' THEN 6 WHEN '111' THEN 7 END ELSE 'NA' END AS 'S-VLAN Priority',"
                            }
                        ]
                    }
                },
                {
                    "static": "DstIpv4 AS 'Destination IPv4 Address',"
                },
                {
                    "static": "SrcIpv4 AS 'Source IPv4 Address',"
                },
                {
                    "static": "CASE WHEN ColorAware THEN 'Enabled' ELSE 'Disabled' END AS 'Color Awareness'"
                },
                {
                    "static": "FROM y1564Config"
                }
            ]
        }
    ]
}
json keys:
sql_operations[2].sql_statement[6].dynamic.enable Cvlan
sql_operations[2].sql_statement[7].dynamic.enable Svlan

==== Summary Chart Template modifier
Queries: (First one has to put a value for cases where EIR is zero)
SELECT IrMean FROM (SELECT DISTINCT ServiceId, null AS IrMean FROM
y1564Results JOIN y1564Config AS cf ON ServiceId=cf.rowid WHERE EIR=0 UNION SELECT ServiceId, SUM(IrMean) FROM y1564Results WHERE Test='EIR' AND Color != 'Total' ORDER BY ServiceId)
SELECT IrMean FROM (SELECT IrMean as IrMean, MAX(Step) FROM y1564Results WHERE Test = 'CIR' GROUP BY ServiceId)
SELECT EIR + CIR FROM y1564Config ORDER BY rowid
SELECT CIR FROM y1564Config ORDER BY rowid
{
    "series": [
        {
            "color": "#eeee00",
            "grouping": false,
            "name": "CIR/EIR Test Measured Mean IR",
            "pointWidth": 14,
            "tooltip": {
                "headerFormat": "<b>{point.key}</b><br/>",
                "pointFormat": "{series.name}: {point.y} {point.key} Mbps"
            },
            "type": "column"
        },
        {
            "color": "#00ff00",
            "grouping": false,
            "name": "CIR Test Measured Mean IR",
            "pointWidth": 14,
            "tooltip": {
                "headerFormat": "<b>{point.key}</b><br/>",
                "pointFormat": "{series.name}: {point.y} {point.key} Mbps"
            },
            "type": "column"
        },
        {
            "color": "#888800",
            "grouping": false,
            "name": "EIR",
            "pointPlacement": 0,
            "pointWidth": 14,
            "tooltip": {
                "headerFormat": "<b>{point.key}</b><br/>",
                "pointFormat": "{series.name}: {point.y} {point.key} Mbps"
            },
            "type": "scatter"
        },
        {
            "color": "#008800",
            "grouping": false,
            "name": "CIR",
            "pointPlacement": 0,
            "pointWidth": 14,
            "tooltip": {
                "headerFormat": "<b>{point.key}</b><br/>",
                "pointFormat": " {series.name}: {point.y} {point.key} additional Mbps"
            },
            "type": "scatter"
        }
    ]
}

==== Summary Verdict for overall test
{
    "sql_operations": [
        {
            "db_information": {
                "db_name": "SUMMARY"
            },
            "report": {
                "display_name": "Y.1564 Service Configuration Test Summary Table",
                "explanation": "Table of Measured Metrics for each service",
                "report_group": "SUMMARY",
                "report_verdict": {
                    "apply_test_verdict": true,
                    "failed_verdict_explanation": "Failing tests cases encountered",
                    "passed_verdict_explanation": "All test cases passed",
                    "sql_for_verdict": [
                        {
                            "static": "SELECT CASE WHEN (SELECT COUNT(*) FROM y1564Results WHERE NOT ((TxOK IS null OR TxOK) AND (RateOk IS null OR RateOk) AND (FlrOk IS null OR FlrOk) AND (FtdOk IS null OR FtdOk) AND (FdvOk IS null OR FdvOk)))>0 THEN 0 ELSE 1 END"
                        }
                    ]
                }
            },
            "sql_statement": [
                {
                    "static": "SELECT cf.ServiceName AS 'Service Name', Test AS 'Test',"
                },
                {
                    "static": "CASE WHEN Test='CIR' THEN res.Step ELSE 'NA' END AS 'Step',"
                },
                {
                    "static": "CASE WHEN (cf.ColorAware AND Test NOT IN ('CIR', 'CBS')) THEN res.Color ELSE 'NA' END AS 'Color',"
                },
                {
                    "static": "CASE WHEN ((TxOK IS null OR TxOK) AND (RateOk IS null OR RateOk) AND (FlrOk IS null OR FlrOk) AND (FtdOk IS null OR FtdOk) AND (FdvOk IS null OR FdvOk)) THEN CASE WHEN COALESCE(RateOk,FlrOk,FtdOk,FdvOk) IS NOT NULL THEN 'PASS' ELSE 'NA' END ELSE 'FAIL' END AS 'PASS/FAIL',"
                },
                {
                    "static": "CASE res.Test WHEN 'CIR' THEN CirDuration WHEN 'EIR' THEN EirDuration WHEN 'Policing' THEN PolicingDuration WHEN 'CBS' THEN CbsDuration WHEN 'EBS' THEN EbsDuration END AS 'Duration',"
                },
                {
                    "static": "res.IrMean AS 'IR Mean (Mbit/s)', res.FlCount AS 'FL Count', ROUND(res.Flr, 3) AS 'FLR (%)',"
                },
                {
                    "static": "ROUND(res.FtdMin, 5) AS 'FTD Min (ms)',"
                },
                {
                    "static": "ROUND(res.FtdMean, 5) AS 'FTD Mean (ms)',"
                },
                {
                    "static": "ROUND(res.FtdMax, 5) AS 'FTD Max (ms)',"
                },
                {
                    "static": "ROUND(res.FdvMin, 5) AS 'FDV Min (ms)',"
                },
                {
                    "static": "ROUND(res.FdvMean, 5) AS 'FDV Mean (ms)',"
                },
                {
                    "static": "ROUND(res.FdvMax, 5) AS 'FDV Max (ms)'"
                },
                {
                    "static": "FROM y1564Results AS res JOIN y1564Config AS cf ON res.ServiceId=cf.rowid, y1564Global WHERE NOT ((TxOK IS null OR TxOK) AND (RateOk IS null OR RateOk) AND (FlrOk IS null OR FlrOk) AND (FtdOk IS null OR FtdOk) AND (FdvOk IS null OR FdvOk)) ORDER BY res.ServiceId, res.rowid"
                }
            ]
        }
    ]
}

<?xml version="1.0" ?>
<stc:meta xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:stc="urn:www.spirentcom.com:XMLSchema.xsd"
          plugin="plcommands" package="spirent.methodology.portsetup"
          version="0.0.0-0">


<!--GetAdditionalChassisInfoCommand

    Returns the chassis info in JSON format.
    If AutoConnect is true, it will automatically connect to the chassis.
    Otherwise, there must already be an existing chassis connection with an entry under PhysicalChassisManager.
    Each chassis that has no connection will have an empty string in the ChassisInfoList element
    corresponding to the AddrList list index.
    This command is a rewrite of the existing GetChassisInfoCommand, but it will eventually also call a command
    that will update PhysicalPort's new LinkStatus and LineSpeed properties.
-->
<stc:class
    name="GetAdditionalChassisInfoCommand"
    displayName="Get Additional Chassis Info"
    bllDirectInterface="true"
    isInternal="true">

    <stc:property name="AddrList" type="string" default="" category="input" displayName="Chassis IP/Hostname" minOccurs="0" maxOccurs="unbounded"/>
    <stc:property name="AutoConnect" type="bool" default="false" category="input" displayName="Auto Connect"/>

    <stc:property name="ChassisInfoList" type="string" default="" category="output" displayName="Chassis Info">
        <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.PropertyDescription" value="JSON string representing the chassis, test modules, and ports available to the system." />
        <stc:attribute type="framework.StringPropertyFormat" internalIsEnum="true" internalType="u8" value="JSON" />
    </stc:property>
</stc:class>


<stc:class name="VerifyLinkStatusCommand"
           displayName="Verify Link Status Command"
           bllDirectInterface="true">
    <stc:attribute internalIsEnum="false" internalType="bool" name="none" type="core.Sequenceable" value="true" />
    <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.CommandDescription" value="Verify that the link status matches the expected value(s) for all ports before running the methodology." />
    <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.CommandCategory" value="Test Methodology//Port Setup" />
    <stc:attribute type="core.RequireApplyToIL" value="false" internalType="bool" />
    <stc:attribute type="core.RequirePostApplyToIL" value="false" internalType="bool" />

    <!-- <stc:enumeration name="EnumLinkStatus">
      <stc:enum name="DOWN"             value="0"   displayName="Down"/>
      <stc:enum name="UP"               value="1"   displayName="Up"/>
      <stc:enum name="ERROR"            value="2"   displayName="Error"/>
      <stc:enum name="ADMIN_DOWN"       value="3"   displayName="Admin Down"/>
      <stc:enum name="UP_SW_DISABLED"   value="4"   displayName="Up, Software Disabled"/>
      <stc:enum name="SONET"            value="5"   displayName="Sonet" />
      <stc:enum name="NONE"             value="6"   displayName="None" />
    </stc:enumeration> -->

    <stc:enumeration name="EnumReportType">
      <stc:enum name="NONE"         value="0" displayName="Do not generate a report" />
      <stc:enum name="FAILURES"     value="1" displayName="Only report failures" />
      <stc:enum name="ALWAYS"       value="2" displayName="Report all results" />
    </stc:enumeration>

    <stc:property category="input" name="PortTagList" displayName="Port Tag List" type="string" default="" minOccurs="0" maxOccurs="unbounded">
      <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.PropertyDescription" value="List of tag names of Port objects that will check the link status." />
    </stc:property>
    <stc:property category="input" name="EnableReturnValue" displayName="Allow command to fail if links status not matched" type="bool" default="false">
        <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.PropertyDescription" value="True if VerifyLinkStatusCommand should be allowed to return False if one or more port link status does not match.  False means VerifyLinkStatusCommand will always return True, even if link status does not match." />
    </stc:property>
    <!-- <stc:property category="input" name="LinkStatusList" displayName="Link Status List" type="u8" default="UP" minOccurs="0" maxOccurs="unbounded">
      <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.PropertyDescription" value="List of link status values that this command should be testing for.  Acceptable values are: DOWN, UP, ERROR, ADMIN_DOWN, UP_SW_DISABLED, SONET, and NONE." />
      <stc:enumerationRef ref="EnumLinkStatus"/>
    </stc:property> -->
    <stc:property category="input" name="ReportType" displayName="Report Type" type="u8" default="NONE">
      <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.PropertyDescription" value="Select the type of report this command should generate.  Acceptable values are: NONE, FAILURES, and ALWAYS." />
      <stc:enumerationRef ref="EnumReportType"/>
    </stc:property>

    <stc:property category="output" name="LinkStatusMatches" displayName="Link status matches the expected value(s)" type="bool" default="false">
        <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.PropertyDescription" value="True if all links have a status listed in the LinkStatusList; False if any link has a status not in LinkStatusList." />
    </stc:property>
</stc:class>


<stc:class name="GetSupportedPhysCommand"
           displayName="Get Supported PHYs Command"
           bllDirectInterface="true">
    <stc:attribute internalIsEnum="false" internalType="bool" name="none" type="core.Sequenceable" value="false" />
    <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.CommandDescription" value="Get a list of list of supported PHYs, based on the list of Physical Ports provided." />
    <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.CommandCategory" value="Test Methodology//Port Setup" />
    <stc:attribute type="core.RequireApplyToIL" value="false" internalType="bool" />
    <stc:attribute type="core.RequirePostApplyToIL" value="false" internalType="bool" />

    <stc:property category="input" name="PortList" displayName="PortList" type="string" default="">
        <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.PropertyDescription" value="JSON string representing the ports that own the PHYs." />
        <stc:attribute type="framework.StringPropertyFormat" internalIsEnum="true" internalType="u8" value="JSON" />
    </stc:property>

    <stc:property category="output" name="SupportedPhyList" displayName="JSON string representing the ports and their supported PHY(s)" type="string" default="">
        <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.PropertyDescription" value="JSON string representing the ports and their supported PHY(s)." />
        <stc:attribute type="framework.StringPropertyFormat" internalIsEnum="true" internalType="u8" value="JSON" />
    </stc:property>

<!-- SAMPLE_JSON:
This sample shows GetSupportedPhysCommand's input for port locations //10.10.10.10/1/1 and //20.20.20.20/1/1
[
  {
    "location": "//10.10.10.10/1/1"
  },
  {
    "location": "//20.20.20.20/1/1"
  }
]
-->
<!-- SAMPLE_JSON:
This sample shows GetSupportedPhysCommand's output when querying a dual-media port at //10.14.16.27/2/4
[
  {
    "location": "//10.14.16.27/2/4",
    "supported_phys": [
      {
        "phy_type": "ethernet_phy",
        "display_name": "Ethernet PHY Parameters",
        "description": "Ethernet PHY configuration parameters.",
        "test_properties": [
          {
            "property": "MediaType",
            "property_value": "Copper",
            "property_value_type": "ENUM",
            "acceptable_values": [
              "Copper"
            ]
          },
          {
            "property": "LineSpeed",
            "property_value": "100M",
            "property_value_type": "ENUM",
            "acceptable_values": [
              "10M",
              "100M",
              "1G"
            ]
          },
          {
            "property": "DataPathMode",
            "property_value": "Normal",
            "property_value_type": "ENUM",
            "acceptable_values": [
              "Normal"
            ]
          }
        ]
      },
      {
        "phy_type": "ethernet_phy",
        "display_name": "Ethernet PHY Parameters (Fiber)",
        "description": "Ethernet PHY configuration parameters.",
        "test_properties": [
          {
            "property": "MediaType",
            "property_value": "Fiber",
            "property_value_type": "ENUM",
            "acceptable_values": [
              "Fiber"
            ]
          },
          {
            "property": "LineSpeed",
            "property_value": "1G",
            "property_value_type": "ENUM",
            "acceptable_values": [
              "1G"
            ]
          },
          {
            "property": "EnableDeficitIdleCount",
            "property_value": "True",
            "property_value_type": "BOOLEAN"
          },
          {
            "property": "DataPathMode",
            "property_value": "Diagnostic Loopback",
            "property_value_type": "ENUM",
            "acceptable_values": [
              "Normal",
              "Diagnostic Loopback"
            ]
          }
        ]
      }
    ]
  }
]
-->
<!-- SAMPLE_JSON:
This sample shows GetSupportedPhysCommand's output when querying a wireless port at //10.15.108.152/1/6
[
  {
    "location": "//10.15.108.152/1/6",
    "supported_phys": [
      {
        "phy_type": "wireless_phy",
        "display_name": "Wireless PHY Parameters",
        "description": "Wireless PHY configuration parameters.",
        "test_properties": [
          {
            "property": "MimoType",
            "property_value": "3 x 3 : 3",
            "property_value_type": "ENUM",
            "acceptable_values": [
              "1 x 1 : 1",
              "2 x 2 : 2",
              "3 x 3 : 3",
              "4 x 4 : 4"
            ]
          },
          {
            "property": "FrequencyBand",
            "property_value": "5.0 GHz",
            "property_value_type": "ENUM",
            "acceptable_values": [
              "2.4 GHz",
              "5.0 GHz"
            ]
          },
          {
            "property": "PowerLevel",
            "property_value": "0",
            "property_value_type": "INTEGER",
            "minimum": "0",
            "maximum": "30"
          }
        ]
      }
    ]
  }
]
-->

</stc:class>


<stc:class name="ValidatePhyConfigCommand"
           displayName="Validate Meta PHY Configuration Command"
           bllDirectInterface="true">
    <stc:attribute internalIsEnum="false" internalType="bool" name="none" type="core.Sequenceable" value="false" />
    <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.CommandDescription" value="Checks meta against supported PHYs based on the list of Physical Ports provided." />
    <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.CommandCategory" value="Test Methodology//Port Setup" />
    <stc:attribute type="core.RequireApplyToIL" value="false" internalType="bool" />
    <stc:attribute type="core.RequirePostApplyToIL" value="false" internalType="bool" />

    <stc:property category="input" name="PortGroupsInfo" displayName="Port Groups Info" type="string" default="">
        <stc:attribute internalIsEnum="false" internalType="string" name="none" type="framework.PropertyDescription" value="JSON string representing the port groups and ports to validate." />
        <stc:attribute type="framework.StringPropertyFormat" internalIsEnum="true" internalType="u8" value="JSON" />
    </stc:property>

<!-- SAMPLE_JSON:
This sample shows ValidatePhyConfigCommand's input PortGroupsInfo parameter
[
  {
    "property": "FooBarPort1",
    "display_name": "FooBar Port Group 1",
    "ports": [
      {
        "location": "//10.10.10.10/2/1",
        "active_phy": {
          "phy_type": "ethernet_phy",
          "test_properties": [
            {
              "property": "MediaType",
              "property_value": "Copper"
            },
            {
              "property": "LineSpeed",
              "property_value": "100M"
            },
            {
              "property": "DataPathMode",
              "property_value": "Diagnostic Loopback"
            }
          ]
        }
      }
    ]
  },
  {
    "property": "FooBarPort2",
    "display_name": "FooBar Port Group 2",
    "ports": [
      {
        "location": "//10.10.10.10/2/2",
        "active_phy": {
          "phy_type": "ethernet_phy",
          "test_properties": [
            {
              "property": "MediaType",
              "property_value": "Fiber"
            },
            {
              "property": "LineSpeed",
              "property_value": "1G"
            },
            {
              "property": "EnableDeficitIdleCount",
              "property_value": "True"
            },
            {
              "property": "DataPathMode",
              "property_value": "Normal"
            }
          ]
        }
      }
    ]
  }
]
-->

</stc:class>


</stc:meta>

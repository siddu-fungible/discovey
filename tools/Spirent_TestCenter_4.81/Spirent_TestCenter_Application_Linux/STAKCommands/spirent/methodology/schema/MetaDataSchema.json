{
  "MetaDataSchema": {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "self": {
      "vendor": "com.spirentcom",
      "name": "Methodology Set",
      "format": "jsonschema",
      "version": "1-0-0"
    },
    "anyOf": [
      {
        "title": "Methodology Set",
        "description": "A collection of test methodologies that match a search criteria, default=ALL",
        "type": "array",
        "items": {
          "type": "object",
          "$ref": "#/MetaDataSchema/definitions/methodology"
        }
      },
      {
        "type": "object",
        "$ref": "#/MetaDataSchema/definitions/methodology"
      }
    ],
    "definitions": {
      "methodology": {
        "title": "Methodology",
        "description": "A single test methodology",
        "properties": {
          "methodology_key": {
            "description": "The unique identifier for a methodology",
            "type": "string"
          },
          "test_case_key": {
            "description": "Identifies an existing test case associated with this methodology",
            "type": "string"
          },
          "display_name": {
            "description": "The friendly name of the methodology",
            "type": "string"
          },
          "short_display_name": {
            "description": "A short name for the methodology intended to be used for display where space is limited",
            "type": "string"
          },
          "description": {
            "description": "The description of the methodology",
            "type": "string"
          },
          "version": {
            "description": "The version of this methodology",
            "type": "string"
          },
          "name_space": {
            "description": "The root path to store the methodology package",
            "type": "string"
          },
          "dependencies": {
            "description": "Methodology dependencies",
            "type": "object",
            "properties": {
              "min_bll_version": {
                "description": "Minimum BLL version supported by methodology",
                "type": "string"
              },
              "min_stak_core_version": {
                "description": "Minimum STAK core version supported by methodology",
                "type": "string"
              }
            }
          },
          "status": {
            "description": "The status of the methodology.",
            "type": "object",
            "properties": {
              "valid": {
                "description": "A boolean that indicates whether the methodology has passed validation. If true, the methodology is complete and all dependencies have been satisfied. If false, validation did not pass. See validation_explanation for details when false.",
                "type": "boolean"
              },
              "validation_explanation": {
                "description": "A string that provides explanatory text for the reason valid, above, is false.",
                "type": "string"
              }
            }
          },
          "topology_diagram": {
            "type": "object",
            "$ref": "#/MetaDataSchema/definitions/topology_diagram"
          },
          "base_methodology": {
            "description": "Information about a methodology package that this methodology is based on.",
            "type": "object",
            "properties": {
              "methodology_key": {
                "description": "Base methodology's methodology key",
                "type": "string"
              },
              "property_overrides": {
                "description": "A dictionary of values to override defaults in the base methodology for meta properties not in use in this methodology.  Properties unspecified here or in the property_groups will use the default value from the base methodology.",
                "type": "object"
              }
            },
            "required": [
              "methodology_key"
            ]
          },
          "labels": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "description": "A label that describes a characteristic of the test methodology",
              "type": "string"
            }
          },
          "image": {
            "description": "The URI to an optional image file that shows a picture of the overall methodology.",
            "type": "string"
          },
          "resource_groups": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "$ref": "#/MetaDataSchema/definitions/resource_group"
            }
          },
          "port_groups": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "$ref": "#/MetaDataSchema/definitions/port_group"
            }
          },
          "topology_map": {
            "type": "object",
            "$ref": "#/MetaDataSchema/definitions/topology_map"
          },
          "machine_groups": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "$ref": "#/MetaDataSchema/definitions/machine_group"
            }
          },
          "machine_map": {
            "type": "object",
            "$ref": "#/MetaDataSchema/definitions/machine_map"
          },
          "property_groups": {
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "$ref": "#/MetaDataSchema/definitions/property_group"
            }
          }
        },
        "required": [
          "methodology_key",
          "display_name",
          "version",
          "port_groups"
        ]
      },
      "resource_group": {
        "title": "Resource Group",
        "description": "A group of resources required for the test",
        "oneOf": [
          {
            "$ref": "#/MetaDataSchema/definitions/resource_group_port"
          },
          {
            "$ref": "#/MetaDataSchema/definitions/resource_group_machine_set"
          },
          {
            "$ref": "#/MetaDataSchema/definitions/resource_group_metrics"
          }
        ]
      },
      "resource_group_port": {
        "description": "A group of ports required for the test",
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "description": "A flag indicating this resource group is active",
            "default": true
          },
          "property": {
            "description": "The unique identifier for the resource group",
            "type": "string"
          },
          "display_name": {
            "description": "The friendly name for the resource group",
            "type": "string"
          },
          "description": {
            "description": "The description for the resource group",
            "type": "string"
          },
          "type": {
            "description": "Type of resource group",
            "enum": [
              "PORT"
            ]
          },
          "bring_online": {
            "description": "A flag to specify whether or not to bring the ports in this group online. If this property is not present, assume the value is true and bring the ports online.",
            "type": "boolean",
            "default": true
          },
          "enable_unique_tags": {
            "description": "A flag to specify whether ports are tagged individually within this port group. When true, the actual port group tag is not used, but separate tag values given in the port section are used.",
            "type": "boolean",
            "default": false
          },
          "min_occurs": {
            "description": "The minimum number of ports allowed in this port group. If not specified the default is 1.",
            "type": "string"
          },
          "max_occurs": {
            "description": "The maximum number of ports allowed in this port group. Specify unbounded if no maximum limit.",
            "type": "string"
          },
          "resource_list": {
            "description": "The ports that make up the port group.",
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "$ref": "#/MetaDataSchema/definitions/port"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "property",
          "display_name",
          "type",
          "resource_list"
        ]
      },
      "resource_group_machine_set": {
        "title": "Machine Set",
        "description": "A group of machines required for the test.",
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "description": "A flag indicating this resource group is active",
            "default": true
          },
          "property": {
            "description": "The unique identifier for the resource group",
            "type": "string"
          },
          "display_name": {
            "description": "The friendly name for the resource group",
            "type": "string"
          },
          "description": {
            "description": "The description for the resource group",
            "type": "string"
          },
          "type": {
            "description": "Type of resource group",
            "enum": [
              "MACHINE_SET"
            ]
          },
          "resource_list": {
            "description": "The machines that make up the machine group.",
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "$ref": "#/MetaDataSchema/definitions/machine_set"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "property",
          "display_name",
          "type",
          "resource_list"
        ]
      },
      "resource_group_metrics": {
        "title": "Metrics Services",
        "description": "A group of metric agents required for the test.",
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "description": "A flag indicating this resource group is active",
            "default": true
          },
          "property": {
            "description": "The unique identifier for the resource group",
            "type": "string"
          },
          "display_name": {
            "description": "The friendly name for the resource group",
            "type": "string"
          },
          "description": {
            "description": "The description for the resource group",
            "type": "string"
          },
          "type": {
            "description": "Type of resource group",
            "enum": [
              "METRICS"
            ]
          },
          "proxy_host": {
            "description": "An override for the proxy service address, usually not set -- mainly for testing purposes only. (Only the first found is used)",
            "type": "string"
          },
          "proxy_port": {
            "description": "An override for the proxy service port, usually not set -- mainly for testing purposes only (Only the first found is used)",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          },
          "resource_list": {
            "description": "A list of Metric Agents and corresponding UUIDs",
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "$ref": "#/MetaDataSchema/definitions/metrics_agent_list"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "property",
          "display_name",
          "type",
          "resource_list"
        ]
      },
      "metrics_agent_list": {
        "title": "Metrics Agent",
        "description": "The definition for a single metrics agent",
        "type": "object",
        "properties": {
          "location": {
            "description": "The address for this metrics agent",
            "type": "string"
          },
          "vnf_name": {
            "description": "The name of the VNF of interest",
            "type": "string"
          },
          "vnf_id": {
            "description": "The UUID corresponding to the VNF of interest",
            "type": "string"
          },
          "cloud_name": {
            "description": "The unique identifier of the cloud",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "location"
        ]
      },
      "port_group": {
        "description": "A group of ports required for the test",
        "properties": {
          "property": {
            "description": "The unique identifier or tag for the port group",
            "type": "string"
          },
          "display_name": {
            "description": "The friendly name of the port group",
            "type": "string"
          },
          "description": {
            "description": "The description for this port group",
            "type": "string"
          },
          "image": {
            "description": "The URI for an optional image file that shows a picture of the port group.",
            "type": "string"
          },
          "bring_online": {
            "description": "A flag to specify whether or not to bring the ports in this group online. If this property is not present, assume the value is true and bring the ports online.",
            "type": "boolean",
            "default": true
          },
          "enable_unique_tags": {
            "description": "A flag to specify whether ports are tagged individually within this port group. When true, the actual port group tag is not used, but separate tag values given in the port section are used.",
            "type": "boolean",
            "default": false
          },
          "min_occurs": {
            "description": "The minimum number of ports allowed in this port group. If not specified the default is 1.",
            "type": "string"
          },
          "max_occurs": {
            "description": "The maximum number of ports allowed in this port group. Specify unbounded if no maximum limit.",
            "type": "string"
          },
          "ports": {
            "description": "The ports that make up the port group.",
            "type": "array",
            "minItems": 0,
            "uniqueItems": false,
            "items": {
              "type": "object",
              "$ref": "#/MetaDataSchema/definitions/port"
            }
          }
        },
        "required": [
          "property",
          "display_name",
          "ports"
        ]
      },
      "port": {
        "description": "A single port for the test.",
        "type": "object",
        "properties": {
          "location": {
            "description": "The chassis-slot-port information for a port to be used in the test. offline is default on a Get. Must be valid chassis-slot-port on a Run.",
            "type": "string"
          },
          "phy_properties": {
            "description": "DEPRECATED:  A list of properties for the physical port.",
            "type": "object",
            "properties": {
              "speed": {
                "enum": [
                  "10M",
                  "100M",
                  "1G",
                  "10G",
                  "40G",
                  "100G"
                ],
                "default": "1G"
              }
            }
          },
          "tag_name": {
            "description": "When enable_single_port_tags is true, use this name to tag the individual port with a unique name. Ignored otherwise",
            "type": "string"
          },
          "active_phy": {
            "description": "The physical interface that this port will use to transmit and receive data.",
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/MetaDataSchema/definitions/ethernet_phy_def"
              },
              {
                "$ref": "#/MetaDataSchema/definitions/wireless_phy_def"
              }
            ]
          }
        },
        "additionalProperties": false,
        "allOf": [
          {
            "required": [
              "location"
            ]
          },
          {
            "not": {
              "allOf": [
                {
                  "required": [
                    "phy_properties"
                  ]
                },
                {
                  "required": [
                    "active_phy"
                  ]
                }
              ]
            }
          }
        ]
      },
      "topology_diagram": {
        "description": "The topology diagram information for the methodology.",
        "additionalProperties": false,
        "properties": {
            "url": {
                "description": "A string that indicates the URL of the topology diagram. It's either a local file path or a hyperlink.",
                "type": "string"
            },
            "description": {
                "description": "Describes the topology information.",
                "type": "string"
            }
        }
      },
      "topology_map": {
        "description": "The optional definition of the methodology's topology.  This maps the items in the port_group array (by property) to the items in the property_groups array (by topology_side).",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "Topology type (ie WEST_EAST, CENTRAL_SUT, or THREE_PORT_GROUP).",
            "type": "string"
          },
          "subtype": {
            "description": "Topology subtype (ie CONVERGENCE).",
            "type": "string"
          },
          "display_name": {
            "description": "Topology display name.",
            "type": "string"
          },
          "description": {
            "description": "Topology description.",
            "type": "string"
          },
          "sides": {
            "description": "A list of the different sides of the topology.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "object",
              "additionalProperties": false,
              "description": "The mapping between port_group and property_group for a side of the topology.",
              "properties": {
                "display_name": {
                  "description": "Display name to use for this topology side.",
                  "type": "string"
                },
                "description": {
                  "description": "A description of this topology side.",
                  "type": "string"
                },
                "side": {
                  "description": "The topology_side from a property_group",
                  "type": "string"
                },
                "port_group": {
                  "description": "The property name of a port_group",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "machine_group": {
        "description": "A group of machines required for the test",
        "properties": {
          "property": {
            "description": "The unique identifier or tag for the machine group",
            "type": "string"
          },
          "display_name": {
            "description": "The friendly name of the machine group",
            "type": "string"
          },
          "image": {
            "description": "The URI for an optional image file that shows a picture of the machine group.",
            "type": "string"
          },
          "machines": {
            "description": "The machines that make up the machine group.",
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "$ref": "#/MetaDataSchema/definitions/machine_set"
            }
          }
        },
        "required": [
          "property",
          "display_name",
          "machines"
        ]
      },
      "machine_set": {
        "title": "Machine Set",
        "description": "A set of machines for the test. There are currently three variants of machine sets supported. 1. Machines identified by their IP address (machine_ips specify the machines). 2. Machines identified by a discovery ID and count. machine_id and count are used. deployment_parameters and machine_ips must not be set. 3. Machines to be deployed by the methodology. machine_id is used as an identifier. count specifies the number of instances to deploy using deployment_parameters. machine_ips must not be set.",
        "type": "object",
        "properties": {
          "machine_id": {
            "description": "The resource ID for this machine set",
            "type": "string"
          },
          "count": {
            "description": "The number of instances used or to be deployed when the machine_id is specified, and in case of deployment, deployment_params is specified. Ignored if machine_ips is used. Note the methodology may ignore this if it has requirements on the number of instances to be deployed.",
            "type": "string"
          },
          "machine_ips": {
            "description": "The IP addresses or hostnames for this machine set",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "deployment_params": {
            "description": "Parameters for auto-deployment of instances. The machine_id will be used to identify the set of VMs deployed by these parameters and will be mapped to the discovery ID of the deployed VMs.",
            "type": "object",
            "properties": {
              "specification": {
                "type": "object",
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "flavor_id": {
                        "description": "Flavor ID from infrastructure",
                        "type": "string"
                      },
                      "image_id": {
                        "description": "The ID of the image to use for deployment.",
                        "type": "string"
                      },
                      "boot_options": {
                        "description": "Options for root disk",
                        "type": "object",
                        "properties": {
                          "create_new_volume": {
                            "description": "Indicates if a new volume should be created",
                            "type": "boolean",
                            "default": false
                          },
                          "volume_size": {
                            "description": "If create_new_volume is true, specifies the size of the created volume in GiB.",
                            "type": "integer",
                            "default": 1
                          }
                        }
                      },
                      "networks": {
                        "description": "List of network IDs from infrastructure",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Network ID",
                              "type": "string"
                            },
                            "fixed_ip": {
                              "description": "Optional starting IP address for fixed address assignment.",
                              "type": "string",
                              "format": "ipv4"
                            }
                          }
                        },
                        "minItems": 1,
                        "maxItems": 1
                      },
                      "security_groups": {
                        "description": "Optional security groups to associated with the deployed instances.",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Security group ID",
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "flavor_id",
                      "image_id",
                      "networks"
                    ]
                  },
                  {
                    "description": "Placeholder for future extension",
                    "type": "string"
                  }
                ]
              },
              "location": {
                "description": "Location to deploy instances (e.g., availability zone)",
                "type": "object",
                "oneOf": [
                  {
                    "description": "Location ID",
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Identifies the location to be used for deployment.",
                        "type": "string"
                      }
                    }
                  },
                  {
                    "description": "Place holder for future extensions",
                    "type": "string"
                  }
                ]
              },
              "credential_key": {
                "description": "Key used to retrieve cloud and credential information to use for deployment.",
                "type": "string"
              }
            },
            "required": [
              "specification",
              "location",
              "credential_key"
            ]
          },
          "name": {
            "description": "The name of this machine_set",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "machine_map": {
        "description": "The optional definition of the methodology's topology.  This maps the items in the machine_group array (by property) to the items in the property_groups array (by topology_side).",
        "additionalProperties": false,
        "properties": {
          "type": {
            "description": "Topology type (ie WEST_EAST, CENTRAL_SUT, or THREE_PORT_GROUP).",
            "type": "string"
          },
          "subtype": {
            "description": "Topology subtype (ie CONVERGENCE).",
            "type": "string"
          },
          "display_name": {
            "description": "Topology display name.",
            "type": "string"
          },
          "description": {
            "description": "Topology description.",
            "type": "string"
          },
          "sides": {
            "description": "A list of the different sides of the topology.",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "object",
              "additionalProperties": false,
              "description": "The mapping between machine_group and property_group for a side of the topology.",
              "properties": {
                "display_name": {
                  "description": "Display name to use for this topology side.",
                  "type": "string"
                },
                "description": {
                  "description": "A description of this topology side.",
                  "type": "string"
                },
                "side": {
                  "description": "The topology_side from a property_group",
                  "type": "string"
                },
                "machine_group": {
                  "description": "The property name of a machine_group",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "property_group": {
        "description": "A collection of related information about the test that is used to both render the test on a Get and localize the test on a Run.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "topology_side": {
            "description": "Used only for Topology group types.  Defines the side of the topology the properties are associated to.",
            "type": "string"
          },
          "display_name": {
            "description": "The friendly name for this group of properties.",
            "type": "string"
          },
          "description": {
            "description": "The description for this group of properties.",
            "type": "string"
          },
          "group_key": {
            "description": "Optional key to identify the group. Used by the web application to reference a specific property_group.",
            "type": "string"
          },
          "image": {
            "description": "The URI for an optional image file that shows a picture of the components associated with the property group.",
            "type": "string"
          },
          "group_type": {
            "description": "The type of this property_group. Used by the web application to primarily distinguish property_groups for use as a profile.",
            "type": "string"
          },
          "test_properties": {
            "description": "A list of properties for the group, e.g test configuration or settings. Each item in the list is a property_item_value.",
            "type": "array",
            "minItems": 0,
            "uniqueItems": true,
            "items": {
              "type": "object",
              "oneOf": [
                {
                  "$ref": "#/MetaDataSchema/definitions/property_value_item"
                },
                {
                  "$ref": "#/MetaDataSchema/definitions/property_table_item"
                }
              ]
            }
          }
        },
        "required": [
          "group_type",
          "display_name",
          "test_properties"
        ]
      },
      "property_value_item": {
        "description": "A property-value item.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "property": {
            "description": "The unique identifier or tag for this property.",
            "type": "string"
          },
          "display_name": {
            "description": "The friendly name for this property.",
            "type": "string"
          },
          "description": {
            "description": "The description for this property.",
            "type": "string"
          },
          "image": {
            "description": "The URI to an optional image file for this property.",
            "type": "string"
          },
          "property_value": {
            "description": "The value of the property. Can be a single value or list of values.",
            "$ref": "#/MetaDataSchema/definitions/valid_property_value"
          },
          "property_value_type": {
            "description": "The type of the single value or values in the list of the property_value.",
            "enum": [
              "INTEGER",
              "FLOAT",
              "IPV4",
              "IPV6",
              "MAC",
              "STRING",
              "INPUTFILEPATH",
              "JSON",
              "HTTP",
              "ENUM",
              "BOOLEAN",
              "PORT_GROUP",
              "STORAGE_DEVICE",
              "TVLP_ID",
              "TVLP_INPUTFILEPATH"
            ]
          },
          "minimum": {
            "description": "The minimum acceptable value or minimum number of characters, as applicable.",
            "type": "string"
          },
          "maximum": {
            "description": "The maximum acceptable value or maximum number of characters, as applicable.",
            "type": "string"
          },
          "acceptable_values": {
            "description": "An array of acceptable values, for use when the property_value_type is set to enum or list",
            "type": "array",
            "minItems": 0,
            "uniqueItems": false,
            "items": {
              "description": "An acceptable value for this property_value_type",
              "type": "string"
            }
          },
          "is_collection": {
            "description": "A flag indicating whether the property value is a collection or scalar.",
            "type": "boolean"
          },
          "units": {
            "description": "Units of measurement for the given property.  For example, frames/s, ms, trials, or bytes.",
            "type": "string"
          },
          "is_read_only": {
            "description": "A flag indicating whether the property value is read-only or editable.",
            "type": "boolean",
            "default": false
          },
          "endpoint_profile_property_name": {
            "description": "The endpoint profile property name associated with this property",
            "type": "string"  
          },
          "hide": {
            "description": "A flag to indicate this property is hidden.  Currently only used for realtime grafana controls",
            "type": "boolean"
          },
          "categorize_values": {
            "description": "A flag enabling display of categorized drop down tree lists, for use when the property_value_type is set to enum",
            "type": "boolean"
          }
        },
        "required": [
          "property",
          "display_name",
          "description",
          "property_value_type"
        ]
      },
      "valid_table_row_value": {
        "description": "Representation of a row of properties values for a table",
        "items": {
          "$ref": "#/MetaDataSchema/definitions/valid_property_value"
        },
        "type": "array"
      },
      "valid_property_value": {
        "description": "Representation of a value that can take any form.",
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ]
      },
      "property_table_item": {
        "description": "A property-table item",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "property": {
            "description": "The unique identifier or tag for this property.",
            "type": "string"
          },
          "display_name": {
            "description": "The friendly name for this property.",
            "type": "string"
          },
          "description": {
            "description": "The description for this property.",
            "type": "string"
          },
          "property_value_type": {
            "description": "The type of the property_value.",
            "enum": [
              "JSON"
            ]
          },
          "column_definitions": {
            "description": "List of properties that define the columns of the table.",
            "type": "array",
            "items": {
              "$ref": "#/MetaDataSchema/definitions/property_value_item"
            }
          },
          "property_value": {
            "description": "The table row definition (JSON object or array).",
            "oneOf": [
              {
                "type": "object"
              },
              {
                "type": "array"
              }
            ]
          },
          "table": {
            "description": "List of lists that contain the rows of table data.",
            "type": "array",
            "items": {
              "$ref": "#/MetaDataSchema/definitions/valid_table_row_value"
            }
          },
          "is_static": {
            "description": "A flag that indicates whether the table has a fixed number of rows or the number of rows is allowed to change.",
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "property",
          "display_name",
          "description",
          "column_definitions",
          "table"
        ]
      },
      "ethernet_prop_def": {
        "description": "Ethernet Property Type",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "property": {
            "description": "Name of property",
            "enum": [
              "MediaType",
              "LineSpeed",
              "EnableDeficitIdleCount",
              "DataPathMode"
            ]
          },
          "property_value": {
            "description": "Property Value",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          }
        },
        "required": [
          "property",
          "property_value"
        ]
      },
      "ethernet_phy_def": {
        "description": "Ethernet interface",
        "type": "object",
        "properties": {
          "phy_type": {
            "description": "Physical interface type",
            "enum": [
              "ethernet_phy"
            ]
          },
          "test_properties": {
            "description": "A list of properties to configure this interface",
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/MetaDataSchema/definitions/ethernet_prop_def"
            },
            "uniqueItems": true
          }
        },
        "additionalProperties": false
      },
      "wireless_prop_def": {
        "description": "Wireless Property.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "property": {
            "description": "Name of property",
            "enum": [
              "MimoType",
              "FrequencyBand",
              "PowerLevel"
            ]
          },
          "property_value": {
            "description": "Property Value",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "property",
          "property_value"
        ]
      },
      "wireless_phy_def": {
        "description": "Wireless interface (IEEE 802.11)",
        "type": "object",
        "properties": {
          "phy_type": {
            "description": "Physical interface type",
            "enum": [
              "wireless_phy"
            ]
          },
          "test_properties": {
            "description": "A list of properties to configure this interface",
            "type": "array",
            "minItems": 1,
            "items": {
              "$ref": "#/MetaDataSchema/definitions/wireless_prop_def"
            },
            "uniqueItems": true
          }
        },
        "additionalProperties": false
      },
      "grafana_parameters": {
        "description": "Grafana parameters",
        "type": "array",
        "minItems": 0,
        "items": {
          "type": "object",
          "oneOf": [
            {
              "$ref": "#/MetaDataSchema/definitions/property_value_item"
            },
            {
              "$ref": "#/MetaDataSchema/definitions/dash_var_prop_item"
            },
            {
              "$ref": "#/MetaDataSchema/definitions/preset_var_prop_item"
            }
          ]
        }
      },
      "dash_var_prop_item": {
        "description": "Real-time dashboard variable property item.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "property": {
            "description": "The unique identifier or tag for this property.",
            "type": "string"
          },
          "property_value_type": {
            "description": "The type of the single value or values in the list of the property_value.",
            "enum": [
              "DASHBOARD_VARIABLE"
            ]
          },
          "use_custom_query": {
            "description": "Use a custom Influx DB query (ignores the one defined in the dashboard) to filter tags.",
            "type": "boolean"
          },
          "influx_db_query": {
              "description": "Same query specification as for SQLite.  This property is ignored when use_custom_query is false.",
              "type": "array"
          },
          "property_value_source_column": {
            "description": "Name of the column that will serve as the values for the property value.  If unspecified, the second column (one-based) will be used.  This property is ignored when use_custom_query is false.",
            "type": "string"
          },
          "max_result_limit": {
            "description": "When specified, will limit the total number of unique result items to be no more than the max_result_limit.  Once this limit is reached, no new data will be pushed into the ResultDataJson property of the StmRtResult.  The custom influx_db_query will also no longer be run.",
            "type": "integer"
          }
        },
        "required": [
          "property",
          "property_value_type"
        ]
      },
      "preset_var_prop_item": {
        "description": "A preset property-value item, used for grafana",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "property": {
            "description": "The unique identifier or tag for this property.",
            "type": "string"
          },
          "display_name": {
            "description": "The friendly name for this property.",
            "type": "string"
          },
          "description": {
            "description": "The description for this property.",
            "type": "string"
          },
          "hide": {
            "description": "A flag to indicate this property is hidden.  Currently only used for realtime grafana controls",
            "type": "boolean"
          },
          "property_value": {
            "description": "The retrieved value to use for this property",
            "enum": [
              "BLL_TOKEN",
              "VNF_UUID_REGEX",
              "VNF_INSTANCE_NAME",
              "VNF_HOSTIP_REGEX",
              "VNF_HOSTIP",
              "NFVI_ABSTRACT_TOPOLOGY_IFC_REGEX"
            ]
          },
          "property_value_type": {
            "description": "The type of the single value or values in the list of the property_value.",
            "enum": [
              "METHODOLOGY_VAR"
            ]
          }
        },
        "required": [
          "property",
          "display_name",
          "property_value",
          "property_value_type"
        ]
      }
    }
  }
}

<?xml version="1.0" encoding="UTF-8"?>

<template name="" type="stc">
  <reported>
    <instance>
      <name>StartDataSetId</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
      </value>
      <path>SELECT ParamValue FROM EotResultNodeParam WHERE Name='@StartDataSetId';</path>
      <multivalued>false</multivalued>
      <pageName>Version</pageName>
    </instance>
    <instance>
      <name>EndDataSetId</name>
      <persist>false</persist>
      <path>SELECT ParamValue FROM EotResultNodeParam WHERE Name='@EndDataSetId';</path>
      <multivalued>false</multivalued>
      <pageName>Version</pageName>
    </instance>
    <instance>
      <name>tstStartDate</name>
      <persist>false</persist>
      <value type="strings">
        <instance>2010-09-30 21:53:33</instance>
      </value>
      <path>SELECT CreatedTime FROM DataSet WHERE Id = =$@StartDataSetId$;</path>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>tstEndDate</name>
      <persist>false</persist>
      <path>SELECT CreatedTime FROM DataSet WHERE Id = =$@EndDataSetId$;</path>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Version</name>
      <persist>false</persist>
      <value type="strings">
        <instance>3.60.3500.0000</instance>
      </value>
      <path>SELECT Version FROM StcSystem WHERE Id = 1;</path>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>CounterMode</name>
      <persist>false</persist>
      <value type="strings">
        <instance>latency_jitter</instance>
      </value>
      <path>SELECT DISTINCT lower(ResultViewMode) FROM ResultOptions;</path>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>ResultViewMode</name>
      <persist>false</persist>
      <value type="strings">
        <instance>LATENCY_JITTER</instance>
      </value>
      <path>SELECT DISTINCT upper(ResultViewMode) FROM ResultOptions;</path>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>AdvTestSummary_TrafficGroupName</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Eth</instance>
        <instance>FCoE</instance>
      </value>
      <path>select distinct TrafficGroupName from DcbTrafficGroupPerIterationResult</path>
      <multivalued>true</multivalued>
      <pageName>Interarrival Time For Each Subgroup,Latency Graph For Each Subgroup,Queueput For Each Subgroup,Test Summary Graph,Queuput For Each Subgroup,Test Summary,Jitter Graph For Each Subgroup,Interarrival Time Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>AdvTestSummary_FrameSizeLoad</name>
      <persist>false</persist>
      <value type="strings">
        <instance>FS:128.0 BS:1 LS:50.0</instance>
      </value>
      <path>select 'FS:'|| CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END || ' BS:' ||BurstSize || ' LS:' ||IntendedLoad from DcbTrafficGroupPerIterationresult where TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' GROUP BY CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END , BurstSize, IntendedLoad ORDER BY CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END ,BurstSize, IntendedLoad</path>
      <multivalued>true</multivalued>
      <pageName>Interarrival Time For Each Subgroup,Test Summary Graph,Latency Graph For Each Subgroup,Trial Summary,Test Summary,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>Adv_MinLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.66</instance>
      </value>
      <path>select Coalesce(Min(MinLatency), 'N/A') from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' Group BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Latency Graph For Each Subgroup,Test Summary</pageName>
    </instance>
    <instance>
      <name>Adv_AvgLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>343.19841</instance>
      </value>
      <path>select Coalesce(Round(Avg(AvgLatency),5), 'N/A') from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' Group BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Latency Graph For Each Subgroup,Test Summary</pageName>
    </instance>
    <instance>
      <name>Adv_MaxLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>369.52</instance>
      </value>
      <path>select Coalesce(Max(MaxLatency), 'N/A') from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' Group BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Latency Graph For Each Subgroup,Test Summary</pageName>
    </instance>
    <instance>
      <name>Adv_MinJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
      </value>
      <path>select Min(MinJitter) from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>Adv_AvgJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
      </value>
      <path>select ROUND(Avg(AvgJitter),5) from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>Adv_MaxJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>27.54</instance>
      </value>
      <path>select Max(MaxJitter) from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>Adv_MinInterarrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
      </value>
      <path>select Min(MinInterarrivalTime) from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary,Interarrival Time Graph For Each Subgroup,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>Adv_AvgInterarrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
      </value>
      <path>select ROUND(Avg(AvgInterarrivalTime),5) from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary,Interarrival Time Graph For Each Subgroup,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>Adv_MaxInterarrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
      </value>
      <path>select Max(MaxInterarrivalTime) from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary,Interarrival Time Graph For Each Subgroup,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>Adv_TrafficGroup</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Eth</instance>
        <instance>FCoE</instance>
      </value>
      <path>select TrafficGroupName from DcbTrafficGroupPerIterationresult GROUP BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad ORDER BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>Adv_FrameSize</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>128.0</instance>
        <instance>128.0</instance>
      </value>
      <path>select CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END from DcbTrafficGroupPerIterationresult GROUP BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad ORDER BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1^ ^ ^ ^ ^ ^519553100^240662968^519553100^53.6788505352004^ ^0.66^311.449848954576^3704.78^65535^N/A^0^</instance>
        <instance>^Eth^128.0^50.0^50.0^0^399234509^120344377^399234509^69.8562187669002^1^0.66^343.198413817041^369.52^ ^ ^ ^True</instance>
        <instance>^FCoE^128.0^49.999^50.0^0^120318591^120318591^120318591^0.0^1^3.55^279.694479919234^3704.78^ ^ ^ ^True</instance>
      </value>
      <path>SELECT TrialNum||'^'|| TrafficGroupName ||'^'|| FrameSize ||'^'|| IntendedLoad ||'^'|| OfferedLoad ||'^'||PfcFrameCount ||'^'|| TxFrameCount ||'^'|| RxFrameCount ||'^'|| ExpectedRxFrameCount ||'^'|| Coalesce(DroppedFramePct, '') ||'^'|| BurstSize ||'^'|| MinLatency ||'^'|| AvgLatency ||'^'|| MaxLatency ||'^'|| PfcTxQuantum ||'^'|| PfcTxXonDelay ||'^'|| PfcTxPauseRate ||'^'|| IsConformant FROM ( SELECT TrialNum, DataSetId, ' ' AS TrafficGroupName, ' ' AS FrameSize, ' ' AS IntendedLoad, ' ' AS OfferedLoad, ForwardingRate, ' ' AS PfcFrameCount ,TxFrameCount ,RxFrameCount ,ExpectedRxFrameCount,DroppedFramePct ,' ' AS BurstSize , MinLatency , AvgLatency , MaxLatency ,PfcTxQuantum ,CASE WHEN PfcTxXonEnabled = 1 THEN PfcTxXonDelay ELSE 'N/A' END AS PfcTxXonDelay ,PfcTxPauseRate, ' ' AS IsConformant FROM DcbPfcResponseTimePerIterationResult UNION SELECT ' ' AS TrialNum, DataSetId, TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END AS FrameSize , IntendedLoad, OfferedLoad, ForwardingRate, PfcRxTriggerCount AS PfcFrameCount ,TxFrameCount ,RxFrameCount ,ExpectedRxFrameCount,DroppedFramePct,BurstSize , MinLatency , AvgLatency , MaxLatency ,' ' AS PfcTxQuantum ,' ' AS PfcTxXonDelay ,' ' AS PfcTxPauseRate, CASE WHEN IsConformant==1 THEN 'True' ELSE 'False' END IsConformant FROM DcbTrafficGroupPerIterationResult ORDER BY DataSetId, TrafficGroupName )</path>
      <multivalued>true</multivalued>
      <pageName>Trial Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>Test_TxCount</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>3.99234509E8</instance>
        <instance>1.20318591E8</instance>
      </value>
      <path>select Sum(TxFrameCOunt) from DcbTrafficGroupPerIterationresult GROUP BY TrafficGroupName,CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad ORDER BY TrafficGroupName, OfferedAvgFrameSize,BurstSize,IntendedLoad</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>Test_RxCount</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>1.20344377E8</instance>
        <instance>1.20318591E8</instance>
      </value>
      <path>select Sum(RxFrameCOunt) from DcbTrafficGroupPerIterationresult GROUP BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize,IntendedLoad ORDER BY TrafficGroupName, OfferedAvgFrameSize,BurstSize,IntendedLoad</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>Test_BurstSize</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>1.0</instance>
        <instance>1.0</instance>
      </value>
      <path>select BurstSize from DcbTrafficGroupPerIterationresult GROUP BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad ORDER BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad</path>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>Adv_BurstSize</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>1.0</instance>
        <instance>1.0</instance>
      </value>
      <path>select BurstSize from DcbTrafficGroupPerIterationresult GROUP BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad ORDER BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad</path>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>XonDelayUnit</name>
      <persist>false</persist>
      <value type="strings">
        <instance>quanta</instance>
      </value>
      <path>select lower(XonDelayUnit) from DcbIteratePfcResponseTimeCommand</path>
      <multivalued>true</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Advanced Test Summary,Trial Summary,Test Summary,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>TestSum</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1^ ^ ^ ^ ^65535^N/A^0^53.6788505352004^ ^0.66^311.44985^3704.78^0.0^5.62^3530.1^0.0^0.0^0.0^519553100^240662968^519553100</instance>
        <instance>1^Eth^128.0^1^50.0^ ^ ^ ^69.8562187669002^0^0.66^343.198413817041^369.52^0.0^0.0^27.54^0.0^0.0^0.0^399234509^120344377^399234509</instance>
        <instance>1^FCoE^128.0^1^49.999^ ^ ^ ^0.0^0^3.55^279.694479919234^3704.78^0.0^0.0^3530.1^0.0^0.0^0.0^120318591^120318591^120318591</instance>
      </value>
      <path>SELECT SumString FROM (select Min(DataSetId), Min(DataSetId) ||'^'|| ' ' ||'^'|| ' ' ||'^'|| ' ' ||'^'|| ' ' ||'^'|| PfcTxQuantum ||'^'|| CASE WHEN PfcTxXonEnabled = 1 THEN PfcTxXonDelay ELSE 'N/A' END ||'^'|| PfcTxPauseRate ||'^'|| Min(DroppedFramePct) ||'^'|| ' ' ||'^'|| Min(MinLatency) ||'^'|| Round(Avg(AvgLatency),5) ||'^'|| Max(MaxLatency) ||'^'|| Min(MinJitter) ||'^'|| Round(Avg(AvgJitter),5) ||'^'|| Max(MaxJitter) ||'^'|| Min(MinInterarrivalTime) ||'^'|| Round(Avg(AvgInterarrivalTime),5) ||'^'|| Max(MaxInterarrivalTime) ||'^'|| Sum(TxFrameCount) ||'^'|| Sum(RxFrameCount) ||'^'|| Sum(ExpectedRxFrameCount) AS SumString from DcbPfcResponseTimePerIterationResult GROUP BY LoopKey UNION ALL select Min(DataSetId), Min(DataSetId) ||'^'|| TrafficGroupName ||'^'|| (CASE WHEN upper(framesizetype) = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END) ||'^'||BurstSize ||'^'|| IntendedLoad ||'^'|| ' ' ||'^'|| ' ' ||'^'|| ' ' ||'^'|| Min(DroppedFramePct) ||'^'|| Sum(PfcRxTriggerCount) ||'^'|| Coalesce(Min(MinLatency), 'N/A') ||'^'|| Coalesce(Round(Avg(AvgLatency),5), 'N/A') ||'^'|| Coalesce(Max(MaxLatency), 'N/A') ||'^'||Min(MinJitter) ||'^'|| Round(Avg(AvgJitter),5) ||'^'|| Max(MaxJitter) ||'^'|| Min(MinInterarrivalTime) ||'^'|| Round(Avg(AvgInterarrivalTime),5) ||'^'|| Max(MaxInterarrivalTime)||'^'|| Sum(TxFrameCount) ||'^'|| Sum(RxFrameCount) ||'^'|| Sum(ExpectedRxFrameCount) AS SumString from DcbTrafficGroupPerIterationresult GROUP BY LoopKey,TrafficGroupName ORDER BY 1)</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Trial Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestMinLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.66</instance>
      </value>
      <path>select Coalesce(Min(MinLatency), 'N/A') from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestMaxLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>3704.78</instance>
      </value>
      <path>select Coalesce(Max(MaxLatency), 'N/A') from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestAvgLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>311.44645</instance>
      </value>
      <path>select Coalesce(Round(Avg(AvgLatency),5), 'N/A') from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestMinJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
      </value>
      <path>select Min(MinJitter) from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestMaxJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>3530.1</instance>
      </value>
      <path>select Max(MaxJitter) from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestAvgJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
      </value>
      <path>select Round(Avg(AvgJitter),5) from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum_PfcRxFrameCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>8639487</instance>
      </value>
      <path>SELECT PfcRxFrameCount FROM DcbTrafficGroupPerIterationResult ORDER BY DataSetId, TrafficGroupName</path>
      <multivalued>true</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum_PfcTotalQuanta</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>1222939473</instance>
      </value>
      <path>SELECT PfcRxTotalQuanta FROM DcbTrafficGroupPerIterationResult ORDER BY DataSetId, TrafficGroupName</path>
      <multivalued>true</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TestSum_PfcRxQuanta</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>1222939473</instance>
      </value>
      <path>SELECT CASE WHEN PfcRxTotalQuanta IS NULL THEN 'N/A' ELSE Sum(PfcRxTotalQuanta) END from DcbTrafficGroupPerIterationresult GROUP BY LoopKey,TrafficGroupName order BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum_PfcRxFrameCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>8639487</instance>
      </value>
      <path>SELECT CASE WHEN PfcRxFrameCount IS NULL THEN 'N/A' ELSE Sum(PfcRxFrameCount) END from DcbTrafficGroupPerIterationresult GROUP BY LoopKey,TrafficGroupName order BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestMinArrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
      </value>
      <path>select Min(MinInterArrivalTime) from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestAvgArrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
      </value>
      <path>select ROUND(Avg(AvgInterarrivalTime),5) from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestMaxArrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
      </value>
      <path>select Max(MaxInterarrivalTime) from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>Priority_TxPriFrameCount</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>1.0</instance>
        <instance>1.0</instance>
        <instance>1.0</instance>
        <instance>1.0</instance>
        <instance>1.0</instance>
        <instance>1.0</instance>
        <instance>1.0</instance>
        <instance>1.0</instance>
      </value>
      <path>SELECT TxPri0FrameCount, TxPri1FrameCount, TxPri2FrameCount, TxPri3FrameCount, TxPri4FrameCount, TxPri5FrameCount, TxPri6FrameCount, TxPri7FrameCount FROM DcbPfcResponseTimePerIterationPerPortResult ORDER BY DataSetId,Port</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_MaxRequestTime</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>65535.0</instance>
        <instance>65535.0</instance>
        <instance>65535.0</instance>
        <instance>65535.0</instance>
        <instance>65535.0</instance>
        <instance>65535.0</instance>
        <instance>65535.0</instance>
        <instance>65535.0</instance>
      </value>
      <path>SELECT MaxPri0RequestPauseTime, MaxPri1RequestPauseTime, MaxPri2RequestPauseTime, MaxPri3RequestPauseTime, MaxPri4RequestPauseTime, MaxPri5RequestPauseTime, MaxPri6RequestPauseTime, MaxPri7RequestPauseTime FROM DcbPfcResponseTimePerIterationResult ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_ResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>3.584e-07</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(Pri0ResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri0ResponseTime, COALESCE(Pri1ResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri1ResponseTime, COALESCE(Pri2ResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri2ResponseTime, COALESCE(Pri3ResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri3ResponseTime, COALESCE(Pri4ResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri4ResponseTime, COALESCE(Pri5ResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri5ResponseTime, COALESCE(Pri6ResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri6ResponseTime, COALESCE(Pri7ResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri7ResponseTime, DataSetId AS DataSetId FROM DcbPfcResponseTimePerIterationPerPortResult ORDER BY DataSetId, Port</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_RequestedPauseTime</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.003355392</instance>
        <instance>0.003355392</instance>
        <instance>0.003355392</instance>
        <instance>0.003355392</instance>
        <instance>0.003355392</instance>
        <instance>0.003355392</instance>
        <instance>0.003355392</instance>
        <instance>0.003355392</instance>
        <instance>1.0</instance>
      </value>
      <path>SELECT (Pri0RequestPauseTime * 512.0 / PortSpeedInBps) AS Pri0RequestPauseTime, (Pri1RequestPauseTime * 512.0 / PortSpeedInBps) AS Pri1RequestPauseTime, (Pri2RequestPauseTime * 512.0 / PortSpeedInBps) AS Pri2RequestPauseTime, (Pri3RequestPauseTime * 512.0 / PortSpeedInBps) AS Pri3RequestPauseTime, (Pri4RequestPauseTime * 512.0 / PortSpeedInBps) AS Pri4RequestPauseTime, (Pri5RequestPauseTime * 512.0 / PortSpeedInBps) AS Pri5RequestPauseTime, (Pri6RequestPauseTime * 512.0 / PortSpeedInBps) AS Pri6RequestPauseTime, (Pri7RequestPauseTime * 512.0 / PortSpeedInBps) AS Pri7RequestPauseTime, DataSetId AS DataSetId FROM DcbPfcResponseTimePerIterationPerPortResult ORDER BY DataSetId, Port</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_ActualPauseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>0.0033554944</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(Pri0ActualPauseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri0ActualPauseTime, COALESCE(Pri1ActualPauseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri1ActualPauseTime, COALESCE(Pri2ActualPauseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri2ActualPauseTime, COALESCE(Pri3ActualPauseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri3ActualPauseTime, COALESCE(Pri4ActualPauseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri4ActualPauseTime, COALESCE(Pri5ActualPauseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri5ActualPauseTime, COALESCE(Pri6ActualPauseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri6ActualPauseTime, COALESCE(Pri7ActualPauseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri7ActualPauseTime, DataSetId AS DataSetId FROM DcbPfcResponseTimePerIterationPerPortResult ORDER BY DataSetId, Port</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_XonResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>0.0</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(Pri0XonResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri0XonResponseTime, COALESCE(Pri1XonResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri1XonResponseTime, COALESCE(Pri2XonResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri2XonResponseTime, COALESCE(Pri3XonResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri3XonResponseTime, COALESCE(Pri4XonResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri4XonResponseTime, COALESCE(Pri5XonResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri5XonResponseTime, COALESCE(Pri6XonResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri6XonResponseTime, COALESCE(Pri7XonResponseTime * 512.0 / PortSpeedInBps, 'N/A') AS Pri7XonResponseTime, DataSetId AS DataSetId FROM DcbPfcResponseTimePerIterationPerPortResult ORDER BY DataSetId, Port</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>NumTrafficGroups</name>
      <persist>false</persist>
      <value type="strings">
        <instance>2</instance>
      </value>
      <path>SELECT COUNT(*) FROM (SELECT DISTINCT TrafficGroupName FROM DcbTrafficGroupPerIterationResult)</path>
      <multivalued>true</multivalued>
      <pageName>Trial Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>NumTrials</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
      </value>
      <path>SELECT MAX(TrialNum) FROM DcbPfcResponseTimePerIterationResult</path>
      <multivalued>true</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>NumIterations</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
      </value>
      <path>SELECT COUNT(*) FROM DcbPfcResponseTimePerIterationResult</path>
      <multivalued>true</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_DataSetIds</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
      </value>
      <path>SELECT DataSetId - 1 FROM DcbPfcResponseTimePerIterationResult</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum_ResponseTimeSum</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>7.0</instance>
        <instance>7.0</instance>
        <instance>7.0</instance>
      </value>
      <path>SELECT MIN(MinPauseTime) AS MinPauseTime, MAX(MaxPauseTime) AS MaxPauseTime, AVG(AvgPauseTime) AS AvgPauseTime FROM ( SELECT MIN(DataSetId) AS DataSetId, MIN(MinPri0ResponseTime) AS MinPauseTime, MAX(MaxPri0ResponseTime) AS MaxPauseTime, AVG(AvgPri0ResponseTime) AS AvgPauseTime FROM DcbPfcResponseTimePerIterationResult GROUP BY LoopKey UNION ALL SELECT MIN(DataSetId) AS DataSetId, MIN(MinPri1ResponseTime) AS MinPauseTime, MAX(MaxPri1ResponseTime) AS MaxPauseTime, AVG(AvgPri1ResponseTime) AS AvgPauseTime FROM DcbPfcResponseTimePerIterationResult GROUP BY LoopKey UNION ALL SELECT MIN(DataSetId) AS DataSetId, MIN(MinPri2ResponseTime) AS MinPauseTime, MAX(MaxPri2ResponseTime) AS MaxPauseTime, AVG(AvgPri2ResponseTime) AS AvgPauseTime FROM DcbPfcResponseTimePerIterationResult GROUP BY LoopKey UNION ALL SELECT MIN(DataSetId) AS DataSetId, MIN(MinPri3ResponseTime) AS MinPauseTime, MAX(MaxPri3ResponseTime) AS MaxPauseTime, AVG(AvgPri3ResponseTime) AS AvgPauseTime FROM DcbPfcResponseTimePerIterationResult GROUP BY LoopKey UNION ALL SELECT MIN(DataSetId) AS DataSetId, MIN(MinPri4ResponseTime) AS MinPauseTime, MAX(MaxPri4ResponseTime) AS MaxPauseTime, AVG(AvgPri4ResponseTime) AS AvgPauseTime FROM DcbPfcResponseTimePerIterationResult GROUP BY LoopKey UNION ALL SELECT MIN(DataSetId) AS DataSetId, MIN(MinPri5ResponseTime) AS MinPauseTime, MAX(MaxPri5ResponseTime) AS MaxPauseTime, AVG(AvgPri5ResponseTime) AS AvgPauseTime FROM DcbPfcResponseTimePerIterationResult GROUP BY LoopKey UNION ALL SELECT MIN(DataSetId) AS DataSetId, MIN(MinPri6ResponseTime) AS MinPauseTime, MAX(MaxPri6ResponseTime) AS MaxPauseTime, AVG(AvgPri6ResponseTime) AS AvgPauseTime FROM DcbPfcResponseTimePerIterationResult GROUP BY LoopKey UNION ALL SELECT MIN(DataSetId) AS DataSetId, MIN(MinPri7ResponseTime) AS MinPauseTime, MAX(MaxPri7ResponseTime) AS MaxPauseTime, AVG(AvgPri7ResponseTime) AS AvgPauseTime FROM DcbPfcResponseTimePerIterationResult GROUP BY LoopKey ORDER BY MIN(DataSetId) ) GROUP BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_PortName</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Port //2/4</instance>
      </value>
      <path>SELECT Port FROM DcbPfcResponseTimePerIterationPerPortResult</path>
      <multivalued>true</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>TrialSum_VlanPriority</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>3</instance>
      </value>
      <path>SELECT CASE WHEN VlanPriority IS NULL THEN 'N/A' ELSE VlanPriority END AS VlanPriority FROM DcbTrafficGroupPerIterationResult ORDER BY DataSetId, TrafficGroupName</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TrialSum_AvgResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>3.584e-07</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>1</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(ROUND(AVG(Pri0ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri0ResponseTime, COALESCE(ROUND(AVG(Pri1ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri1ResponseTime, COALESCE(ROUND(AVG(Pri2ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri2ResponseTime, COALESCE(ROUND(AVG(Pri3ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri3ResponseTime, COALESCE(ROUND(AVG(Pri4ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri4ResponseTime, COALESCE(ROUND(AVG(Pri5ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri5ResponseTime, COALESCE(ROUND(AVG(Pri6ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri6ResponseTime, COALESCE(ROUND(AVG(Pri7ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri7ResponseTime, tt.DataSetId AS DataSetId, tt.TrialNum AS TrialNum FROM DcbPfcResponseTimePerIterationPerPortResult pt JOIN DcbPfcResponseTimePerIterationResult tt ON pt.DataSetId = tt.DataSetId GROUP BY DataSetId, TrialNum ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TrialSum_AvgXonResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>0.0</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>1</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(ROUND(AVG(Pri0XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri0XonResponseTime, COALESCE(ROUND(AVG(Pri1XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri1XonResponseTime, COALESCE(ROUND(AVG(Pri2XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri2XonResponseTime, COALESCE(ROUND(AVG(Pri3XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri3XonResponseTime, COALESCE(ROUND(AVG(Pri4XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri4XonResponseTime, COALESCE(ROUND(AVG(Pri5XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri5XonResponseTime, COALESCE(ROUND(AVG(Pri6XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri6XonResponseTime, COALESCE(ROUND(AVG(Pri7XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri7XonResponseTime, tt.DataSetId AS DataSetId, tt.TrialNum AS TrialNum FROM DcbPfcResponseTimePerIterationPerPortResult pt JOIN DcbPfcResponseTimePerIterationResult tt ON pt.DataSetId = tt.DataSetId GROUP BY DataSetId, TrialNum ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum_MinResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>3.584e-07</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>DCB Traffic Group Collection - FCoE and DCB Traffic Group Collection - Eth - Frame Size: 128, DCB Traffic Group Collection - FCoE and DCB Traffic Group Collection - Eth - Burst Size: 1, Weighted Load Ratio: 1:1, Load: 100%, PFC Pause Duration: 65535, PFC Quantum: 65535, Pause Rate: 0</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(ROUND(MIN(Pri0ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri0ResponseTime, COALESCE(ROUND(MIN(Pri1ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri1ResponseTime, COALESCE(ROUND(MIN(Pri2ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri2ResponseTime, COALESCE(ROUND(MIN(Pri3ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri3ResponseTime, COALESCE(ROUND(MIN(Pri4ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri4ResponseTime, COALESCE(ROUND(MIN(Pri5ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri5ResponseTime, COALESCE(ROUND(MIN(Pri6ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri6ResponseTime, COALESCE(ROUND(MIN(Pri7ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri7ResponseTime, tt.LoopKey AS LoopKey, tt.DataSetId AS DataSetId FROM DcbPfcResponseTimePerIterationPerPortResult pt JOIN DcbPfcResponseTimePerIterationResult tt ON pt.DataSetId = tt.DataSetId GROUP BY LoopKey ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum_MaxResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>3.584e-07</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>DCB Traffic Group Collection - FCoE and DCB Traffic Group Collection - Eth - Frame Size: 128, DCB Traffic Group Collection - FCoE and DCB Traffic Group Collection - Eth - Burst Size: 1, Weighted Load Ratio: 1:1, Load: 100%, PFC Pause Duration: 65535, PFC Quantum: 65535, Pause Rate: 0</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(ROUND(MAX(Pri0ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri0ResponseTime, COALESCE(ROUND(MAX(Pri1ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri1ResponseTime, COALESCE(ROUND(MAX(Pri2ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri2ResponseTime, COALESCE(ROUND(MAX(Pri3ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri3ResponseTime, COALESCE(ROUND(MAX(Pri4ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri4ResponseTime, COALESCE(ROUND(MAX(Pri5ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri5ResponseTime, COALESCE(ROUND(MAX(Pri6ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri6ResponseTime, COALESCE(ROUND(MAX(Pri7ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri7ResponseTime, tt.LoopKey AS LoopKey, tt.DataSetId AS DataSetId FROM DcbPfcResponseTimePerIterationPerPortResult pt JOIN DcbPfcResponseTimePerIterationResult tt ON pt.DataSetId = tt.DataSetId GROUP BY LoopKey ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum_AvgResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>3.584e-07</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>DCB Traffic Group Collection - FCoE and DCB Traffic Group Collection - Eth - Frame Size: 128, DCB Traffic Group Collection - FCoE and DCB Traffic Group Collection - Eth - Burst Size: 1, Weighted Load Ratio: 1:1, Load: 100%, PFC Pause Duration: 65535, PFC Quantum: 65535, Pause Rate: 0</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(ROUND(AVG(Pri0ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri0ResponseTime, COALESCE(ROUND(AVG(Pri1ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri1ResponseTime, COALESCE(ROUND(AVG(Pri2ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri2ResponseTime, COALESCE(ROUND(AVG(Pri3ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri3ResponseTime, COALESCE(ROUND(AVG(Pri4ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri4ResponseTime, COALESCE(ROUND(AVG(Pri5ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri5ResponseTime, COALESCE(ROUND(AVG(Pri6ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri6ResponseTime, COALESCE(ROUND(AVG(Pri7ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri7ResponseTime, tt.LoopKey AS LoopKey, tt.DataSetId AS DataSetId FROM DcbPfcResponseTimePerIterationPerPortResult pt JOIN DcbPfcResponseTimePerIterationResult tt ON pt.DataSetId = tt.DataSetId GROUP BY LoopKey ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum_MinXonResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>0.0</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>DCB Traffic Group Collection - FCoE and DCB Traffic Group Collection - Eth - Frame Size: 128, DCB Traffic Group Collection - FCoE and DCB Traffic Group Collection - Eth - Burst Size: 1, Weighted Load Ratio: 1:1, Load: 100%, PFC Pause Duration: 65535, PFC Quantum: 65535, Pause Rate: 0</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(ROUND(MIN(Pri0XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri0XonResponseTime, COALESCE(ROUND(MIN(Pri1XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri1XonResponseTime, COALESCE(ROUND(MIN(Pri2XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri2XonResponseTime, COALESCE(ROUND(MIN(Pri3XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri3XonResponseTime, COALESCE(ROUND(MIN(Pri4XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri4XonResponseTime, COALESCE(ROUND(MIN(Pri5XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri5XonResponseTime, COALESCE(ROUND(MIN(Pri6XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri6XonResponseTime, COALESCE(ROUND(MIN(Pri7XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri7XonResponseTime, tt.LoopKey AS LoopKey, tt.DataSetId AS DataSetId FROM DcbPfcResponseTimePerIterationPerPortResult pt JOIN DcbPfcResponseTimePerIterationResult tt ON pt.DataSetId = tt.DataSetId GROUP BY LoopKey ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum_MaxXonResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>0.0</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>DCB Traffic Group Collection - FCoE and DCB Traffic Group Collection - Eth - Frame Size: 128, DCB Traffic Group Collection - FCoE and DCB Traffic Group Collection - Eth - Burst Size: 1, Weighted Load Ratio: 1:1, Load: 100%, PFC Pause Duration: 65535, PFC Quantum: 65535, Pause Rate: 0</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(ROUND(MAX(Pri0XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri0XonResponseTime, COALESCE(ROUND(MAX(Pri1XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri1XonResponseTime, COALESCE(ROUND(MAX(Pri2XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri2XonResponseTime, COALESCE(ROUND(MAX(Pri3XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri3XonResponseTime, COALESCE(ROUND(MAX(Pri4XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri4XonResponseTime, COALESCE(ROUND(MAX(Pri5XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri5XonResponseTime, COALESCE(ROUND(MAX(Pri6XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri6XonResponseTime, COALESCE(ROUND(MAX(Pri7XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri7XonResponseTime, tt.LoopKey AS LoopKey, tt.DataSetId AS DataSetId FROM DcbPfcResponseTimePerIterationPerPortResult pt JOIN DcbPfcResponseTimePerIterationResult tt ON pt.DataSetId = tt.DataSetId GROUP BY LoopKey ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum_AvgXonResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>0.0</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>DCB Traffic Group Collection - FCoE and DCB Traffic Group Collection - Eth - Frame Size: 128, DCB Traffic Group Collection - FCoE and DCB Traffic Group Collection - Eth - Burst Size: 1, Weighted Load Ratio: 1:1, Load: 100%, PFC Pause Duration: 65535, PFC Quantum: 65535, Pause Rate: 0</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(ROUND(AVG(Pri0XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri0XonResponseTime, COALESCE(ROUND(AVG(Pri1XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri1XonResponseTime, COALESCE(ROUND(AVG(Pri2XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri2XonResponseTime, COALESCE(ROUND(AVG(Pri3XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri3XonResponseTime, COALESCE(ROUND(AVG(Pri4XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri4XonResponseTime, COALESCE(ROUND(AVG(Pri5XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri5XonResponseTime, COALESCE(ROUND(AVG(Pri6XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri6XonResponseTime, COALESCE(ROUND(AVG(Pri7XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS AvgPri7XonResponseTime, tt.LoopKey AS LoopKey, tt.DataSetId AS DataSetId FROM DcbPfcResponseTimePerIterationPerPortResult pt JOIN DcbPfcResponseTimePerIterationResult tt ON pt.DataSetId = tt.DataSetId GROUP BY LoopKey ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TrialSum_MinResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>3.584e-07</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>1</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(ROUND(MIN(Pri0ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri0ResponseTime, COALESCE(ROUND(MIN(Pri1ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri1ResponseTime, COALESCE(ROUND(MIN(Pri2ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri2ResponseTime, COALESCE(ROUND(MIN(Pri3ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri3ResponseTime, COALESCE(ROUND(MIN(Pri4ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri4ResponseTime, COALESCE(ROUND(MIN(Pri5ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri5ResponseTime, COALESCE(ROUND(MIN(Pri6ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri6ResponseTime, COALESCE(ROUND(MIN(Pri7ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri7ResponseTime, tt.DataSetId AS DataSetId, tt.TrialNum AS TrialNum FROM DcbPfcResponseTimePerIterationPerPortResult pt JOIN DcbPfcResponseTimePerIterationResult tt ON pt.DataSetId = tt.DataSetId GROUP BY DataSetId, TrialNum ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TrialSum_MaxResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>3.584e-07</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>1</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(ROUND(MAX(Pri0ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri0ResponseTime, COALESCE(ROUND(MAX(Pri1ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri1ResponseTime, COALESCE(ROUND(MAX(Pri2ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri2ResponseTime, COALESCE(ROUND(MAX(Pri3ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri3ResponseTime, COALESCE(ROUND(MAX(Pri4ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri4ResponseTime, COALESCE(ROUND(MAX(Pri5ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri5ResponseTime, COALESCE(ROUND(MAX(Pri6ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri6ResponseTime, COALESCE(ROUND(MAX(Pri7ResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri7ResponseTime, tt.DataSetId AS DataSetId, tt.TrialNum AS TrialNum FROM DcbPfcResponseTimePerIterationPerPortResult pt JOIN DcbPfcResponseTimePerIterationResult tt ON pt.DataSetId = tt.DataSetId GROUP BY DataSetId, TrialNum ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TrialSum_MinXonResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>0.0</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>1</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(ROUND(MIN(Pri0XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri0XonResponseTime, COALESCE(ROUND(MIN(Pri1XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri1XonResponseTime, COALESCE(ROUND(MIN(Pri2XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri2XonResponseTime, COALESCE(ROUND(MIN(Pri3XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri3XonResponseTime, COALESCE(ROUND(MIN(Pri4XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri4XonResponseTime, COALESCE(ROUND(MIN(Pri5XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri5XonResponseTime, COALESCE(ROUND(MIN(Pri6XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri6XonResponseTime, COALESCE(ROUND(MIN(Pri7XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MinPri7XonResponseTime, tt.DataSetId AS DataSetId, tt.TrialNum AS TrialNum FROM DcbPfcResponseTimePerIterationPerPortResult pt JOIN DcbPfcResponseTimePerIterationResult tt ON pt.DataSetId = tt.DataSetId GROUP BY DataSetId, TrialNum ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TrialSum_MaxXonResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>0.0</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>1</instance>
        <instance>1</instance>
      </value>
      <path>SELECT COALESCE(ROUND(MAX(Pri0XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri0XonResponseTime, COALESCE(ROUND(MAX(Pri1XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri1XonResponseTime, COALESCE(ROUND(MAX(Pri2XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri2XonResponseTime, COALESCE(ROUND(MAX(Pri3XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri3XonResponseTime, COALESCE(ROUND(MAX(Pri4XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri4XonResponseTime, COALESCE(ROUND(MAX(Pri5XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri5XonResponseTime, COALESCE(ROUND(MAX(Pri6XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri6XonResponseTime, COALESCE(ROUND(MAX(Pri7XonResponseTime),2) * 512 / pt.PortSpeedInBps, 'N/A') AS MaxPri7XonResponseTime, tt.DataSetId AS DataSetId, tt.TrialNum AS TrialNum FROM DcbPfcResponseTimePerIterationPerPortResult pt JOIN DcbPfcResponseTimePerIterationResult tt ON pt.DataSetId = tt.DataSetId GROUP BY DataSetId, TrialNum ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_Ports</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Port //2/4</instance>
      </value>
      <path>SELECT DISTINCT Port FROM DcbPfcResponseTimePerIterationPerPortResult</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>PfcTxQuantum</name>
      <persist>false</persist>
      <value type="strings">
        <instance>65535</instance>
      </value>
      <path>SELECT PfcTxQuantum FROM DcbPfcResponseTimePerIterationResult</path>
      <multivalued>true</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>PfcTxXonDelay</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <path>SELECT CASE WHEN PfcTxXonEnabled = 1 THEN PfcTxXonDelay ELSE 'N/A' END AS PfcTxXonDelay FROM DcbPfcResponseTimePerIterationResult</path>
      <multivalued>true</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>ResultScalar</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1.0</instance>
      </value>
      <path>SELECT '1.0'</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>ResultUnits</name>
      <persist>false</persist>
      <value type="strings">
        <instance>seconds</instance>
      </value>
      <path>SELECT 'seconds'</path>
      <multivalued>true</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Trial Summary,Test Summary,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_TrialNum</name>
      <persist>true</persist>
      <value type="strings">
        <instance>1</instance>
      </value>
      <path>SELECT TrialNum FROM DcbPfcResponseTimePerIterationResult D, DcbPfcResponseTimePerIterationPerPortResult P WHERE D.DataSetId = P.DataSetId ORDER BY P.DataSetId,Port</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
  </reported>
  <computed>
    <instance>
      <name>ReportDate</name>
      <persist>false</persist>
      <value type="String">2010-10-12 10:22:57 PDT</value>
      <script><![CDATA[# generate the current date&#xa;set systemTime [clock seconds]&#xa;set result [clock format $systemTime -format "%Y-%m-%d %H:%M:%S  %Z"]]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestStartDate</name>
      <persist>false</persist>
      <value type="String">2010-09-30 14:53:33 PDT</value>
      <script><![CDATA[# generate the report start time - must convert FROM GMT to local time&#xa;#  - test time is stored as 2007-01-15 19:50:39 gmt&#xa;#  - must convert to "mm/dd/yyyy hh:mm:ss GMT" format&#xa;#  - then must convert to local time&#xa;&#xa;#clear the return "result"  list in case it was used before&#xa;set  result {}&#xa;&#xa;set  dateSplit [split $tstStartDate -]&#xa;&#xa;set yy [lindex $dateSplit 0]&#xa;set mm [lindex $dateSplit 1]&#xa;set rest [lindex $dateSplit 2]&#xa;&#xa;set timeSplit [split $rest]&#xa;set dd [lindex $timeSplit 0]&#xa;set time [lindex $timeSplit 1]&#xa;&#xa;#set result "$mm/$dd/$yy $time"&#xa;set formattedDate "$mm/$dd/$yy $time GMT"&#xa;&#xa;#set result $formattedDate&#xa;&#xa;set testTime [clock scan $formattedDate]&#xa;set result [clock format $testTime -format "%Y-%m-%d %H:%M:%S  %Z"]&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Title</pageName>
    </instance>
    <instance>
      <name>TestEndDate</name>
      <persist>false</persist>
      <value type="String">-</value>
      <script><![CDATA[# generate the report end time - must convert FROM GMT to local time&#xa;#  - test time is stored as 2007-01-15 19:50:39 gmt&#xa;#  - must convert to "mm/dd/yyyy hh:mm:ss GMT" format&#xa;#  - then must convert to local time&#xa;&#xa;#clear the return "result"  list in case it was used before&#xa;set  result {}&#xa;&#xa;set  dateSplit [split $tstEndDate -]&#xa;&#xa;set yy [lindex $dateSplit 0]&#xa;set mm [lindex $dateSplit 1]&#xa;set rest [lindex $dateSplit 2]&#xa;&#xa;set timeSplit [split $rest]&#xa;set dd [lindex $timeSplit 0]&#xa;set time [lindex $timeSplit 1]&#xa;&#xa;#set result "$mm/$dd/$yy $time"&#xa;set formattedDate "$mm/$dd/$yy $time GMT"&#xa;&#xa;#set result $formattedDate&#xa;&#xa;set testTime [clock scan $formattedDate]&#xa;set result [clock format $testTime -format "%Y-%m-%d %H:%M:%S  %Z"]&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>CounterModeType</name>
      <persist>false</persist>
      <value type="String">Latency_jitter</value>
      <script><![CDATA[# Determine counter mode&#xa;&#xa;set str [string range $CounterMode 0 0]&#xa;set str [string toupper $str]&#xa;set str2 [string range $CounterMode 1 end]&#xa;set result $str$str2]]></script>
      <multivalued>false</multivalued>
      <pageName>Title</pageName>
    </instance>
    <instance>
      <name>RRTemplateSavedTimestampMS</name>
      <persist>true</persist>
      <value type="String">1286581352184</value>
      <script><![CDATA[set result "1286904471832"]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>RRTemplateSavedTimestamp</name>
      <persist>true</persist>
      <value type="String">Fri Oct 08 16:42:32.184 PDT 2010</value>
      <script><![CDATA[set result "Tue Oct 12 10:27:51.832 PDT 2010"]]></script>
      <multivalued>false</multivalued>
      <pageName>Version</pageName>
    </instance>
    <instance>
      <name>TrialSum.FS</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>128.0</instance>
        <instance>128.0</instance>
      </value>
      <script><![CDATA[# Calculate trial summary results frame size values&#xa;set result [list]&#xa;&#xa;catch { array unset TrialSumData }&#xa;set cols [list TrialNum TrafficGroupName Fs Intended Offered PfcCount TxFrameCount RxFrameCount ExpectedRxFrameCount DroppedFramePct  BS MinLatency AvgLatency MaxLatency PfcTxQuantum PfcTxXonDelay PfcTxPauseRate IsConformant ]&#xa;&#xa;foreach col $cols {&#xa;   set TrialSumData($col) [list]&#xa;}&#xa;&#xa;foreach row $TrialSum {&#xa;   set rowList [split $row "^"]&#xa;   foreach col $cols value $rowList {&#xa;      lappend TrialSumData($col) $value&#xa;   }&#xa;}&#xa;&#xa;set result $TrialSumData(Fs)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.TrafficGroup</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>Eth</instance>
        <instance>FCoE</instance>
      </value>
      <script><![CDATA[# Calculate trial summary traffic group&#xa;set result $TrialSumData(TrafficGroupName)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.MinLatency</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.66</instance>
        <instance>0.66</instance>
        <instance>3.55</instance>
      </value>
      <script><![CDATA[# Calculate trial summary MinLatency&#xa;set result $TrialSumData(MinLatency)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.AvgLatency</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>311.449848954576</instance>
        <instance>343.198413817041</instance>
        <instance>279.694479919234</instance>
      </value>
      <script><![CDATA[# Calculate trial summary AvgLatency&#xa;set result $TrialSumData(AvgLatency)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.MaxLatency</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>3704.78</instance>
        <instance>369.52</instance>
        <instance>3704.78</instance>
      </value>
      <script><![CDATA[# Calculate trial summary MaxLatency&#xa;set result $TrialSumData(MaxLatency)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.PfcTxQuantum</name>
      <persist>false</persist>
      <value type="strings">
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[# Calculate trial summary Pfc Tx Quantum&#xa;set result $TrialSumData(PfcTxQuantum)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.PfcTxXonDelay</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[# Calculate trial summary Pfc Tx Xon Delay&#xa;set result $TrialSumData(PfcTxXonDelay)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.PfcTxPauseRate</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[# Calculate trial summary Pfc Tx Pause Rate&#xa;set result $TrialSumData(PfcTxPauseRate)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.Intended</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>50.0</instance>
        <instance>49.999</instance>
      </value>
      <script><![CDATA[# Calculate trial summary Intended&#xa;set result $TrialSumData(Intended)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.Offered</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>50.0</instance>
        <instance>50.0</instance>
      </value>
      <script><![CDATA[# Calculate trial summary Offered&#xa;set result $TrialSumData(Offered)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.TrialNum</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[# Calculate trial summary Qput&#xa;set result $TrialSumData(TrialNum)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.PfcTriggerCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[# Calculate trial summary PfcCount&#xa;set result $TrialSumData(PfcCount)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.TxFrameCount</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>5.195531E8</instance>
        <instance>3.99234509E8</instance>
        <instance>1.20318591E8</instance>
      </value>
      <script><![CDATA[# Calculate trial summary TxFrameCount&#xa;set result $TrialSumData(TxFrameCount)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.RxFrameCount</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>2.40662968E8</instance>
        <instance>1.20344377E8</instance>
        <instance>1.20318591E8</instance>
      </value>
      <script><![CDATA[# Calculate trial summary RxFrameCount&#xa;set result $TrialSumData(RxFrameCount)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.ExpectedRxFrameCount</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>5.195531E8</instance>
        <instance>3.99234509E8</instance>
        <instance>1.20318591E8</instance>
      </value>
      <script><![CDATA[# Calculate trial summary ExpectedRxFrameCount&#xa;set result $TrialSumData(ExpectedRxFrameCount)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.DroppedFramePct</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>53.6788505352004</instance>
        <instance>69.8562187669002</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[# Calculate trial summary DroppedFramePct&#xa;set result $TrialSumData(DroppedFramePct)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>NotsupportedStr</name>
      <persist>false</persist>
      <value type="String">Note: This result view mode does not support Interarrival Time measurements</value>
      <script><![CDATA[if {$ResultViewMode == "JITTER" || $ResultViewMode == "LATENCY_JITTER"} {&#xa;set result "Note: This result view mode does not support Interarrival Time measurements"&#xa;} elseif  {$ResultViewMode == "BASIC" || $ResultViewMode == "HISTOGRAM"} {&#xa;set result "Note: This result view mode does not support Jitter and Interarrival Time measurements"&#xa;} elseif  {$ResultViewMode == "INTERARRIVALTIME" } {&#xa;set result "Note: This result view mode does not support Jitter measurements"&#xa;} elseif  {$ResultViewMode == "FORWARDING" } {&#xa;set result "Note: This result view mode does not support Latency and Jitter measurements"&#xa;} else {&#xa;set result " "&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.BS</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
      </value>
      <script><![CDATA[# Calculate trial summary traffic group&#xa;set result $TrialSumData(BS)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>RRReportGenerationTime</name>
      <persist>true</persist>
      <value type="String">Thu Aug 06 11:46:25.425 PDT 2009</value>
      <script><![CDATA[set RRReportGenerationTime "Thu Aug 06 11:46:25.425 PDT 2009" &#xa;set result $RRReportGenerationTime &#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>RRUserNotes</name>
      <persist>true</persist>
      <value type="String">No User Notes Exist</value>
      <script><![CDATA[set strFrontPageText "" &#xa;set strFrontPageFormattedText "No User Notes Exist" &#xa;set strFormattedKey "" &#xa;set strFormattedValue "" &#xa;set isFirst 1 &#xa;if {[info exists RRUserNotesTable]} {&#xa;set strFrontPageFormattedText "" &#xa;foreach {KeyAndValue} $RRUserNotesTable { &#xa;      if {!$isFirst} { &#xa;      set KeyAndValue [string trim $KeyAndValue {[],}] &#xa;      regsub  {,} $KeyAndValue ":" KeyAndValueFinal &#xa;      set strFrontPageFormattedText "$strFrontPageFormattedText$KeyAndValueFinal\n&#xa;" &#xa;    } &#xa;    set isFirst 0 &#xa;} &#xa;set RRUserNotes $strFrontPageFormattedText &#xa;}&#xa;set result $strFrontPageFormattedText &#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>RRFrontPageText</name>
      <persist>true</persist>
      <value type="String">-</value>
      <script><![CDATA[set result "Test Duration: $RRTestDurationTime msec\nReport Generation Time: $RRReportGenerationTime\nTest State: $RRTestState\n$RRUserNotes"]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum.FS</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>128.0</instance>
        <instance>128.0</instance>
      </value>
      <script><![CDATA[# Calculate trial summary results frame size values&#xa;set result [list]&#xa;&#xa;catch { array unset TestSumData }&#xa;set cols [list Datasetid TrafficGroupName Fs Bs Intended PfcTxQuantum PfcTxXonDelay PfcTxPauseRate DroppedFramePct  PfcCount MinLatency AvgLatency MaxLatency MinJitter AvgJitter MaxJitter MinTime AvgTime MaxTime Tx Rx ExpectedRx]&#xa;&#xa;foreach col $cols {&#xa;   set TestSumData($col) [list]&#xa;}&#xa;&#xa;foreach row $TestSum {&#xa;   set rowList [split $row "^"]&#xa;   foreach col $cols value $rowList {&#xa;      lappend TestSumData($col) $value&#xa;   }&#xa;}&#xa;&#xa;set result $TestSumData(Fs)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.TG</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>Eth</instance>
        <instance>FCoE</instance>
      </value>
      <script><![CDATA[# Calculate test summary traffic group&#xa;set result $TestSumData(TrafficGroupName)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.IL</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>50.0</instance>
        <instance>49.999</instance>
      </value>
      <script><![CDATA[# Calculate test summary traffic group&#xa;set result $TestSumData(Intended)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.BS</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
      </value>
      <script><![CDATA[# Calculate test summary traffic group&#xa;set result $TestSumData(Bs)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcTxQuantum</name>
      <persist>false</persist>
      <value type="strings">
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[# Calculate test summary Pfc Tx Quantum&#xa;set result $TestSumData(PfcTxQuantum)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcTxXonDelay</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[# Calculate test summary Pfc Tx Xon Delay&#xa;set result $TestSumData(PfcTxXonDelay)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcTxPauseRate</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[# Calculate test summary Pfc Tx Pause Rate&#xa;set result $TestSumData(PfcTxPauseRate)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum.DroppedFramePct</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>53.6788505352004</instance>
        <instance>69.8562187669002</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[# Calculate test summary Dropped Frame Pct&#xa;set result $TestSumData(DroppedFramePct)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcTriggerCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[# Calculate test summary Pfc Count&#xa;set result $TestSumData(PfcCount)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MinLatency</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.66</instance>
        <instance>0.66</instance>
        <instance>3.55</instance>
      </value>
      <script><![CDATA[# Calculate test summary Min Latency&#xa;set result $TestSumData(MinLatency)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.AvgLatency</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>311.44985</instance>
        <instance>343.198413817041</instance>
        <instance>279.694479919234</instance>
      </value>
      <script><![CDATA[# Calculate test summary Avg Latency&#xa;set result $TestSumData(AvgLatency)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MaxLatency</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>3704.78</instance>
        <instance>369.52</instance>
        <instance>3704.78</instance>
      </value>
      <script><![CDATA[# Calculate test summary Max Latency&#xa;set result $TestSumData(MaxLatency)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MinJitter</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[# Calculate test summary Min Jitter&#xa;set result $TestSumData(MinJitter)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.AvgJitter</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>5.62</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[# Calculate test summary Avg Jitter&#xa;set result $TestSumData(AvgJitter)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MaxJitter</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>3530.1</instance>
        <instance>27.54</instance>
        <instance>3530.1</instance>
      </value>
      <script><![CDATA[# Calculate test summary Max Jitter&#xa;set result $TestSumData(MaxJitter)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.TrafficConfig</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[set result [list]&#xa;set temp $TestSumData(TrafficGroupName)&#xa;set count 0&#xa;foreach tg $temp {&#xa;if { $tg==" " } {&#xa;incr count&#xa;lappend result $count&#xa;} else {&#xa;lappend result " "&#xa;}&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.Rx</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>2.40662968E8</instance>
        <instance>1.20344377E8</instance>
        <instance>1.20318591E8</instance>
      </value>
      <script><![CDATA[# Calculate test summary rx frame count&#xa;set result $TestSumData(Rx)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.Tx</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>5.195531E8</instance>
        <instance>3.99234509E8</instance>
        <instance>1.20318591E8</instance>
      </value>
      <script><![CDATA[# Calculate test summary rx frame count&#xa;set result $TestSumData(Tx)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.ExpectedRx</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>5.195531E8</instance>
        <instance>3.99234509E8</instance>
        <instance>1.20318591E8</instance>
      </value>
      <script><![CDATA[# Calculate test summary rx frame count&#xa;set result $TestSumData(ExpectedRx)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.PfcTotalQuanta</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>1222939473</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;set tempTGList $TrialSumData(TrafficGroupName) &#xa;set tempquantaList $TrialSum_PfcTotalQuanta&#xa;set count 0&#xa;foreach tg $tempTGList {&#xa;if { $tg==" " } {&#xa;lappend result " "&#xa;} else {&#xa;lappend result [ lindex $tempquantaList $count ]&#xa;incr count&#xa;}&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.PfcRxFrameCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>8639487</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;set tempTGList $TrialSumData(TrafficGroupName) &#xa;set tempquantaList $TrialSum_PfcRxFrameCount&#xa;set count 0&#xa;foreach tg $tempTGList {&#xa;if { $tg==" " } {&#xa;lappend result " "&#xa;} else {&#xa;lappend result [ lindex $tempquantaList $count ]&#xa;incr count&#xa;}&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcTotalQuanta</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>1222939473</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;set tempTGList $TestSumData(TrafficGroupName) &#xa;set tempquantaList $TestSum_PfcRxQuanta&#xa;set count 0&#xa;foreach tg $tempTGList {&#xa;if { $tg==" " } {&#xa;lappend result " "&#xa;} else {&#xa;lappend result [ lindex $tempquantaList $count ]&#xa;incr count&#xa;}&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcRxFrameCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>8639487</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;set tempTGList $TestSumData(TrafficGroupName) &#xa;set tempquantaList $TestSum_PfcRxFrameCount&#xa;set count 0&#xa;foreach tg $tempTGList {&#xa;if { $tg==" " } {&#xa;lappend result " "&#xa;} else {&#xa;lappend result [ lindex $tempquantaList $count ]&#xa;incr count&#xa;}&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MinInterarrivalTime</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[# Calculate test summary Min Interarrival Time&#xa;set result $TestSumData(MinTime)]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.AvgInterarrivalTime</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[# Calculate test summary Max Interarrival Time&#xa;set result $TestSumData(MaxTime)]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MaxInterarrivalTime</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[# Calculate test summary Max Interarrival Time&#xa;set result $TestSumData(MaxTime)]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcQuanta_NonZero</name>
      <persist>false</persist>
      <value type="strings">
        <instance>{0, 1, 2, 3, 4, 5, 6, 7}</instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[&#xa;proc processRow {row} {&#xa;   set rowResult [list]&#xa;   set colResult [list]&#xa;&#xa;   for {set i 0} {$i < 8} {incr i} {&#xa;      set value [string trimleft [string trimright [lindex $row $i] ",\]"] "\["]&#xa;      #lappend colResult $value&#xa;      if {$value > 0} {&#xa;         lappend colResult $i&#xa;      }&#xa;   }&#xa;&#xa;   if {[llength $colResult] > 0} {&#xa;      lappend rowResult [join $colResult ", "]&#xa;   } else {&#xa;      lappend rowResult "None"&#xa;   }&#xa;  &#xa;   return $rowResult&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxRequestTime 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MaxRequestTime 1 end] {&#xa;      lappend result [processRow $row]&#xa;   &#xa;      for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;         lappend result [list]&#xa;      }&#xa;   }&#xa;} else {&#xa;   lappend result [processRow $Priority_MaxRequestTime]&#xa;&#xa;   for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;      lappend result [list]&#xa;   }&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>Priority_TrafficConfig</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>1.0</instance>
      </value>
      <script><![CDATA[&#xa;set result [list]&#xa;&#xa;set numConfigs [format %g [expr ceil($NumIterations / $NumTrials)]]&#xa;&#xa;foreach item $Priority_DataSetIds {&#xa;   foreach port $Priority_Ports {&#xa;      set item [format %g $item]&#xa;      lappend result [expr ($item % $numConfigs)  + 1]&#xa;   }&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>TrialSum.IsConformant</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>True</instance>
        <instance>True</instance>
      </value>
      <script><![CDATA[set result $TrialSumData(IsConformant)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MinResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>3.584e-007</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $TestSum_MinResponseTime&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   &#xa;   set index 0&#xa;   &#xa;   foreach row [lrange $dataSet 1 end] {&#xa;&#xa;         if {[expr $index % $NumTrafficGroups] == 0} { lappend result [list] }&#xa;&#xa;         for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;            set column [lindex $TrialSum_VlanPriority $i]&#xa;            lappend result [getValue $row $column]&#xa;            incr index&#xa;         }&#xa;    }&#xa;&#xa;} else {&#xa;      lappend result [list]&#xa;      for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;         set column [lindex $TrialSum_VlanPriority $i]&#xa;         lappend result [getValue $dataSet $column]&#xa;      }&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MaxResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>3.584e-007</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $TestSum_MaxResponseTime&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   &#xa;   set index 0&#xa;   &#xa;   foreach row [lrange $dataSet 1 end] {&#xa;&#xa;         if {[expr $index % $NumTrafficGroups] == 0} { lappend result [list] }&#xa;&#xa;         for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;            set column [lindex $TrialSum_VlanPriority $i]&#xa;            lappend result [getValue $row $column]&#xa;            incr index&#xa;         }&#xa;    }&#xa;&#xa;} else {&#xa;      lappend result [list]&#xa;      for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;         set column [lindex $TrialSum_VlanPriority $i]&#xa;         lappend result [getValue $dataSet $column]&#xa;      }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.AvgResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>3.584e-007</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $TestSum_AvgResponseTime&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   &#xa;   set index 0&#xa;   &#xa;   foreach row [lrange $dataSet 1 end] {&#xa;&#xa;         if {[expr $index % $NumTrafficGroups] == 0} { lappend result [list] }&#xa;&#xa;         for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;            set column [lindex $TrialSum_VlanPriority $i]&#xa;            lappend result [getValue $row $column]&#xa;            incr index&#xa;         }&#xa;    }&#xa;&#xa;} else {&#xa;      lappend result [list]&#xa;      for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;         set column [lindex $TrialSum_VlanPriority $i]&#xa;         lappend result [getValue $dataSet $column]&#xa;      }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>Priority_TxPriFrameCount.0</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>1.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_TxPriFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_TxPriFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_TxPriFrameCount $column] ",\]"] "\["]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 0</pageName>
    </instance>
    <instance>
      <name>Priority_TxPriFrameCount.1</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>1.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 1&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_TxPriFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_TxPriFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_TxPriFrameCount $column] ",\]"] "\["]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_TxPriFrameCount.2</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>1.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 2&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_TxPriFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_TxPriFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_TxPriFrameCount $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 2</pageName>
    </instance>
    <instance>
      <name>Priority_TxPriFrameCount.3</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>1.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_TxPriFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_TxPriFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_TxPriFrameCount $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3</pageName>
    </instance>
    <instance>
      <name>Priority_TxPriFrameCount.4</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>1.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 4&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_TxPriFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_TxPriFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_TxPriFrameCount $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 4</pageName>
    </instance>
    <instance>
      <name>Priority_TxPriFrameCount.5</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>1.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 5&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_TxPriFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_TxPriFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_TxPriFrameCount $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 5</pageName>
    </instance>
    <instance>
      <name>Priority_TxPriFrameCount.6</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>1.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 6&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_TxPriFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_TxPriFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_TxPriFrameCount $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 6</pageName>
    </instance>
    <instance>
      <name>Priority_TxPriFrameCount.7</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>1.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 7&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_TxPriFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_TxPriFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_TxPriFrameCount $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 7</pageName>
    </instance>
    <instance>
      <name>Priority_ResponseTime.0</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ResponseTime&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 0</pageName>
    </instance>
    <instance>
      <name>Priority_ResponseTime.1</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ResponseTime&#xa;set column 1&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_ResponseTime.2</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ResponseTime&#xa;set column 2&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 2</pageName>
    </instance>
    <instance>
      <name>Priority_ResponseTime.3</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>3.584E-7</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ResponseTime&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3</pageName>
    </instance>
    <instance>
      <name>Priority_ResponseTime.4</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ResponseTime&#xa;set column 4&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 4</pageName>
    </instance>
    <instance>
      <name>Priority_ResponseTime.5</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ResponseTime&#xa;set column 5&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 5</pageName>
    </instance>
    <instance>
      <name>Priority_ResponseTime.6</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ResponseTime&#xa;set column 6&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 6</pageName>
    </instance>
    <instance>
      <name>Priority_ResponseTime.7</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ResponseTime&#xa;set column 7&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 7</pageName>
    </instance>
    <instance>
      <name>Priority_RequestedPauseTime.0</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.003355392</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_RequestedPauseTime&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 0</pageName>
    </instance>
    <instance>
      <name>Priority_RequestedPauseTime.1</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.003355392</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_RequestedPauseTime&#xa;set column 1&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_RequestedPauseTime.2</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.003355392</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_RequestedPauseTime&#xa;set column 2&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 2</pageName>
    </instance>
    <instance>
      <name>Priority_RequestedPauseTime.3</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.003355392</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_RequestedPauseTime&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3</pageName>
    </instance>
    <instance>
      <name>Priority_RequestedPauseTime.4</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.003355392</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_RequestedPauseTime&#xa;set column 4&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 4</pageName>
    </instance>
    <instance>
      <name>Priority_RequestedPauseTime.5</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.003355392</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_RequestedPauseTime&#xa;set column 5&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 5</pageName>
    </instance>
    <instance>
      <name>Priority_RequestedPauseTime.6</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.003355392</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_RequestedPauseTime&#xa;set column 6&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 6</pageName>
    </instance>
    <instance>
      <name>Priority_RequestedPauseTime.7</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.003355392</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_RequestedPauseTime&#xa;set column 7&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 7</pageName>
    </instance>
    <instance>
      <name>Priority_ActualPauseTime.0</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ActualPauseTime&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 0</pageName>
    </instance>
    <instance>
      <name>Priority_ActualPauseTime.1</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ActualPauseTime&#xa;set column 1&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_ActualPauseTime.2</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ActualPauseTime&#xa;set column 2&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 2</pageName>
    </instance>
    <instance>
      <name>Priority_ActualPauseTime.3</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.0033554944</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ActualPauseTime&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3</pageName>
    </instance>
    <instance>
      <name>Priority_ActualPauseTime.4</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ActualPauseTime&#xa;set column 4&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 4</pageName>
    </instance>
    <instance>
      <name>Priority_ActualPauseTime.5</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ActualPauseTime&#xa;set column 5&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 5</pageName>
    </instance>
    <instance>
      <name>Priority_ActualPauseTime.6</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ActualPauseTime&#xa;set column 6&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 6</pageName>
    </instance>
    <instance>
      <name>Priority_ActualPauseTime.7</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_ActualPauseTime&#xa;set column 7&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 7</pageName>
    </instance>
    <instance>
      <name>Priority_XonResponseTime.0</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_XonResponseTime&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 0</pageName>
    </instance>
    <instance>
      <name>Priority_XonResponseTime.1</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_XonResponseTime&#xa;set column 1&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_XonResponseTime.2</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_XonResponseTime&#xa;set column 2&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 2</pageName>
    </instance>
    <instance>
      <name>Priority_XonResponseTime.3</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.0</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_XonResponseTime&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3</pageName>
    </instance>
    <instance>
      <name>Priority_XonResponseTime.4</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_XonResponseTime&#xa;set column 4&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 4</pageName>
    </instance>
    <instance>
      <name>Priority_XonResponseTime.5</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_XonResponseTime&#xa;set column 5&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 5</pageName>
    </instance>
    <instance>
      <name>Priority_XonResponseTime.6</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_XonResponseTime&#xa;set column 6&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 6</pageName>
    </instance>
    <instance>
      <name>Priority_XonResponseTime.7</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Priority_XonResponseTime&#xa;set column 7&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 7</pageName>
    </instance>
    <instance>
      <name>TrialSum.VlanPriority</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>3</instance>
      </value>
      <script><![CDATA[&#xa;proc processRow {row} {&#xa;   set rowResult [list]&#xa;   set colResult [list]&#xa;&#xa;   for {set i 0} {$i < 8} {incr i} {&#xa;      set value [string trimleft [string trimright [lindex $row $i] ",\]"] "\["]&#xa;      #lappend colResult $value&#xa;      if {$value > 0} {&#xa;         lappend colResult $i&#xa;      }&#xa;   }&#xa;&#xa;   if {[llength $colResult] > 0} {&#xa;      lappend rowResult [join $colResult ", "]&#xa;   } else {&#xa;      lappend rowResult "None"&#xa;   }&#xa;  &#xa;   return $rowResult&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxRequestTime 1]&#xa;set grpIndex 0&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MaxRequestTime 1 end] {&#xa;      #lappend result [processRow $row]&#xa;      lappend result [list]&#xa;&#xa;      for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;         lappend result [lindex $TrialSum_VlanPriority $grpIndex]&#xa;         incr grpIndex&#xa;      }&#xa;   }&#xa;} else {&#xa;  # lappend result [processRow $Priority_MaxRequestTime]&#xa;   lappend result [list]&#xa;&#xa;   for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;      lappend result [lindex $TrialSum_VlanPriority $grpIndex]&#xa;      incr grpIndex&#xa;   }&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.AvgResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>3.584e-007</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $TrialSum_AvgResponseTime&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   &#xa;   set index 0&#xa;   &#xa;   foreach row [lrange $dataSet 1 end] {&#xa;&#xa;         if {[expr $index % $NumTrafficGroups] == 0} { lappend result [list] }&#xa;&#xa;         for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;            set column [lindex $TrialSum_VlanPriority $i]&#xa;            lappend result [getValue $row $column]&#xa;            incr index&#xa;         }&#xa;    }&#xa;&#xa;} else {&#xa;      lappend result [list]&#xa;      for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;         set column [lindex $TrialSum_VlanPriority $i]&#xa;         lappend result [getValue $dataSet $column]&#xa;      }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.AvgXonResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $TrialSum_AvgXonResponseTime&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   &#xa;   set index 0&#xa;   &#xa;   foreach row [lrange $dataSet 1 end] {&#xa;&#xa;         if {[expr $index % $NumTrafficGroups] == 0} { lappend result [list] }&#xa;&#xa;         for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;            set column [lindex $TrialSum_VlanPriority $i]&#xa;            lappend result [getValue $row $column]&#xa;            incr index&#xa;         }&#xa;    }&#xa;&#xa;} else {&#xa;      lappend result [list]&#xa;      for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;         set column [lindex $TrialSum_VlanPriority $i]&#xa;         lappend result [getValue $dataSet $column]&#xa;      }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MinXonResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $TestSum_MinXonResponseTime&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   &#xa;   set index 0&#xa;   &#xa;   foreach row [lrange $dataSet 1 end] {&#xa;&#xa;         if {[expr $index % $NumTrafficGroups] == 0} { lappend result [list] }&#xa;&#xa;         for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;            set column [lindex $TrialSum_VlanPriority $i]&#xa;            lappend result [getValue $row $column]&#xa;            incr index&#xa;         }&#xa;    }&#xa;&#xa;} else {&#xa;      lappend result [list]&#xa;      for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;         set column [lindex $TrialSum_VlanPriority $i]&#xa;         lappend result [getValue $dataSet $column]&#xa;      }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MaxXonResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $TestSum_MaxXonResponseTime&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   &#xa;   set index 0&#xa;   &#xa;   foreach row [lrange $dataSet 1 end] {&#xa;&#xa;         if {[expr $index % $NumTrafficGroups] == 0} { lappend result [list] }&#xa;&#xa;         for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;            set column [lindex $TrialSum_VlanPriority $i]&#xa;            lappend result [getValue $row $column]&#xa;            incr index&#xa;         }&#xa;    }&#xa;&#xa;} else {&#xa;      lappend result [list]&#xa;      for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;         set column [lindex $TrialSum_VlanPriority $i]&#xa;         lappend result [getValue $dataSet $column]&#xa;      }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.AvgXonResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $TestSum_AvgXonResponseTime&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   &#xa;   set index 0&#xa;   &#xa;   foreach row [lrange $dataSet 1 end] {&#xa;&#xa;         if {[expr $index % $NumTrafficGroups] == 0} { lappend result [list] }&#xa;&#xa;         for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;            set column [lindex $TrialSum_VlanPriority $i]&#xa;            lappend result [getValue $row $column]&#xa;            incr index&#xa;         }&#xa;    }&#xa;&#xa;} else {&#xa;      lappend result [list]&#xa;      for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;         set column [lindex $TrialSum_VlanPriority $i]&#xa;         lappend result [getValue $dataSet $column]&#xa;      }&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.MinResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>3.584e-007</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $TrialSum_MinResponseTime&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   &#xa;   set index 0&#xa;   &#xa;   foreach row [lrange $dataSet 1 end] {&#xa;&#xa;         if {[expr $index % $NumTrafficGroups] == 0} { lappend result [list] }&#xa;&#xa;         for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;            set column [lindex $TrialSum_VlanPriority $i]&#xa;            lappend result [getValue $row $column]&#xa;            incr index&#xa;         }&#xa;    }&#xa;&#xa;} else {&#xa;      lappend result [list]&#xa;      for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;         set column [lindex $TrialSum_VlanPriority $i]&#xa;         lappend result [getValue $dataSet $column]&#xa;      }&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.MaxResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>3.584e-007</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $TrialSum_MaxResponseTime&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   &#xa;   set index 0&#xa;   &#xa;   foreach row [lrange $dataSet 1 end] {&#xa;&#xa;         if {[expr $index % $NumTrafficGroups] == 0} { lappend result [list] }&#xa;&#xa;         for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;            set column [lindex $TrialSum_VlanPriority $i]&#xa;            lappend result [getValue $row $column]&#xa;            incr index&#xa;         }&#xa;    }&#xa;&#xa;} else {&#xa;      lappend result [list]&#xa;      for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;         set column [lindex $TrialSum_VlanPriority $i]&#xa;         lappend result [getValue $dataSet $column]&#xa;      }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.MinXonResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $TrialSum_MinXonResponseTime&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   &#xa;   set index 0&#xa;   &#xa;   foreach row [lrange $dataSet 1 end] {&#xa;&#xa;         if {[expr $index % $NumTrafficGroups] == 0} { lappend result [list] }&#xa;&#xa;         for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;            set column [lindex $TrialSum_VlanPriority $i]&#xa;            lappend result [getValue $row $column]&#xa;            incr index&#xa;         }&#xa;    }&#xa;&#xa;} else {&#xa;      lappend result [list]&#xa;      for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;         set column [lindex $TrialSum_VlanPriority $i]&#xa;         lappend result [getValue $dataSet $column]&#xa;      }&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.MaxXonResponseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>N/A</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      if {[string is integer $value] || [string is double $value]} {&#xa;         # update numerical values by our scalar&#xa;         set value [expr $value * $::ResultScalar]&#xa;      }&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $TrialSum_MaxXonResponseTime&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   &#xa;   set index 0&#xa;   &#xa;   foreach row [lrange $dataSet 1 end] {&#xa;&#xa;         if {[expr $index % $NumTrafficGroups] == 0} { lappend result [list] }&#xa;&#xa;         for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;            set column [lindex $TrialSum_VlanPriority $i]&#xa;            lappend result [getValue $row $column]&#xa;            incr index&#xa;         }&#xa;    }&#xa;&#xa;} else {&#xa;      lappend result [list]&#xa;      for {set i 0} {$i < $NumTrafficGroups} {incr i} {        &#xa;         set column [lindex $TrialSum_VlanPriority $i]&#xa;         lappend result [getValue $dataSet $column]&#xa;      }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>Priority.PfcTxQuanta</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>65535.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;foreach quanta $PfcTxQuantum {&#xa;    foreach port $Priority_Ports {&#xa;        lappend result $quanta&#xa;    }&#xa;}&#xa;&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority.PfcXonDelay</name>
      <persist>false</persist>
      <value type="doubles">
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;foreach quanta $PfcTxXonDelay {&#xa;    foreach port $Priority_Ports {&#xa;        lappend result $quanta&#xa;    }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
  </computed>
  <tables>
    <instance>
      <name>TrialSummaryTbl</name>
      <script><![CDATA[<table>&#xa;   <tr>&#xa;<td bgcolor="#eeeeee">Trial\n#</td>&#xa;  <td bgcolor="#eeeeee">Traffic\nGroup</td>&#xa;    <td bgcolor="#eeeeee">Frame\nSize</td>&#xa;    <td bgcolor="#eeeeee">Burst\nSize</td>&#xa;    <td bgcolor="#eeeeee">Intended\nLoad (%)</td>&#xa;    <td  bgcolor="#eeeeee">VLAN\nPriority</td>&#xa;    <td bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td bgcolor="#eeeeee">XON Delay\n(=$XonDelayUnit$)</td>&#xa;    <td bgcolor="#eeeeee">Offered\nLoad (%) </td>&#xa;    <td bgcolor="#eeeeee">Min\nResponse\nTime\n(=$ResultUnits$)</td>&#xa;    <td bgcolor="#eeeeee">Avg\nResponse\nTime\n(=$ResultUnits$)</td>&#xa;    <td bgcolor="#eeeeee">Max\nResponse\nTime\n(=$ResultUnits$)</td>&#xa;    <td bgcolor="#eeeeee">Min XON\nResponse\nTime\n(=$ResultUnits$)</td>&#xa;    <td bgcolor="#eeeeee">Avg XON\nResponse\nTime\n(=$ResultUnits$)</td>&#xa;    <td bgcolor="#eeeeee">Max XON\nResponse\nTime\n(=$ResultUnits$)</td>&#xa;    <td bgcolor="#eeeeee">Conformant</td>&#xa;    <td bgcolor="#eeeeee">Frame\nLoss\n(%)</td>&#xa;   </tr>&#xa; <tr iterate="=$TrialSum.TrafficGroup$">&#xa;  <td halign="right" bgcolor="#eeeeee">=$TrialSum.TrialNum$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TrialSum.TrafficGroup$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TrialSum.FS$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TrialSum.BS$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TrialSum.Intended$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TrialSum.VlanPriority$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TrialSum.PfcTxQuantum$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TrialSum.PfcTxXonDelay$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TrialSum.Offered$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TrialSum.MinResponseTime$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TrialSum.AvgResponseTime$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TrialSum.MaxResponseTime$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TrialSum.MinXonResponseTime$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TrialSum.AvgXonResponseTime$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TrialSum.MaxXonResponseTime$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TrialSum.IsConformant$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TrialSum.DroppedFramePct$</td>&#xa; </tr>&#xa;</table>]]></script>
    </instance>
    <instance>
      <name>AdvTestSummaryTbl</name>
      <script><![CDATA[<table>&#xa;   <tr>&#xa; <td colspan="1" rowspan="2" bgcolor="#eeeeee">Traffic\nConfig #</td>&#xa;    <td colspan="4" rowspan="1" bgcolor="#eeeeee" halign="center">Traffic Configuration</td>&#xa;<td colspan="1" rowspan="2" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;  <td colspan="1" rowspan="2" bgcolor="#eeeeee">XON Delay\n(=$XonDelayUnit$)</td>&#xa;    <td colspan="1" rowspan="2" bgcolor="#eeeeee">Frame\nLoss\n(%)</td>&#xa; <td colspan="1" rowspan="2" bgcolor="#eeeeee">PFC Rx\nFrame Count</td>&#xa; <td colspan="1" rowspan="2" bgcolor="#eeeeee">PFC Rx\nQuanta</td>&#xa; <td colspan="1" rowspan="2" bgcolor="#eeeeee">PFC Rx\nTrigger Count</td>&#xa;<td colspan="1" rowspan="2" bgcolor="#eeeeee">Min\nLatency (uSec)</td>&#xa;  <td colspan="1" rowspan="2" bgcolor="#eeeeee">Avg\nLatency (uSec)</td>&#xa;  <td colspan="1" rowspan="2" bgcolor="#eeeeee">Max\nLatency (uSec)</td>&#xa; <td colspan="1" rowspan="2" bgcolor="#eeeeee">Min\nJitter (uSec)</td>&#xa;  <td colspan="1" rowspan="2" bgcolor="#eeeeee">Avg\nJitter (uSec)</td>&#xa;  <td colspan="1" rowspan="2" bgcolor="#eeeeee">Max\nJitter (uSec)</td>&#xa;<td colspan="1" rowspan="2" bgcolor="#eeeeee">Min Interarrival\nTime (uSec)</td>&#xa;  <td colspan="1" rowspan="2" bgcolor="#eeeeee">Avg Interarrival\nTime (uSec)</td>&#xa;  <td colspan="1" rowspan="2" bgcolor="#eeeeee">Max Interarrival\nTime (uSec)</td>&#xa;</tr>&#xa; <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic Group</td>&#xa;     <td colspan="1" rowspan="1" bgcolor="#eeeeee">Frame Size</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Burst Size</td>&#xa;     <td colspan="1" rowspan="1" bgcolor="#eeeeee">Intended\nLoad (%)</td>&#xa; </tr>&#xa; <tr iterate="=$TestSum.FS$">&#xa;<td colspan="1" rowspan="1" bgcolor="#eeeeee">=$TestSum.TrafficConfig$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TestSum.TG$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TestSum.FS$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TestSum.BS$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TestSum.IL$</td>&#xa; <td halign="right" bgcolor="#eeeeee">=$TestSum.PfcTxQuantum$</td>&#xa; <td halign="right" bgcolor="#eeeeee">=$TestSum.PfcTxXonDelay$</td>&#xa; <td halign="right" bgcolor="#ffffff">=$TestSum.DroppedFramePct$</td>&#xa;<td halign="right" bgcolor="#ffffff">=$TestSum.PfcRxFrameCount$</td>&#xa;<td halign="right" bgcolor="#ffffff">=$TestSum.PfcTotalQuanta$</td>&#xa;<td halign="right" bgcolor="#ffffff">=$TestSum.PfcTriggerCount$</td>&#xa;<td halign="right" bgcolor="#ffffff">=$TestSum.MinLatency$</td>&#xa;<td halign="right" bgcolor="#ffffff">=$TestSum.AvgLatency$</td>&#xa;<td halign="right" bgcolor="#ffffff">=$TestSum.MaxLatency$</td>&#xa;<td halign="right" bgcolor="#ffffff">=$TestSum.MinJitter$</td>&#xa;<td halign="right" bgcolor="#ffffff">=$TestSum.AvgJitter$</td>&#xa;<td halign="right" bgcolor="#ffffff">=$TestSum.MaxJitter$</td>&#xa;<td halign="right" bgcolor="#ffffff">=$TestSum.MinInterarrivalTime$</td>&#xa;<td halign="right" bgcolor="#ffffff">=$TestSum.AvgInterarrivalTime$</td>&#xa;<td halign="right" bgcolor="#ffffff">=$TestSum.MaxInterarrivalTime$</td>&#xa; </tr>&#xa;</table>&#xa;]]></script>
    </instance>
    <instance>
      <name>TestSummaryTbl</name>
      <script><![CDATA[<table>&#xa; <tr>&#xa;   <td colspan="1" rowspan="2" bgcolor="#eeeeee">Traffic\nConfig #</td>&#xa;   <td colspan="5" rowspan="1" bgcolor="#eeeeee" halign="center">Traffic Configuration</td>&#xa;   <td colspan="1" rowspan="2" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;   <td colspan="1" rowspan="2" bgcolor="#eeeeee">XON Delay\n(=$XonDelayUnit$)</td>&#xa;   <td colspan="1" rowspan="2" bgcolor="#eeeeee">Min\nResponse\nTime\n(=$ResultUnits$)</td>&#xa;   <td colspan="1" rowspan="2" bgcolor="#eeeeee">Avg\nResponse\nTime\n(=$ResultUnits$)</td>&#xa;   <td colspan="1" rowspan="2" bgcolor="#eeeeee">Max\nResponse\nTime\n(=$ResultUnits$)</td>&#xa;   <td colspan="1" rowspan="2" bgcolor="#eeeeee">Min XON\nResponse\nTime\n(=$ResultUnits$)</td>&#xa;   <td colspan="1" rowspan="2" bgcolor="#eeeeee">Avg XON\nResponse\nTime\n(=$ResultUnits$)</td>&#xa;   <td colspan="1" rowspan="2" bgcolor="#eeeeee">Max XON\nResponse\nTime\n(=$ResultUnits$)</td>&#xa; </tr>&#xa; <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic Group</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Frame Size</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Burst Size</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Intended\nLoad (%)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">VLAN\nPriority</td>&#xa; </tr>&#xa; <tr iterate="=$TestSum.FS$">&#xa;  <td colspan="1" rowspan="1" bgcolor="#eeeeee">=$TestSum.TrafficConfig$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TestSum.TG$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TestSum.FS$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TestSum.BS$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TestSum.IL$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TrialSum.VlanPriority$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TestSum.PfcTxQuantum$</td>&#xa;  <td halign="right" bgcolor="#eeeeee">=$TestSum.PfcTxXonDelay$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TestSum.MinResponseTime$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TestSum.AvgResponseTime$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TestSum.MaxResponseTime$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TestSum.MinXonResponseTime$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TestSum.AvgXonResponseTime$</td>&#xa;  <td halign="right" bgcolor="#ffffff">=$TestSum.MaxXonResponseTime$</td>&#xa; </tr>&#xa;</table>&#xa;]]></script>
    </instance>
    <instance>
      <name>PriorityResult3Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial\n#</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Delay\n(=$XonDelayUnit$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Requested\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Actual\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Response\nTime\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Response\nTime\n(=$ResultUnits$)</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcTxQuanta$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcXonDelay$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_TxPriFrameCount.3$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_RequestedPauseTime.3$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ActualPauseTime.3$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ResponseTime.3$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_XonResponseTime.3$</td>&#xa;   </tr>&#xa;</table>]]></script>
    </instance>
    <instance>
      <name>PriorityResult0Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial\n#</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Delay\n(=$XonDelayUnit$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Requested\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Actual\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Response\nTime\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Response\nTime\n(=$ResultUnits$)</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcTxQuanta$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcXonDelay$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_TxPriFrameCount.0$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_RequestedPauseTime.0$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ActualPauseTime.0$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ResponseTime.0$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_XonResponseTime.0$</td>&#xa;   </tr>&#xa;</table>&#xa;]]></script>
    </instance>
    <instance>
      <name>PriorityResult1Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial\n#</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Delay\n(=$XonDelayUnit$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Requested\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Actual\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Response\nTime\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Response\nTime\n(=$ResultUnits$)</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcTxQuanta$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcXonDelay$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_TxPriFrameCount.1$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_RequestedPauseTime.1$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ActualPauseTime.1$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ResponseTime.1$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_XonResponseTime.1$</td>&#xa;   </tr>&#xa;</table>&#xa;]]></script>
    </instance>
    <instance>
      <name>PriorityResult2Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial\n#</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Delay\n(=$XonDelayUnit$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Requested\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Actual\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Response\nTime\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Response\nTime\n(=$ResultUnits$)</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcTxQuanta$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcXonDelay$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_TxPriFrameCount.2$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_RequestedPauseTime.2$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ActualPauseTime.2$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ResponseTime.2$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_XonResponseTime.2$</td>&#xa;   </tr>&#xa;</table>&#xa;]]></script>
    </instance>
    <instance>
      <name>PriorityResult4Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial\n#</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Delay\n(=$XonDelayUnit$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Requested\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Actual\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Response\nTime\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Response\nTime\n(=$ResultUnits$)</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcTxQuanta$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcXonDelay$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_TxPriFrameCount.4$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_RequestedPauseTime.4$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ActualPauseTime.4$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ResponseTime.4$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_XonResponseTime.4$</td>&#xa;   </tr>&#xa;</table>&#xa;]]></script>
    </instance>
    <instance>
      <name>PriorityResult5Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial\n#</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Delay\n(=$XonDelayUnit$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Requested\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Actual\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Response\nTime\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Response\nTime\n(=$ResultUnits$)</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcTxQuanta$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcXonDelay$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_TxPriFrameCount.5$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_RequestedPauseTime.5$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ActualPauseTime.5$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ResponseTime.5$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_XonResponseTime.5$</td>&#xa;   </tr>&#xa;</table>]]></script>
    </instance>
    <instance>
      <name>PriorityResult6Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial\n#</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Delay\n(=$XonDelayUnit$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Requested\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Actual\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Response\nTime\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Response\nTime\n(=$ResultUnits$)</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcTxQuanta$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcXonDelay$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_TxPriFrameCount.6$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_RequestedPauseTime.6$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ActualPauseTime.6$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ResponseTime.6$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_XonResponseTime.6$</td>&#xa;   </tr>&#xa;</table>&#xa;]]></script>
    </instance>
    <instance>
      <name>PriorityResult7Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial\n#</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Delay\n(=$XonDelayUnit$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Requested\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Actual\nPause Time\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Response\nTime\n(=$ResultUnits$)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">XON Response\nTime\n(=$ResultUnits$)</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcTxQuanta$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority.PfcXonDelay$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_TxPriFrameCount.7$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_RequestedPauseTime.7$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ActualPauseTime.7$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_ResponseTime.7$</td>&#xa;    <td halign="right" bgcolor="#ffffff">=$Priority_XonResponseTime.7$</td>&#xa;   </tr>&#xa;</table>&#xa;]]></script>
    </instance>
  </tables>
  <graphs>
    <instance type="Bar">
      <name>LatencyGraph</name>
      <ThreeD>false</ThreeD>
      <iterate>true</iterate>
      <backgroundColor>#eeeeee</backgroundColor>
      <plotBackgroundColor>#ffffff</plotBackgroundColor>
      <statistic>
        <name>Adv_MinLatency</name>
        <title>Min Latency</title>
        <color>#40ff40</color>
        <valueAxis>Latency (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>Adv_AvgLatency</name>
        <title>Avg Latency</title>
        <color>#ffff40</color>
        <valueAxis>Latency (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>Adv_MaxLatency</name>
        <title>Max Latency</title>
        <color>#ff4040</color>
        <valueAxis>Latency (uSec)</valueAxis>
      </statistic>
      <title>Latency For =$AdvTestSummary_TrafficGroupName$ Subgroup</title>
      <xTitle>Latency by Frame Size[FS], Burst Size [BS] and Intended Load (%) [LS]</xTitle>
      <yTitle>Latency (uSec)</yTitle>
    </instance>
    <instance type="Bar">
      <name>JitterGraph</name>
      <ThreeD>false</ThreeD>
      <iterate>true</iterate>
      <backgroundColor>#eeeeee</backgroundColor>
      <plotBackgroundColor>#ffffff</plotBackgroundColor>
      <statistic>
        <name>Adv_MinJitter</name>
        <title>Min Jitter</title>
        <color>#40ff40</color>
        <valueAxis>Jitter (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>Adv_AvgJitter</name>
        <title>Avg Jitter</title>
        <color>#ffff40</color>
        <valueAxis>Jitter (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>Adv_MaxJitter</name>
        <title>Max Jitter</title>
        <color>#ff4040</color>
        <valueAxis>Jitter (uSec)</valueAxis>
      </statistic>
      <title>Jitter For =$AdvTestSummary_TrafficGroupName$ Subgroup</title>
      <xTitle>Jitter by Frame Size[FS], Burst Size [BS] and Intended Load (%) [LS]</xTitle>
      <yTitle>Jitter (uSec)</yTitle>
    </instance>
    <instance type="Bar">
      <name>InterarrivalGraph</name>
      <ThreeD>false</ThreeD>
      <iterate>true</iterate>
      <backgroundColor>#eeeeee</backgroundColor>
      <plotBackgroundColor>#ffffff</plotBackgroundColor>
      <statistic>
        <name>Adv_MinInterarrivalTime</name>
        <title>Min Interarrival Time</title>
        <color>#40ff40</color>
        <valueAxis>Interarrival Time (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>Adv_AvgInterarrivalTime</name>
        <title>Avg Interarrival Time</title>
        <color>#ffff40</color>
        <valueAxis>Interarrival Time (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>Adv_MaxInterarrivalTime</name>
        <title>Max Interarrival Time</title>
        <color>#ff4040</color>
        <valueAxis>Interarrival Time (uSec)</valueAxis>
      </statistic>
      <title>Interarrival Time For =$AdvTestSummary_TrafficGroupName$ Subgroup</title>
      <xTitle>Interarrival Time by Frame Size[FS], Burst Size [BS] and Intended Load (%) [LS]</xTitle>
      <yTitle>Interarrival Time (uSec)</yTitle>
    </instance>
    <instance type="Bar">
      <name>JitterAllGraph</name>
      <ThreeD>false</ThreeD>
      <iterate>false</iterate>
      <backgroundColor>#eeeeee</backgroundColor>
      <plotBackgroundColor>#ffffff</plotBackgroundColor>
      <statistic>
        <name>TestMinJitter</name>
        <title>Min Jitter</title>
        <color></color>
        <valueAxis>Jitter (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>TestAvgJitter</name>
        <title>Avg Jitter</title>
        <color></color>
        <valueAxis>Jitter (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>TestMaxJitter</name>
        <title>Max Jitter</title>
        <color></color>
        <valueAxis>Jitter (uSec)</valueAxis>
      </statistic>
      <title></title>
      <xTitle>Traffic Configuration</xTitle>
      <yTitle>Queueput (uSec)</yTitle>
    </instance>
    <instance type="Bar">
      <name>LatencyAllGraph</name>
      <ThreeD>false</ThreeD>
      <iterate>false</iterate>
      <backgroundColor>#eeeeee</backgroundColor>
      <plotBackgroundColor>#ffffff</plotBackgroundColor>
      <statistic>
        <name>TestMinLatency</name>
        <title>Min Latency</title>
        <color>#40ff40</color>
        <valueAxis>Latency (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>TestAvgLatency</name>
        <title>Avg Latency</title>
        <color>#ffff40</color>
        <valueAxis>Latency (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>TestMaxLatency</name>
        <title>Max Latency</title>
        <color>#ff4040</color>
        <valueAxis>Latency (uSec)</valueAxis>
      </statistic>
      <title></title>
      <xTitle>Traffic Configuration</xTitle>
      <yTitle></yTitle>
    </instance>
    <instance type="Bar">
      <name>InterarrivalAllGraph</name>
      <ThreeD>false</ThreeD>
      <iterate>true</iterate>
      <backgroundColor>#eeeeee</backgroundColor>
      <plotBackgroundColor>#ffffff</plotBackgroundColor>
      <statistic>
        <name>TestMinArrivalTime</name>
        <title>Min Interarrival Time</title>
        <color></color>
        <valueAxis>Interarrival Time (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>TestAvgArrivalTime</name>
        <title>Avg Interarrival Time</title>
        <color></color>
        <valueAxis>Interarrival Time (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>TestMaxArrivalTime</name>
        <title>Max Interarrival Time</title>
        <color></color>
        <valueAxis>Interarrival Time (uSec)</valueAxis>
      </statistic>
      <title></title>
      <xTitle>Traffic Configuration</xTitle>
      <yTitle></yTitle>
    </instance>
  </graphs>
  <layout>
    <page name="Title" display="true">
      <width>800</width>
      <height>800</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>startDateStr</name>
        <x>200</x>
        <y>511</y>
        <width>59</width>
        <height>15</height>
        <size>12</size>
        <value xml:space="preserve">Test&amp;nbsp;Date:</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>SpirentLotoTextStr</name>
        <x>200</x>
        <y>341</y>
        <width>287</width>
        <height>31</height>
        <size>25</size>
        <value xml:space="preserve">Spirent&amp;nbsp;TestCenter&amp;nbsp;Report</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>TestTypeStr</name>
        <x>200</x>
        <y>450</y>
        <width>61</width>
        <height>15</height>
        <size>12</size>
        <value xml:space="preserve">Test&amp;nbsp;Type:</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>TestTypeVar</name>
        <x>300</x>
        <y>450</y>
        <width>287</width>
        <height>15</height>
        <size>12</size>
        <value xml:space="preserve">DCB&amp;nbsp;PFC&amp;nbsp;Pause&amp;nbsp;Response&amp;nbsp;Time</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>CounterModeStr</name>
        <x>200</x>
        <y>480</y>
        <width>80</width>
        <height>16</height>
        <size>12</size>
        <value xml:space="preserve">Counter&amp;nbsp;Mode:</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>CounterModeStr</name>
        <x>300</x>
        <y>480</y>
        <width>31</width>
        <height>16</height>
        <size>12</size>
        <value xml:space="preserve">=$CounterModeType$</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>startDateVar</name>
        <x>300</x>
        <y>510</y>
        <width>142</width>
        <height>16</height>
        <size>12</size>
        <value xml:space="preserve">=$TestStartDate$</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>nameLogo</name>
        <x>0</x>
        <y>0</y>
        <width>200</width>
        <height>100</height>
        <src>upperLeftLogo.jpg</src>
      </instance>
      <instance type="Image">
        <name>hdrLogo</name>
        <x>170</x>
        <y>0</y>
        <width>630</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Image">
        <name>rightLogo</name>
        <x>690</x>
        <y>100</y>
        <width>110</width>
        <height>700</height>
        <src>rightSideLogo.jpg</src>
      </instance>
      <instance type="Image">
        <name>footerLogo</name>
        <x>0</x>
        <y>720</y>
        <width>800</width>
        <height>80</height>
        <src>footerLogo.png</src>
      </instance>
    </page>
    <page name="Test Summary" display="true">
      <width>1280</width>
      <height>720</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>2</gridColumns>
      <instance type="Text">
        <name>TestSummaryTitle</name>
        <x>585</x>
        <y>100</y>
        <width>110</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Test&amp;nbsp;Summary</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>hdr</name>
        <x>560</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>TestSummaryTbl</name>
        <x>240</x>
        <y>160</y>
        <width>802</width>
        <height>455</height>
        <value>TestSummaryTbl</value>
        <size>10</size>
      </instance>
    </page>
    <page name="Trial Summary" display="true">
      <width>1280</width>
      <height>720</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Grid</iterateType>
      <gridRows>2</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>TestSummaryTitle</name>
        <x>585</x>
        <y>100</y>
        <width>110</width>
        <height>21</height>
        <size>16</size>
        <value xml:space="preserve">Trial&amp;nbsp;Summary</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>hdr</name>
        <x>560</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>TrialSummaryTbl</name>
        <x>210</x>
        <y>160</y>
        <width>861</width>
        <height>451</height>
        <value>TrialSummaryTbl</value>
        <size>10</size>
      </instance>
    </page>
    <page name="Per Port Results - Priority 0" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>46</x>
        <y>160</y>
        <width>707</width>
        <height>338</height>
        <value>PriorityResult0Tbl</value>
        <size>12</size>
      </instance>
      <instance type="Text">
        <name>Title</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;0</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
    </page>
    <page name="Per Port Results - Priority 1" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>Title</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;1</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>46</x>
        <y>160</y>
        <width>580</width>
        <height>110</height>
        <value>PriorityResult1Tbl</value>
        <size>12</size>
      </instance>
    </page>
    <page name="Per Port Results - Priority 2" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>Title</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;2</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>46</x>
        <y>160</y>
        <width>580</width>
        <height>110</height>
        <value>PriorityResult2Tbl</value>
        <size>12</size>
      </instance>
    </page>
    <page name="Per Port Results - Priority 3" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>Title</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;3</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>46</x>
        <y>160</y>
        <width>708</width>
        <height>340</height>
        <value>PriorityResult3Tbl</value>
        <size>12</size>
      </instance>
    </page>
    <page name="Per Port Results - Priority 4" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>Title</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;4</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>46</x>
        <y>160</y>
        <width>580</width>
        <height>110</height>
        <value>PriorityResult4Tbl</value>
        <size>12</size>
      </instance>
    </page>
    <page name="Per Port Results - Priority 5" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>Title</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;5</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>46</x>
        <y>160</y>
        <width>580</width>
        <height>110</height>
        <value>PriorityResult5Tbl</value>
        <size>12</size>
      </instance>
    </page>
    <page name="Per Port Results - Priority 6" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>Title</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;6</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>46</x>
        <y>160</y>
        <width>580</width>
        <height>110</height>
        <value>PriorityResult6Tbl</value>
        <size>12</size>
      </instance>
    </page>
    <page name="Per Port Results - Priority 7" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>Table</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;7</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>46</x>
        <y>160</y>
        <width>580</width>
        <height>110</height>
        <value>PriorityResult7Tbl</value>
        <size>12</size>
      </instance>
    </page>
    <page name="Version" display="true">
      <width>800</width>
      <height>700</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>VersionStr</name>
        <x>35</x>
        <y>580</y>
        <width>97</width>
        <height>11</height>
        <size>9</size>
        <value xml:space="preserve">Template&amp;nbsp;Version:&amp;nbsp;R2C</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>InputStartIdStr</name>
        <x>35</x>
        <y>600</y>
        <width>125</width>
        <height>11</height>
        <size>9</size>
        <value xml:space="preserve">RunTime&amp;nbsp;Start&amp;nbsp;Data&amp;nbsp;Set&amp;nbsp;ID:&amp;nbsp;=$@StartDataSetId$</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>inputEndIdStr</name>
        <x>35</x>
        <y>620</y>
        <width>166</width>
        <height>11</height>
        <size>9</size>
        <value xml:space="preserve">RunTime&amp;nbsp;End&amp;nbsp;Data&amp;nbsp;Set&amp;nbsp;ID:&amp;nbsp;=$@EndDataSetId$</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>headerLogo</name>
        <x>0</x>
        <y>0</y>
        <width>800</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Image">
        <name>rightLogo</name>
        <x>670</x>
        <y>100</y>
        <width>130</width>
        <height>400</height>
        <src>contactLogo.jpg</src>
      </instance>
      <instance type="Image">
        <name>footerLogo</name>
        <x>1</x>
        <y>649</y>
        <width>800</width>
        <height>50</height>
        <src>footerLogo.png</src>
      </instance>
      <instance type="Text">
        <name>Timestamp</name>
        <x>35</x>
        <y>640</y>
        <width>296</width>
        <height>11</height>
        <size>9</size>
        <value xml:space="preserve">RR&amp;nbsp;Timestamp&amp;nbsp;Saved&amp;nbsp;Timestamp:&amp;nbsp;=$RRTemplateSavedTimestamp$</value>
        <color>#000000</color>
      </instance>
    </page>
  </layout>
  <csv/>
</template>

<?xml version="1.0" encoding="UTF-8"?>

<template name="" type="stc">
  <reported>
    <instance>
      <name>StartDataSetId</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
      </value>
      <path>SELECT ParamValue FROM EotResultNodeParam WHERE Name='@StartDataSetId';</path>
      <multivalued>false</multivalued>
      <pageName>Version</pageName>
    </instance>
    <instance>
      <name>EndDataSetId</name>
      <persist>false</persist>
      <path>SELECT ParamValue FROM EotResultNodeParam WHERE Name='@EndDataSetId';</path>
      <multivalued>false</multivalued>
      <pageName>Version</pageName>
    </instance>
    <instance>
      <name>tstStartDate</name>
      <persist>false</persist>
      <value type="strings">
        <instance>2010-08-27 14:42:20</instance>
      </value>
      <path>SELECT CreatedTime FROM DataSet WHERE Id = =$@StartDataSetId$;</path>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>tstEndDate</name>
      <persist>false</persist>
      <path>SELECT CreatedTime FROM DataSet WHERE Id = =$@EndDataSetId$;</path>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Version</name>
      <persist>false</persist>
      <value type="strings">
        <instance>3.60.1660.0000</instance>
      </value>
      <path>SELECT Version FROM StcSystem WHERE Id = 1;</path>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>CounterMode</name>
      <persist>false</persist>
      <value type="strings">
        <instance>latency_jitter</instance>
      </value>
      <path>SELECT DISTINCT lower(ResultViewMode) FROM ResultOptions;</path>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>ResultViewMode</name>
      <persist>false</persist>
      <value type="strings">
        <instance>LATENCY_JITTER</instance>
      </value>
      <path>SELECT DISTINCT upper(ResultViewMode) FROM ResultOptions;</path>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>AdvTestSummary_TrafficGroupName</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
      </value>
      <path>select distinct TrafficGroupName from DcbTrafficGroupPerIterationResult</path>
      <multivalued>true</multivalued>
      <pageName>Interarrival Time For Each Subgroup,Test Summary Graph,Queueput For Each Subgroup,Latency Graph For Each Subgroup,Test Summary,Queuput For Each Subgroup,Interarrival Time Graph For Each Subgroup,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>AdvTestSummary_FrameSizeLoad</name>
      <persist>false</persist>
      <value type="strings">
        <instance>FS:321.17 BS:1 LS:99.999</instance>
        <instance>FS:321.23 BS:1 LS:99.999</instance>
        <instance>FS:321.27 BS:1 LS:99.999</instance>
        <instance>FS:321.28 BS:1 LS:99.999</instance>
        <instance>FS:321.29 BS:1 LS:99.999</instance>
        <instance>FS:321.32 BS:1 LS:99.999</instance>
        <instance>FS:321.33 BS:1 LS:99.999</instance>
        <instance>FS:321.35 BS:1 LS:99.999</instance>
      </value>
      <path>select 'FS:'|| CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END || ' BS:' ||BurstSize || ' LS:' ||IntendedLoad from DcbTrafficGroupPerIterationresult where TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' GROUP BY CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END , BurstSize, IntendedLoad ORDER BY CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END ,BurstSize, IntendedLoad</path>
      <multivalued>true</multivalued>
      <pageName>Interarrival Time For Each Subgroup,Test Summary Graph,Latency Graph For Each Subgroup,Trial Summary,Test Summary,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>LoopKey</name>
      <persist>false</persist>
      <value type="strings">
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Average Frame Size: 320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Burst Size: 1, Weighted Load Ratio: 1:1:1, Load: 100%, PFC Pause Duration: 1, PFC Quantum: 65535, XON Delay: 1024, Pause Rate: 100</instance>
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Average Frame Size: 320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Burst Size: 1, Weighted Load Ratio: 1:1:1, Load: 100%, PFC Pause Duration: 4, PFC Quantum: 65535, XON Delay: 1024, Pause Rate: 100</instance>
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Average Frame Size: 320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Burst Size: 1, Weighted Load Ratio: 1:1:1, Load: 100%, PFC Pause Duration: 16, PFC Quantum: 65535, XON Delay: 1024, Pause Rate: 100</instance>
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Average Frame Size: 320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Burst Size: 1, Weighted Load Ratio: 1:1:1, Load: 100%, PFC Pause Duration: 64, PFC Quantum: 65535, XON Delay: 1024, Pause Rate: 100</instance>
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Average Frame Size: 320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Burst Size: 1, Weighted Load Ratio: 1:1:1, Load: 100%, PFC Pause Duration: 256, PFC Quantum: 65535, XON Delay: 1024, Pause Rate: 100</instance>
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Average Frame Size: 320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Burst Size: 1, Weighted Load Ratio: 1:1:1, Load: 100%, PFC Pause Duration: 1024, PFC Quantum: 65535, XON Delay: 1024, Pause Rate: 100</instance>
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Average Frame Size: 320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Burst Size: 1, Weighted Load Ratio: 1:1:1, Load: 100%, PFC Pause Duration: 4096, PFC Quantum: 65535, XON Delay: 1024, Pause Rate: 100</instance>
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Average Frame Size: 320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, and DCB Traffic Group Collection - Port 1 - Burst Size: 1, Weighted Load Ratio: 1:1:1, Load: 100%, PFC Pause Duration: 16384, PFC Quantum: 65535, XON Delay: 1024, Pause Rate: 100</instance>
      </value>
      <path>select Distinct LoopKey from DcbPfcLoadValidationPerIterationResult ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>Latency Graph For Each Subgroup,Test Summary,Interarrival Time Graph For Each Subgroup,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>Adv_MinLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>4.85</instance>
        <instance>4.83</instance>
        <instance>4.7</instance>
        <instance>4.91</instance>
        <instance>14.17</instance>
        <instance>53.48</instance>
        <instance>77.37</instance>
        <instance>79.19</instance>
      </value>
      <path>select Coalesce(Min(MinLatency), 'N/A') from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' Group BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Latency Graph For Each Subgroup,Test Summary</pageName>
    </instance>
    <instance>
      <name>Adv_AvgLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>151.89874</instance>
        <instance>151.8598</instance>
        <instance>151.90789</instance>
        <instance>151.88963</instance>
        <instance>152.23105</instance>
        <instance>157.42427</instance>
        <instance>157.93409</instance>
        <instance>175.69742</instance>
      </value>
      <path>select Coalesce(Round(Avg(AvgLatency),5), 'N/A') from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' Group BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Latency Graph For Each Subgroup,Test Summary</pageName>
    </instance>
    <instance>
      <name>Adv_MaxLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>230.79</instance>
        <instance>232.51</instance>
        <instance>298.98</instance>
        <instance>233.26</instance>
        <instance>233.23</instance>
        <instance>277.39</instance>
        <instance>436.34</instance>
        <instance>1064.43</instance>
      </value>
      <path>select Coalesce(Max(MaxLatency), 'N/A') from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' Group BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Latency Graph For Each Subgroup,Test Summary</pageName>
    </instance>
    <instance>
      <name>Adv_MinJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <path>select Min(MinJitter) from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>Adv_AvgJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <path>select ROUND(Avg(AvgJitter),5) from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>Adv_MaxJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>130.47</instance>
        <instance>129.58</instance>
        <instance>150.6</instance>
        <instance>130.01</instance>
        <instance>133.1</instance>
        <instance>130.92</instance>
        <instance>310.75</instance>
        <instance>938.51</instance>
      </value>
      <path>select Max(MaxJitter) from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>Adv_MinInterarrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <path>select Min(MinInterarrivalTime) from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary,Interarrival Time Graph For Each Subgroup,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>Adv_AvgInterarrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <path>select ROUND(Avg(AvgInterarrivalTime),5) from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary,Interarrival Time Graph For Each Subgroup,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>Adv_MaxInterarrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <path>select Max(MaxInterarrivalTime) from DcbTrafficGroupPerIterationresult WHERE TrafficGroupName ='=$AdvTestSummary_TrafficGroupName$' GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary,Interarrival Time Graph For Each Subgroup,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>Adv_TrafficGroup</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Port 1</instance>
        <instance>Port 1</instance>
        <instance>Port 1</instance>
        <instance>Port 1</instance>
        <instance>Port 1</instance>
        <instance>Port 1</instance>
        <instance>Port 1</instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 2</instance>
        <instance>Port 2</instance>
        <instance>Port 2</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance>Port 3</instance>
        <instance>Port 3</instance>
        <instance>Port 3</instance>
        <instance>Port 3</instance>
        <instance>Port 3</instance>
      </value>
      <path>select TrafficGroupName from DcbTrafficGroupPerIterationresult GROUP BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad ORDER BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>Adv_FrameSize</name>
      <persist>false</persist>
      <value type="strings">
        <instance>321.17</instance>
        <instance>321.23</instance>
        <instance>321.27</instance>
        <instance>321.28</instance>
        <instance>321.29</instance>
        <instance>321.32</instance>
        <instance>321.33</instance>
        <instance>321.35</instance>
        <instance>321.3</instance>
        <instance>321.31</instance>
        <instance>321.32</instance>
        <instance>321.33</instance>
        <instance>321.35</instance>
        <instance>321.25</instance>
        <instance>321.28</instance>
        <instance>321.29</instance>
        <instance>321.3</instance>
        <instance>321.34</instance>
        <instance>321.46</instance>
      </value>
      <path>select CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END from DcbTrafficGroupPerIterationresult GROUP BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad ORDER BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1^ ^ ^ ^ ^ ^34547237^34547237^34547237^0.0^ ^4.19^151.888660313124^236.73^65535^1024^100^</instance>
        <instance>^Port 1^321.32^99.999^31.445^0^11515874^11515874^11515874^0.0^1^4.85^151.898742026007^230.79^ ^ ^ ^True</instance>
        <instance>^Port 2^321.3^99.999^31.444^0^11516334^11516334^11516334^0.0^1^4.63^151.912859725152^236.73^ ^ ^ ^True</instance>
        <instance>^Port 3^321.46^99.999^31.455^0^11515029^11515029^11515029^0.0^1^4.19^151.854375705871^233.13^ ^ ^ ^True</instance>
        <instance>1^ ^ ^ ^ ^ ^34549505^34549505^34549505^0.0^ ^4.16^151.885886531225^395.5^65535^1024^100^</instance>
        <instance>^Port 1^321.35^99.999^31.449^0^11516472^11516472^11516472^0.0^1^4.83^151.859797836525^232.51^ ^ ^ ^True</instance>
        <instance>^Port 2^321.31^99.999^31.446^0^11516822^11516822^11516822^0.0^1^4.61^151.897702462537^395.5^ ^ ^ ^True</instance>
        <instance>^Port 3^321.34^99.999^31.448^0^11516211^11516211^11516211^0.0^1^4.16^151.900159258979^231.77^ ^ ^ ^True</instance>
        <instance>1^ ^ ^ ^ ^ ^34552709^34552709^34552709^0.0^ ^4.24^151.903609943^298.98^65535^1024^100^</instance>
        <instance>^Port 1^321.27^99.999^31.447^0^11518333^11518333^11518333^0.0^1^4.7^151.907888473966^298.98^ ^ ^ ^True</instance>
        <instance>^Port 2^321.35^99.999^31.451^0^11517460^11517460^11517460^0.0^1^4.24^151.883153253408^252.69^ ^ ^ ^True</instance>
        <instance>^Port 3^321.29^99.999^31.445^0^11516916^11516916^11516916^0.0^1^4.93^151.919788541481^254.38^ ^ ^ ^True</instance>
        <instance>1^ ^ ^ ^ ^ ^34553270^34553270^34553270^0.0^ ^4.25^151.906146588442^550.0^65535^1024^100^</instance>
        <instance>^Port 1^321.33^99.999^31.449^0^11517057^11517057^11517057^0.0^1^4.91^151.889628367733^233.26^ ^ ^ ^True</instance>
        <instance>^Port 2^321.31^99.999^31.451^0^11518651^11518651^11518651^0.0^1^4.69^151.897000788547^230.5^ ^ ^ ^True</instance>
        <instance>^Port 3^321.25^99.999^31.443^0^11517562^11517562^11517562^0.0^1^4.25^151.931810749532^550.0^ ^ ^ ^True</instance>
        <instance>1^ ^ ^ ^ ^ ^34553271^34553271^34553271^0.0^ ^13.74^152.230056677992^237.64^65535^1024^100^</instance>
        <instance>^Port 1^321.28^99.999^31.445^0^11517440^11517440^11517440^0.0^1^14.17^152.231054536425^233.23^ ^ ^ ^True</instance>
        <instance>^Port 2^321.31^99.999^31.45^0^11518360^11518360^11518360^0.0^1^13.95^152.224037464535^237.64^ ^ ^ ^True</instance>
        <instance>^Port 3^321.28^99.999^31.445^0^11517471^11517471^11517471^0.0^1^13.74^152.235078500306^233.98^ ^ ^ ^True</instance>
        <instance>1^ ^ ^ ^ ^ ^34552567^34552567^34552567^0.0^ ^53.05^157.432483266728^432.02^65535^1024^100^</instance>
        <instance>^Port 1^321.23^99.999^31.446^0^11519234^11519234^11519234^0.0^1^53.48^157.424265593528^277.39^ ^ ^ ^True</instance>
        <instance>^Port 2^321.33^99.999^31.447^0^11516326^11516326^11516326^0.0^1^53.27^157.443231123364^271.96^ ^ ^ ^True</instance>
        <instance>^Port 3^321.3^99.999^31.446^0^11517007^11517007^11517007^0.0^1^53.05^157.429955307833^432.02^ ^ ^ ^True</instance>
        <instance>1^ ^ ^ ^ ^ ^33913805^33913805^33913805^0.0^ ^77.37^157.935490773742^436.34^65535^1024^100^</instance>
        <instance>^Port 1^321.29^99.999^30.867^0^11305559^11305559^11305559^0.0^1^77.37^157.934090227648^436.34^ ^ ^ ^True</instance>
        <instance>^Port 2^321.31^99.999^30.864^0^11303728^11303728^11303728^0.0^1^77.66^157.920225361934^432.43^ ^ ^ ^True</instance>
        <instance>^Port 3^321.29^99.999^30.865^0^11304518^11304518^11304518^0.0^1^78.84^157.952155793816^431.53^ ^ ^ ^True</instance>
        <instance>1^ ^ ^ ^ ^ ^31742113^31742113^31742113^0.0^ ^77.36^175.685187229344^1066.36^65535^1024^100^</instance>
        <instance>^Port 1^321.17^99.999^28.882^0^10581915^10581915^10581915^0.0^1^79.19^175.697417930498^1064.43^ ^ ^ ^True</instance>
        <instance>^Port 2^321.32^99.999^28.889^0^10579985^10579985^10579985^0.0^1^77.36^175.772224798995^1060.71^ ^ ^ ^True</instance>
        <instance>^Port 3^321.34^99.999^28.891^0^10580213^10580213^10580213^0.0^1^79.14^175.585918866662^1066.36^ ^ ^ ^True</instance>
      </value>
      <path>SELECT TrialNum||'^'|| TrafficGroupName ||'^'|| FrameSize ||'^'|| IntendedLoad ||'^'|| OfferedLoad ||'^'||PfcFrameCount ||'^'|| TxFrameCount ||'^'|| RxFrameCount ||'^'|| ExpectedRxFrameCount ||'^'|| Coalesce(DroppedFramePct, '') ||'^'|| BurstSize ||'^'|| MinLatency ||'^'|| AvgLatency ||'^'|| MaxLatency ||'^'|| CASE WHEN PfcTxQuantum = -1 THEN 'Random' ELSE PfcTxQuantum END ||'^'|| PfcTxXonDelay ||'^'|| PfcTxPauseRate ||'^'|| IsConformant FROM ( SELECT TrialNum, DataSetId, ' ' AS TrafficGroupName, ' ' AS FrameSize, ' ' AS IntendedLoad, ' ' AS OfferedLoad, ForwardingRate, ' ' AS PfcFrameCount ,TxFrameCount ,RxFrameCount ,ExpectedRxFrameCount,DroppedFramePct ,' ' AS BurstSize , MinLatency , AvgLatency , MaxLatency ,PfcTxQuantum ,CASE WHEN PfcTxXonEnabled = 1 THEN PfcTxXonDelay ELSE 'N/A' END AS PfcTxXonDelay ,PfcTxPauseRate, ' ' AS IsConformant FROM DcbPfcLoadValidationPerIterationResult UNION SELECT ' ' AS TrialNum, DataSetId, TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END AS FrameSize , IntendedLoad, OfferedLoad, ForwardingRate, PfcRxTriggerCount AS PfcFrameCount ,TxFrameCount ,RxFrameCount ,ExpectedRxFrameCount,DroppedFramePct,BurstSize , MinLatency , AvgLatency , MaxLatency ,' ' AS PfcTxQuantum ,' ' AS PfcTxXonDelay ,' ' AS PfcTxPauseRate, CASE WHEN IsConformant==1 THEN 'True' ELSE 'False' END IsConformant FROM DcbTrafficGroupPerIterationResult ORDER BY DataSetId, TrafficGroupName )</path>
      <multivalued>true</multivalued>
      <pageName>Trial Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>Test_TxCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance>10581915</instance>
        <instance>11519234</instance>
        <instance>11518333</instance>
        <instance>11517440</instance>
        <instance>11305559</instance>
        <instance>11515874</instance>
        <instance>11517057</instance>
        <instance>11516472</instance>
        <instance>11516334</instance>
        <instance>45857561</instance>
        <instance>10579985</instance>
        <instance>11516326</instance>
        <instance>11517460</instance>
        <instance>11517562</instance>
        <instance>11517471</instance>
        <instance>22821434</instance>
        <instance>11517007</instance>
        <instance>22096424</instance>
        <instance>11515029</instance>
      </value>
      <path>select Sum(TxFrameCOunt) from DcbTrafficGroupPerIterationresult GROUP BY TrafficGroupName,CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad ORDER BY TrafficGroupName, OfferedAvgFrameSize,BurstSize,IntendedLoad</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>Test_RxCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance>10581915</instance>
        <instance>11519234</instance>
        <instance>11518333</instance>
        <instance>11517440</instance>
        <instance>11305559</instance>
        <instance>11515874</instance>
        <instance>11517057</instance>
        <instance>11516472</instance>
        <instance>11516334</instance>
        <instance>45857561</instance>
        <instance>10579985</instance>
        <instance>11516326</instance>
        <instance>11517460</instance>
        <instance>11517562</instance>
        <instance>11517471</instance>
        <instance>22821434</instance>
        <instance>11517007</instance>
        <instance>22096424</instance>
        <instance>11515029</instance>
      </value>
      <path>select Sum(RxFrameCOunt) from DcbTrafficGroupPerIterationresult GROUP BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize,IntendedLoad ORDER BY TrafficGroupName, OfferedAvgFrameSize,BurstSize,IntendedLoad</path>
      <multivalued>true</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>Test_BurstSize</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
      </value>
      <path>select BurstSize from DcbTrafficGroupPerIterationresult GROUP BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad ORDER BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad</path>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>Adv_BurstSize</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
      </value>
      <path>select BurstSize from DcbTrafficGroupPerIterationresult GROUP BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad ORDER BY TrafficGroupName, CASE WHEN framesizetype = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END,BurstSize, IntendedLoad</path>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>XonDelayUnit</name>
      <persist>false</persist>
      <value type="strings">
        <instance>quanta</instance>
      </value>
      <path>select lower(XonDelayUnit) from DcbPfcLoadValidationTestCaseConfig</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Trial Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum</name>
      <persist>false</persist>
      <value type="strings">
        <instance>2^ ^ ^ ^ ^65535^1024^100^0.0^ ^4.19^151.88866^236.73^0.0^11.27^155.53^0.0^0.0^0.0^34547237^34547237^34547237^INVALID</instance>
        <instance>2^Port 1^Random^1^99.999^ ^ ^ ^0.0^0^4.85^151.898742026007^230.79^0.0^0.0^130.47^0.0^0.0^0.0^11515874^11515874^11515874</instance>
        <instance>2^Port 2^Random^1^99.999^ ^ ^ ^0.0^0^4.63^151.912859725152^236.73^0.0^0.0^155.53^0.0^0.0^0.0^11516334^11516334^11516334</instance>
        <instance>2^Port 3^Random^1^99.999^ ^ ^ ^0.0^0^4.19^151.854375705871^233.13^0.0^0.0^129.44^0.0^0.0^0.0^11515029^11515029^11515029</instance>
        <instance>3^ ^ ^ ^ ^65535^1024^100^0.0^ ^4.16^151.88589^395.5^0.0^11.27^306.13^0.0^0.0^0.0^34549505^34549505^34549505^INVALID</instance>
        <instance>3^Port 1^Random^1^99.999^ ^ ^ ^0.0^0^4.83^151.859797836525^232.51^0.0^0.0^129.58^0.0^0.0^0.0^11516472^11516472^11516472</instance>
        <instance>3^Port 2^Random^1^99.999^ ^ ^ ^0.0^0^4.61^151.897702462537^395.5^0.0^0.0^306.13^0.0^0.0^0.0^11516822^11516822^11516822</instance>
        <instance>3^Port 3^Random^1^99.999^ ^ ^ ^0.0^0^4.16^151.900159258979^231.77^0.0^0.0^132.08^0.0^0.0^0.0^11516211^11516211^11516211</instance>
        <instance>4^ ^ ^ ^ ^65535^1024^100^0.0^ ^4.24^151.90361^298.98^0.0^11.27^150.6^0.0^0.0^0.0^34552709^34552709^34552709^INVALID</instance>
        <instance>4^Port 1^Random^1^99.999^ ^ ^ ^0.0^0^4.7^151.907888473966^298.98^0.0^0.0^150.6^0.0^0.0^0.0^11518333^11518333^11518333</instance>
        <instance>4^Port 2^Random^1^99.999^ ^ ^ ^0.0^0^4.24^151.883153253408^252.69^0.0^0.0^129.22^0.0^0.0^0.0^11517460^11517460^11517460</instance>
        <instance>4^Port 3^Random^1^99.999^ ^ ^ ^0.0^0^4.93^151.919788541481^254.38^0.0^0.0^150.22^0.0^0.0^0.0^11516916^11516916^11516916</instance>
        <instance>5^ ^ ^ ^ ^65535^1024^100^0.0^ ^4.25^151.90615^550.0^0.0^11.27^443.54^0.0^0.0^0.0^34553270^34553270^34553270^INVALID</instance>
        <instance>5^Port 1^Random^1^99.999^ ^ ^ ^0.0^0^4.91^151.889628367733^233.26^0.0^0.0^130.01^0.0^0.0^0.0^11517057^11517057^11517057</instance>
        <instance>5^Port 2^Random^1^99.999^ ^ ^ ^0.0^0^4.69^151.897000788547^230.5^0.0^0.0^140.86^0.0^0.0^0.0^11518651^11518651^11518651</instance>
        <instance>5^Port 3^Random^1^99.999^ ^ ^ ^0.0^0^4.25^151.931810749532^550.0^0.0^0.0^443.54^0.0^0.0^0.0^11517562^11517562^11517562</instance>
        <instance>6^ ^ ^ ^ ^65535^1024^100^0.0^ ^13.74^152.23006^237.64^0.0^11.26^133.1^0.0^0.0^0.0^34553271^34553271^34553271^INVALID</instance>
        <instance>6^Port 1^Random^1^99.999^ ^ ^ ^0.0^0^14.17^152.231054536425^233.23^0.0^0.0^133.1^0.0^0.0^0.0^11517440^11517440^11517440</instance>
        <instance>6^Port 2^Random^1^99.999^ ^ ^ ^0.0^0^13.95^152.224037464535^237.64^0.0^0.0^130.69^0.0^0.0^0.0^11518360^11518360^11518360</instance>
        <instance>6^Port 3^Random^1^99.999^ ^ ^ ^0.0^0^13.74^152.235078500306^233.98^0.0^0.0^131.43^0.0^0.0^0.0^11517471^11517471^11517471</instance>
        <instance>7^ ^ ^ ^ ^65535^1024^100^0.0^ ^53.05^157.43248^432.02^0.0^11.27^271.69^0.0^0.0^0.0^34552567^34552567^34552567^INVALID</instance>
        <instance>7^Port 1^Random^1^99.999^ ^ ^ ^0.0^0^53.48^157.424265593528^277.39^0.0^0.0^130.92^0.0^0.0^0.0^11519234^11519234^11519234</instance>
        <instance>7^Port 2^Random^1^99.999^ ^ ^ ^0.0^0^53.27^157.443231123364^271.96^0.0^0.0^129.24^0.0^0.0^0.0^11516326^11516326^11516326</instance>
        <instance>7^Port 3^Random^1^99.999^ ^ ^ ^0.0^0^53.05^157.429955307833^432.02^0.0^0.0^271.69^0.0^0.0^0.0^11517007^11517007^11517007</instance>
        <instance>8^ ^ ^ ^ ^65535^1024^100^0.0^ ^77.37^157.93549^436.34^0.0^11.58^310.75^0.0^0.0^0.0^33913805^33913805^33913805^INVALID</instance>
        <instance>8^Port 1^Random^1^99.999^ ^ ^ ^0.0^0^77.37^157.934090227648^436.34^0.0^0.0^310.75^0.0^0.0^0.0^11305559^11305559^11305559</instance>
        <instance>8^Port 2^Random^1^99.999^ ^ ^ ^0.0^0^77.66^157.920225361934^432.43^0.0^0.0^309.23^0.0^0.0^0.0^11303728^11303728^11303728</instance>
        <instance>8^Port 3^Random^1^99.999^ ^ ^ ^0.0^0^78.84^157.952155793816^431.53^0.0^0.0^310.71^0.0^0.0^0.0^11304518^11304518^11304518</instance>
        <instance>9^ ^ ^ ^ ^65535^1024^100^0.0^ ^77.36^175.68519^1066.36^0.0^12.8^941.04^0.0^0.0^0.0^31742113^31742113^31742113^INVALID</instance>
        <instance>9^Port 1^Random^1^99.999^ ^ ^ ^0.0^0^79.19^175.697417930498^1064.43^0.0^0.0^938.51^0.0^0.0^0.0^10581915^10581915^10581915</instance>
        <instance>9^Port 2^Random^1^99.999^ ^ ^ ^0.0^0^77.36^175.772224798995^1060.71^0.0^0.0^941.04^0.0^0.0^0.0^10579985^10579985^10579985</instance>
        <instance>9^Port 3^Random^1^99.999^ ^ ^ ^0.0^0^79.14^175.585918866662^1066.36^0.0^0.0^940.27^0.0^0.0^0.0^10580213^10580213^10580213</instance>
      </value>
      <path>SELECT SumString FROM (select Min(DataSetId), Min(DataSetId) ||'^'|| ' ' ||'^'|| ' ' ||'^'|| ' ' ||'^'|| ' ' ||'^'|| CASE WHEN PfcTxQuantum = -1 THEN 'Random' ELSE PfcTxQuantum END ||'^'|| CASE WHEN PfcTxXonEnabled = 1 THEN PfcTxXonDelay ELSE 'N/A' END ||'^'|| PfcTxPauseRate ||'^'|| Coalesce(Min(DroppedFramePct), '') ||'^'|| ' ' ||'^'|| Min(MinLatency) ||'^'|| Round(Avg(AvgLatency),5) ||'^'|| Max(MaxLatency) ||'^'|| Min(MinJitter) ||'^'|| Round(Avg(AvgJitter),5) ||'^'|| Max(MaxJitter) ||'^'|| Min(MinInterarrivalTime) ||'^'|| Round(Avg(AvgInterarrivalTime),5) ||'^'|| Max(MaxInterarrivalTime) ||'^'|| Sum(TxFrameCount) ||'^'|| Sum(RxFrameCount) ||'^'|| Sum(ExpectedRxFrameCount) ||'^'|| Result AS SumString from DcbPfcLoadValidationPerIterationResult GROUP BY LoopKey UNION ALL select Min(DataSetId), Min(DataSetId) ||'^'|| TrafficGroupName ||'^'|| (CASE WHEN upper(framesizetype) = 'RANDOM' THEN 'Random' ELSE OfferedAvgFrameSize END) ||'^'||BurstSize ||'^'|| IntendedLoad ||'^'|| ' ' ||'^'|| ' ' ||'^'|| ' ' ||'^'|| Coalesce(Min(DroppedFramePct), '') ||'^'|| Sum(PfcRxTriggerCount) ||'^'|| Coalesce(Min(MinLatency), 'N/A') ||'^'|| Coalesce(Round(Avg(AvgLatency), 5), 'N/A') ||'^'|| Coalesce(Max(MaxLatency), 'N/A') ||'^'||Min(MinJitter) ||'^'|| Round(Avg(AvgJitter),5) ||'^'|| Max(MaxJitter) ||'^'|| Min(MinInterarrivalTime) ||'^'|| Round(Avg(AvgInterarrivalTime),5) ||'^'|| Max(MaxInterarrivalTime)||'^'|| Sum(TxFrameCount) ||'^'|| Sum(RxFrameCount) ||'^'|| Sum(ExpectedRxFrameCount) AS SumString from DcbTrafficGroupPerIterationresult GROUP BY LoopKey,TrafficGroupName ORDER BY 1)</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Trial Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestMinLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>4.19</instance>
        <instance>4.16</instance>
        <instance>4.24</instance>
        <instance>4.25</instance>
        <instance>13.74</instance>
        <instance>53.05</instance>
        <instance>77.37</instance>
        <instance>77.36</instance>
      </value>
      <path>select Coalesce(Min(MinLatency), 'N/A') from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestMaxLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>236.73</instance>
        <instance>395.5</instance>
        <instance>298.98</instance>
        <instance>550.0</instance>
        <instance>237.64</instance>
        <instance>432.02</instance>
        <instance>436.34</instance>
        <instance>1066.36</instance>
      </value>
      <path>select Coalesce(Max(MaxLatency), 'N/A') from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestAvgLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>151.88866</instance>
        <instance>151.88589</instance>
        <instance>151.90361</instance>
        <instance>151.90615</instance>
        <instance>152.23006</instance>
        <instance>157.43248</instance>
        <instance>157.93549</instance>
        <instance>175.68519</instance>
      </value>
      <path>select Coalesce(Round(Avg(AvgLatency),5), 'N/A') from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestMinJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <path>select Min(MinJitter) from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestMaxJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>155.53</instance>
        <instance>306.13</instance>
        <instance>150.6</instance>
        <instance>443.54</instance>
        <instance>133.1</instance>
        <instance>271.69</instance>
        <instance>310.75</instance>
        <instance>941.04</instance>
      </value>
      <path>select Max(MaxJitter) from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestAvgJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <path>select Round(Avg(AvgJitter),5) from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum_PfcRxFrameCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance>2601420</instance>
        <instance>2601420</instance>
        <instance>2601420</instance>
        <instance>2601424</instance>
        <instance>2601424</instance>
        <instance>2601424</instance>
        <instance>2601928</instance>
        <instance>2601928</instance>
        <instance>2601928</instance>
        <instance>2601608</instance>
        <instance>2601608</instance>
        <instance>2601608</instance>
        <instance>2601773</instance>
        <instance>2601773</instance>
        <instance>2601773</instance>
        <instance>2601801</instance>
        <instance>2601801</instance>
        <instance>2601801</instance>
        <instance>2625562</instance>
        <instance>2625562</instance>
        <instance>2625562</instance>
        <instance>2707734</instance>
        <instance>2707734</instance>
        <instance>2707734</instance>
      </value>
      <path>SELECT PfcRxFrameCount FROM DcbTrafficGroupPerIterationResult ORDER BY DataSetId, TrafficGroupName</path>
      <multivalued>true</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum_PfcTotalQuanta</name>
      <persist>false</persist>
      <value type="strings">
        <instance>348867390</instance>
        <instance>348867390</instance>
        <instance>348867390</instance>
        <instance>348875117</instance>
        <instance>348875117</instance>
        <instance>348875117</instance>
        <instance>348885738</instance>
        <instance>348885738</instance>
        <instance>348885738</instance>
        <instance>348886199</instance>
        <instance>348886199</instance>
        <instance>348886199</instance>
        <instance>348902238</instance>
        <instance>348902238</instance>
        <instance>348902238</instance>
        <instance>348871777</instance>
        <instance>348871777</instance>
        <instance>348871777</instance>
        <instance>353199172</instance>
        <instance>353199172</instance>
        <instance>353199172</instance>
        <instance>368128967</instance>
        <instance>368128967</instance>
        <instance>368128967</instance>
      </value>
      <path>SELECT PfcRxTotalQuanta FROM DcbTrafficGroupPerIterationResult ORDER BY DataSetId, TrafficGroupName</path>
      <multivalued>true</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TestSum_PfcRxQuanta</name>
      <persist>false</persist>
      <value type="strings">
        <instance>348867390</instance>
        <instance>348867390</instance>
        <instance>348867390</instance>
        <instance>348875117</instance>
        <instance>348875117</instance>
        <instance>348875117</instance>
        <instance>348885738</instance>
        <instance>348885738</instance>
        <instance>348885738</instance>
        <instance>348886199</instance>
        <instance>348886199</instance>
        <instance>348886199</instance>
        <instance>348902238</instance>
        <instance>348902238</instance>
        <instance>348902238</instance>
        <instance>348871777</instance>
        <instance>348871777</instance>
        <instance>348871777</instance>
        <instance>353199172</instance>
        <instance>353199172</instance>
        <instance>353199172</instance>
        <instance>368128967</instance>
        <instance>368128967</instance>
        <instance>368128967</instance>
      </value>
      <path>SELECT CASE WHEN PfcRxTotalQuanta IS NULL THEN 'N/A' ELSE Sum(PfcRxTotalQuanta) END from DcbTrafficGroupPerIterationresult GROUP BY LoopKey,TrafficGroupName order BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum_PfcRxFrameCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance>2601420</instance>
        <instance>2601420</instance>
        <instance>2601420</instance>
        <instance>2601424</instance>
        <instance>2601424</instance>
        <instance>2601424</instance>
        <instance>2601928</instance>
        <instance>2601928</instance>
        <instance>2601928</instance>
        <instance>2601608</instance>
        <instance>2601608</instance>
        <instance>2601608</instance>
        <instance>2601773</instance>
        <instance>2601773</instance>
        <instance>2601773</instance>
        <instance>2601801</instance>
        <instance>2601801</instance>
        <instance>2601801</instance>
        <instance>2625562</instance>
        <instance>2625562</instance>
        <instance>2625562</instance>
        <instance>2707734</instance>
        <instance>2707734</instance>
        <instance>2707734</instance>
      </value>
      <path>SELECT CASE WHEN PfcRxFrameCount IS NULL THEN 'N/A' ELSE Sum(PfcRxFrameCount) END from DcbTrafficGroupPerIterationresult GROUP BY LoopKey,TrafficGroupName order BY Min(DataSetId)</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestMinArrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <path>select Min(MinInterArrivalTime) from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestAvgArrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <path>select ROUND(Avg(AvgInterarrivalTime),5) from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestMaxArrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <path>select Max(MaxInterarrivalTime) from DcbTrafficGroupPerIterationresult GROUP BY LoopKey ORDER BY Min(DataSetId)</path>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>Tolerance</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1.0</instance>
      </value>
      <path>Select Tolerance From DcbPfcLoadValidationTestCaseConfig</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum_Result_Map</name>
      <persist>false</persist>
      <value type="strings">
        <instance>101</instance>
        <instance>101</instance>
        <instance>101</instance>
        <instance>101</instance>
        <instance>101</instance>
        <instance>101</instance>
        <instance>101</instance>
        <instance>101</instance>
      </value>
      <path>SELECT SUM(Result) FROM (SELECT MIN(DataSetId) AS DataSetId, LoopKey, CASE WHEN Result = 'VALID' THEN 0 WHEN Result = 'INVALID' THEN 101 ELSE 439 END AS Result FROM DcbPfcLoadValidationPerIterationResult GROUP BY LoopKey) GROUP BY LoopKey ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_PortName</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Port //1/4</instance>
        <instance>Port //1/4</instance>
        <instance>Port //1/4</instance>
        <instance>Port //1/4</instance>
        <instance>Port //1/4</instance>
        <instance>Port //1/4</instance>
        <instance>Port //1/4</instance>
        <instance>Port //1/4</instance>
      </value>
      <path>SELECT Port FROM DcbPfcLoadValidationPerIterationPerPortResult</path>
      <multivalued>true</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_PriorityResult</name>
      <persist>false</persist>
      <value type="strings">
        <instance>[CASE WHEN Pri0Result = 'VALID' THEN 'Valid' WHEN Pri0Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END, CASE WHEN Pri1Result = 'VALID' THEN 'Valid' WHEN Pri1Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END, CASE WHEN Pri2Result = 'VALID' THEN 'Valid' WHEN Pri2Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END, CASE WHEN Pri3Result = 'VALID' THEN 'Valid' WHEN Pri3Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END, CASE WHEN Pri4Result = 'VALID' THEN 'Valid' WHEN Pri4Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END, CASE WHEN Pri5Result = 'VALID' THEN 'Valid' WHEN Pri5Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END, CASE WHEN Pri6Result = 'VALID' THEN 'Valid' WHEN Pri6Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END, CASE WHEN Pri7Result = 'VALID' THEN 'Valid' WHEN Pri7Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END]</instance>
        <instance>[Valid, Valid, Valid, Invalid, Valid, Valid, Valid, Valid]</instance>
        <instance>[Valid, Valid, Valid, Invalid, Valid, Valid, Valid, Valid]</instance>
        <instance>[Valid, Valid, Valid, Invalid, Valid, Valid, Valid, Valid]</instance>
        <instance>[Valid, Valid, Valid, Invalid, Valid, Valid, Valid, Valid]</instance>
        <instance>[Valid, Valid, Valid, Invalid, Valid, Valid, Valid, Valid]</instance>
        <instance>[Valid, Valid, Valid, Invalid, Valid, Valid, Valid, Valid]</instance>
        <instance>[Valid, Valid, Valid, Invalid, Valid, Valid, Valid, Valid]</instance>
        <instance>[Valid, Valid, Valid, Invalid, Valid, Valid, Valid, Valid]</instance>
      </value>
      <path>SELECT CASE WHEN Pri0Result = 'VALID' THEN 'Valid' WHEN Pri0Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END, CASE WHEN Pri1Result = 'VALID' THEN 'Valid' WHEN Pri1Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END, CASE WHEN Pri2Result = 'VALID' THEN 'Valid' WHEN Pri2Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END, CASE WHEN Pri3Result = 'VALID' THEN 'Valid' WHEN Pri3Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END, CASE WHEN Pri4Result = 'VALID' THEN 'Valid' WHEN Pri4Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END, CASE WHEN Pri5Result = 'VALID' THEN 'Valid' WHEN Pri5Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END, CASE WHEN Pri6Result = 'VALID' THEN 'Valid' WHEN Pri6Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END, CASE WHEN Pri7Result = 'VALID' THEN 'Valid' WHEN Pri7Result = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END FROM DcbPfcLoadValidationPerIterationPerPortResult</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxFrameCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance>[GenTxPfcPri0FrameCount, GenTxPfcPri1FrameCount, GenTxPfcPri2FrameCount, GenTxPfcPri3FrameCount, GenTxPfcPri4FrameCount, GenTxPfcPri5FrameCount, GenTxPfcPri6FrameCount, GenTxPfcPri7FrameCount]</instance>
        <instance>[0, 0, 0, 2000, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 2000, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 2000, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 2000, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 2000, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 2000, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 2000, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 2000, 0, 0, 0, 0]</instance>
      </value>
      <path>SELECT GenTxPfcPri0FrameCount, GenTxPfcPri1FrameCount, GenTxPfcPri2FrameCount, GenTxPfcPri3FrameCount, GenTxPfcPri4FrameCount, GenTxPfcPri5FrameCount, GenTxPfcPri6FrameCount, GenTxPfcPri7FrameCount FROM DcbPfcLoadValidationPerIterationPerPortResult</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxQuanta</name>
      <persist>false</persist>
      <value type="strings">
        <instance>[GenTxPfcPri0Quanta, GenTxPfcPri1Quanta, GenTxPfcPri2Quanta, GenTxPfcPri3Quanta, GenTxPfcPri4Quanta, GenTxPfcPri5Quanta, GenTxPfcPri6Quanta, GenTxPfcPri7Quanta]</instance>
        <instance>[0, 0, 0, 1024000, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 1024000, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 1024000, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 1024000, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 1024000, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 1024000, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 1024000, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 1024000, 0, 0, 0, 0]</instance>
      </value>
      <path>SELECT GenTxPfcPri0Quanta, GenTxPfcPri1Quanta, GenTxPfcPri2Quanta, GenTxPfcPri3Quanta, GenTxPfcPri4Quanta, GenTxPfcPri5Quanta, GenTxPfcPri6Quanta, GenTxPfcPri7Quanta FROM DcbPfcLoadValidationPerIterationPerPortResult</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_DutIntendedLoad</name>
      <persist>false</persist>
      <value type="strings">
        <instance>[MIN(100.0, StreamRxPri0IntendedLoad), MIN(100.0, StreamRxPri1IntendedLoad), MIN(100.0, StreamRxPri2IntendedLoad), MIN(100.0, StreamRxPri3IntendedLoad), MIN(100.0, StreamRxPri4IntendedLoad), MIN(100.0, StreamRxPri5IntendedLoad), MIN(100.0, StreamRxPri6IntendedLoad), MIN(100.0, StreamRxPri7IntendedLoad)]</instance>
        <instance>[0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0]</instance>
        <instance>[0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0]</instance>
        <instance>[0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0]</instance>
        <instance>[0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0]</instance>
        <instance>[0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0]</instance>
        <instance>[0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0]</instance>
        <instance>[0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0]</instance>
        <instance>[0.0, 0.0, 0.0, 100.0, 0.0, 0.0, 0.0, 0.0]</instance>
      </value>
      <path>SELECT MIN(100.0, StreamRxPri0IntendedLoad), MIN(100.0, StreamRxPri1IntendedLoad), MIN(100.0, StreamRxPri2IntendedLoad), MIN(100.0, StreamRxPri3IntendedLoad), MIN(100.0, StreamRxPri4IntendedLoad), MIN(100.0, StreamRxPri5IntendedLoad), MIN(100.0, StreamRxPri6IntendedLoad), MIN(100.0, StreamRxPri7IntendedLoad) FROM DcbPfcLoadValidationPerIterationPerPortResult</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_DutOfferedLoad</name>
      <persist>false</persist>
      <value type="strings">
        <instance>[StreamRxPri0OfferedLoad, StreamRxPri1OfferedLoad, StreamRxPri2OfferedLoad, StreamRxPri3OfferedLoad, StreamRxPri4OfferedLoad, StreamRxPri5OfferedLoad, StreamRxPri6OfferedLoad, StreamRxPri7OfferedLoad]</instance>
        <instance>[0.0, 0.0, 0.0, 94.343, 0.0, 0.0, 0.0, 0.0]</instance>
        <instance>[0.0, 0.0, 0.0, -28.633, 0.0, 0.0, 0.0, 0.0]</instance>
        <instance>[0.0, 0.0, 0.0, 94.342, 0.0, 0.0, 0.0, 0.0]</instance>
        <instance>[0.0, 0.0, 0.0, -28.632, 0.0, 0.0, 0.0, 0.0]</instance>
        <instance>[0.0, 0.0, 0.0, -29.227, 0.0, 0.0, 0.0, 0.0]</instance>
        <instance>[0.0, 0.0, 0.0, 94.338, 0.0, 0.0, 0.0, 0.0]</instance>
        <instance>[0.0, 0.0, 0.0, -28.102, 0.0, 0.0, 0.0, 0.0]</instance>
        <instance>[0.0, 0.0, 0.0, -26.301, 0.0, 0.0, 0.0, 0.0]</instance>
      </value>
      <path>SELECT StreamRxPri0OfferedLoad, StreamRxPri1OfferedLoad, StreamRxPri2OfferedLoad, StreamRxPri3OfferedLoad, StreamRxPri4OfferedLoad, StreamRxPri5OfferedLoad, StreamRxPri6OfferedLoad, StreamRxPri7OfferedLoad FROM DcbPfcLoadValidationPerIterationPerPortResult</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_MinValidLoad</name>
      <persist>false</persist>
      <value type="strings">
        <instance>[CASE WHEN StreamMinValidRxPri0OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri0OfferedLoad END, CASE WHEN StreamMinValidRxPri1OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri1OfferedLoad END, CASE WHEN StreamMinValidRxPri2OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri2OfferedLoad END, CASE WHEN StreamMinValidRxPri3OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri3OfferedLoad END, CASE WHEN StreamMinValidRxPri4OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri4OfferedLoad END, CASE WHEN StreamMinValidRxPri5OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri5OfferedLoad END, CASE WHEN StreamMinValidRxPri6OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri6OfferedLoad END, CASE WHEN StreamMinValidRxPri7OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri7OfferedLoad END]</instance>
        <instance>[N/A, N/A, N/A, 98.476, N/A, N/A, N/A, N/A]</instance>
        <instance>[N/A, N/A, N/A, 0.0, N/A, N/A, N/A, N/A]</instance>
        <instance>[N/A, N/A, N/A, 98.476, N/A, N/A, N/A, N/A]</instance>
        <instance>[N/A, N/A, N/A, 0.0, N/A, N/A, N/A, N/A]</instance>
        <instance>[N/A, N/A, N/A, 0.0, N/A, N/A, N/A, N/A]</instance>
        <instance>[N/A, N/A, N/A, 98.476, N/A, N/A, N/A, N/A]</instance>
        <instance>[N/A, N/A, N/A, 0.0, N/A, N/A, N/A, N/A]</instance>
        <instance>[N/A, N/A, N/A, 0.0, N/A, N/A, N/A, N/A]</instance>
      </value>
      <path>SELECT CASE WHEN StreamMinValidRxPri0OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri0OfferedLoad END, CASE WHEN StreamMinValidRxPri1OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri1OfferedLoad END, CASE WHEN StreamMinValidRxPri2OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri2OfferedLoad END, CASE WHEN StreamMinValidRxPri3OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri3OfferedLoad END, CASE WHEN StreamMinValidRxPri4OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri4OfferedLoad END, CASE WHEN StreamMinValidRxPri5OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri5OfferedLoad END, CASE WHEN StreamMinValidRxPri6OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri6OfferedLoad END, CASE WHEN StreamMinValidRxPri7OfferedLoad IS NULL THEN 'N/A' ELSE StreamMinValidRxPri7OfferedLoad END FROM DcbPfcLoadValidationPerIterationPerPortResult</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_MaxValidLoad</name>
      <persist>false</persist>
      <value type="strings">
        <instance>[CASE WHEN StreamMaxValidRxPri0OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri0OfferedLoad END, CASE WHEN StreamMaxValidRxPri1OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri1OfferedLoad END, CASE WHEN StreamMaxValidRxPri2OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri2OfferedLoad END, CASE WHEN StreamMaxValidRxPri3OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri3OfferedLoad END, CASE WHEN StreamMaxValidRxPri4OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri4OfferedLoad END, CASE WHEN StreamMaxValidRxPri5OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri5OfferedLoad END, CASE WHEN StreamMaxValidRxPri6OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri6OfferedLoad END, CASE WHEN StreamMaxValidRxPri7OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri7OfferedLoad END]</instance>
        <instance>[N/A, N/A, N/A, 100.0, N/A, N/A, N/A, N/A]</instance>
        <instance>[N/A, N/A, N/A, 0.0, N/A, N/A, N/A, N/A]</instance>
        <instance>[N/A, N/A, N/A, 100.0, N/A, N/A, N/A, N/A]</instance>
        <instance>[N/A, N/A, N/A, 0.0, N/A, N/A, N/A, N/A]</instance>
        <instance>[N/A, N/A, N/A, 0.0, N/A, N/A, N/A, N/A]</instance>
        <instance>[N/A, N/A, N/A, 100.0, N/A, N/A, N/A, N/A]</instance>
        <instance>[N/A, N/A, N/A, 0.0, N/A, N/A, N/A, N/A]</instance>
        <instance>[N/A, N/A, N/A, 0.0, N/A, N/A, N/A, N/A]</instance>
      </value>
      <path>SELECT CASE WHEN StreamMaxValidRxPri0OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri0OfferedLoad END, CASE WHEN StreamMaxValidRxPri1OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri1OfferedLoad END, CASE WHEN StreamMaxValidRxPri2OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri2OfferedLoad END, CASE WHEN StreamMaxValidRxPri3OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri3OfferedLoad END, CASE WHEN StreamMaxValidRxPri4OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri4OfferedLoad END, CASE WHEN StreamMaxValidRxPri5OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri5OfferedLoad END, CASE WHEN StreamMaxValidRxPri6OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri6OfferedLoad END, CASE WHEN StreamMaxValidRxPri7OfferedLoad IS NULL THEN 'N/A' ELSE StreamMaxValidRxPri7OfferedLoad END FROM DcbPfcLoadValidationPerIterationPerPortResult</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_PortResult</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Invalid</instance>
        <instance>Invalid</instance>
        <instance>Invalid</instance>
        <instance>Invalid</instance>
        <instance>Invalid</instance>
        <instance>Invalid</instance>
        <instance>Invalid</instance>
        <instance>Invalid</instance>
      </value>
      <path>SELECT CASE WHEN PortResult = 'VALID' THEN 'Valid' WHEN PortResult = 'INVALID' THEN 'Invalid' ELSE 'Undetermined' END FROM DcbPfcLoadValidationPerIterationPerPortResult</path>
      <multivalued>true</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>NumTrafficGroups</name>
      <persist>false</persist>
      <value type="strings">
        <instance>3</instance>
      </value>
      <path>SELECT COUNT(*) FROM (SELECT DISTINCT TrafficGroupName FROM DcbTrafficGroupPerIterationResult)</path>
      <multivalued>true</multivalued>
      <pageName>Trial Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum_PfcTxQuanta</name>
      <persist>false</persist>
      <value type="strings">
        <instance>[PfcPri0Quanta, PfcPri1Quanta, PfcPri2Quanta, PfcPri3Quanta, PfcPri4Quanta, PfcPri5Quanta, PfcPri6Quanta, PfcPri7Quanta]</instance>
        <instance>[0, 0, 0, 348867390, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 348875117, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 348885738, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 348886199, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 348902238, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 348871777, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 353199172, 0, 0, 0, 0]</instance>
        <instance>[0, 0, 0, 368128967, 0, 0, 0, 0]</instance>
      </value>
      <path>SELECT PfcPri0Quanta, PfcPri1Quanta, PfcPri2Quanta, PfcPri3Quanta, PfcPri4Quanta, PfcPri5Quanta, PfcPri6Quanta, PfcPri7Quanta FROM DcbPfcLoadValidationPerIterationResult</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>NumTrials</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
      </value>
      <path>SELECT MAX(TrialNum) FROM DcbPfcLoadValidationPerIterationResult</path>
      <multivalued>true</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>NumIterations</name>
      <persist>false</persist>
      <value type="strings">
        <instance>8</instance>
      </value>
      <path>SELECT COUNT(*) FROM DcbPfcLoadValidationPerIterationResult</path>
      <multivalued>true</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_DataSetIds</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
        <instance>2</instance>
        <instance>3</instance>
        <instance>4</instance>
        <instance>5</instance>
        <instance>6</instance>
        <instance>7</instance>
        <instance>8</instance>
      </value>
      <path>SELECT DataSetId - 1 FROM DcbPfcLoadValidationPerIterationPerPortResult</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TrialSum_Result_Raw</name>
      <persist>false</persist>
      <value type="strings">
        <instance>INVALID</instance>
        <instance>INVALID</instance>
        <instance>INVALID</instance>
        <instance>INVALID</instance>
        <instance>INVALID</instance>
        <instance>INVALID</instance>
        <instance>INVALID</instance>
        <instance>INVALID</instance>
      </value>
      <path>SELECT Result FROM DcbPfcLoadValidationPerIterationResult</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TrialSum_VlanPriority</name>
      <persist>false</persist>
      <value type="strings">
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
      </value>
      <path>SELECT CASE WHEN VlanPriority IS NULL THEN 'N/A' ELSE VlanPriority END AS VlanPriority FROM DcbTrafficGroupPerIterationResult ORDER BY DataSetId, TrafficGroupName</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Priority_TrialNum</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
      </value>
      <path>SELECT TrialNum FROM DcbPfcLoadValidationPerIterationResult D JOIN DcbPfcLoadValidationPerIterationPerPortResult P ON D.DataSetId = P.DataSetId ORDER BY P.DataSetId, Port</path>
      <multivalued>true</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>NumTrafficGroups</name>
      <persist>false</persist>
      <value type="strings">
        <instance>3</instance>
      </value>
      <path>SELECT COUNT(*) FROM (SELECT DISTINCT TrafficGroupName FROM DcbTrafficGroupPerIterationResult)</path>
      <multivalued>true</multivalued>
      <pageName>Trial Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>Trial_PfcTxResults</name>
      <persist>false</persist>
      <value type="strings">
        <instance>[PfcTxPauseTime, PfcTxQuantum, PfcTxXonEnabled, PfcTxPauseRate]</instance>
        <instance>[1, 65535, 1, 100]</instance>
        <instance>[4, 65535, 1, 100]</instance>
        <instance>[16, 65535, 1, 100]</instance>
        <instance>[64, 65535, 1, 100]</instance>
        <instance>[256, 65535, 1, 100]</instance>
        <instance>[1024, 65535, 1, 100]</instance>
        <instance>[4096, 65535, 1, 100]</instance>
        <instance>[16384, 65535, 1, 100]</instance>
      </value>
      <path>SELECT PfcTxPauseTime, PfcTxQuantum, PfcTxXonEnabled, PfcTxPauseRate FROM DcbPfcLoadValidationPerIterationResult ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>Test_PfcTxResults</name>
      <persist>false</persist>
      <value type="strings">
        <instance>[PfcTxPauseTime, PfcTxQuantum, PfcTxXonEnabled, PfcTxPauseRate]</instance>
        <instance>[1, 65535, 1, 100]</instance>
        <instance>[4, 65535, 1, 100]</instance>
        <instance>[16, 65535, 1, 100]</instance>
        <instance>[64, 65535, 1, 100]</instance>
        <instance>[256, 65535, 1, 100]</instance>
        <instance>[1024, 65535, 1, 100]</instance>
        <instance>[4096, 65535, 1, 100]</instance>
        <instance>[16384, 65535, 1, 100]</instance>
      </value>
      <path>SELECT PfcTxPauseTime, PfcTxQuantum, PfcTxXonEnabled, PfcTxPauseRate FROM DcbPfcLoadValidationPerIterationResult ORDER BY DataSetId</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>PauseTimeUnit</name>
      <persist>false</persist>
      <value type="strings">
        <instance>quanta</instance>
      </value>
      <path>select lower(PauseTimeUnit) from DcbPfcLoadValidationTestCaseConfig order by Id desc limit 1</path>
      <multivalued>true</multivalued>
      <pageName>ALL</pageName>
    </instance>
  </reported>
  <computed>
    <instance>
      <name>ReportDate</name>
      <persist>false</persist>
      <value type="String">2010-08-27 15:40:07 EDT</value>
      <script><![CDATA[# generate the current date&#xa;set systemTime [clock seconds]&#xa;set result [clock format $systemTime -format "%Y-%m-%d %H:%M:%S  %Z"]]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestStartDate</name>
      <persist>false</persist>
      <value type="String">2010-08-27 10:42:20 EDT</value>
      <script><![CDATA[# generate the report start time - must convert FROM GMT to local time&#xa;#  - test time is stored as 2007-01-15 19:50:39 gmt&#xa;#  - must convert to "mm/dd/yyyy hh:mm:ss GMT" format&#xa;#  - then must convert to local time&#xa;&#xa;#clear the return "result"  list in case it was used before&#xa;set  result {}&#xa;&#xa;set  dateSplit [split $tstStartDate -]&#xa;&#xa;set yy [lindex $dateSplit 0]&#xa;set mm [lindex $dateSplit 1]&#xa;set rest [lindex $dateSplit 2]&#xa;&#xa;set timeSplit [split $rest]&#xa;set dd [lindex $timeSplit 0]&#xa;set time [lindex $timeSplit 1]&#xa;&#xa;#set result "$mm/$dd/$yy $time"&#xa;set formattedDate "$mm/$dd/$yy $time GMT"&#xa;&#xa;#set result $formattedDate&#xa;&#xa;set testTime [clock scan $formattedDate]&#xa;set result [clock format $testTime -format "%Y-%m-%d %H:%M:%S  %Z"]&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Title</pageName>
    </instance>
    <instance>
      <name>TestEndDate</name>
      <persist>false</persist>
      <value type="String">-</value>
      <script><![CDATA[# generate the report end time - must convert FROM GMT to local time&#xa;#  - test time is stored as 2007-01-15 19:50:39 gmt&#xa;#  - must convert to "mm/dd/yyyy hh:mm:ss GMT" format&#xa;#  - then must convert to local time&#xa;&#xa;#clear the return "result"  list in case it was used before&#xa;set  result {}&#xa;&#xa;set  dateSplit [split $tstEndDate -]&#xa;&#xa;set yy [lindex $dateSplit 0]&#xa;set mm [lindex $dateSplit 1]&#xa;set rest [lindex $dateSplit 2]&#xa;&#xa;set timeSplit [split $rest]&#xa;set dd [lindex $timeSplit 0]&#xa;set time [lindex $timeSplit 1]&#xa;&#xa;#set result "$mm/$dd/$yy $time"&#xa;set formattedDate "$mm/$dd/$yy $time GMT"&#xa;&#xa;#set result $formattedDate&#xa;&#xa;set testTime [clock scan $formattedDate]&#xa;set result [clock format $testTime -format "%Y-%m-%d %H:%M:%S  %Z"]&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>CounterModeType</name>
      <persist>false</persist>
      <value type="String">Latency_jitter</value>
      <script><![CDATA[# Determine counter mode&#xa;&#xa;set str [string range $CounterMode 0 0]&#xa;set str [string toupper $str]&#xa;set str2 [string range $CounterMode 1 end]&#xa;set result $str$str2]]></script>
      <multivalued>false</multivalued>
      <pageName>Title</pageName>
    </instance>
    <instance>
      <name>RRTemplateSavedTimestampMS</name>
      <persist>true</persist>
      <value type="String">1282589754733</value>
      <script><![CDATA[set result "1282942104566"]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>RRTemplateSavedTimestamp</name>
      <persist>true</persist>
      <value type="String">Mon Aug 23 14:55:54.733 EDT 2010</value>
      <script><![CDATA[set result "Fri Aug 27 16:48:24.566 EDT 2010"]]></script>
      <multivalued>false</multivalued>
      <pageName>Version</pageName>
    </instance>
    <instance>
      <name>TrialSum.FS</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>321.32</instance>
        <instance>321.3</instance>
        <instance>321.46</instance>
        <instance></instance>
        <instance>321.35</instance>
        <instance>321.31</instance>
        <instance>321.34</instance>
        <instance></instance>
        <instance>321.27</instance>
        <instance>321.35</instance>
        <instance>321.29</instance>
        <instance></instance>
        <instance>321.33</instance>
        <instance>321.31</instance>
        <instance>321.25</instance>
        <instance></instance>
        <instance>321.28</instance>
        <instance>321.31</instance>
        <instance>321.28</instance>
        <instance></instance>
        <instance>321.23</instance>
        <instance>321.33</instance>
        <instance>321.3</instance>
        <instance></instance>
        <instance>321.29</instance>
        <instance>321.31</instance>
        <instance>321.29</instance>
        <instance></instance>
        <instance>321.17</instance>
        <instance>321.32</instance>
        <instance>321.34</instance>
      </value>
      <script><![CDATA[# Calculate trial summary results frame size values&#xa;set result [list]&#xa;&#xa;catch { array unset TrialSumData }&#xa;set cols [list TrialNum TrafficGroupName Fs Intended Offered PfcCount TxFrameCount RxFrameCount ExpectedRxFrameCount DroppedFramePct  BS MinLatency AvgLatency MaxLatency PfcTxQuantum PfcTxXonDelay PfcTxPauseRate IsConformant ]&#xa;&#xa;foreach col $cols {&#xa;   set TrialSumData($col) [list]&#xa;}&#xa;&#xa;foreach row $TrialSum {&#xa;   set rowList [split $row "^"]&#xa;   foreach col $cols value $rowList {&#xa;      lappend TrialSumData($col) $value&#xa;   }&#xa;}&#xa;&#xa;set result $TrialSumData(Fs)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.TrafficGroup</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
      </value>
      <script><![CDATA[# Calculate trial summary traffic group&#xa;set result $TrialSumData(TrafficGroupName)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.MinLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>4.19</instance>
        <instance>4.85</instance>
        <instance>4.63</instance>
        <instance>4.19</instance>
        <instance>4.16</instance>
        <instance>4.83</instance>
        <instance>4.61</instance>
        <instance>4.16</instance>
        <instance>4.24</instance>
        <instance>4.7</instance>
        <instance>4.24</instance>
        <instance>4.93</instance>
        <instance>4.25</instance>
        <instance>4.91</instance>
        <instance>4.69</instance>
        <instance>4.25</instance>
        <instance>13.74</instance>
        <instance>14.17</instance>
        <instance>13.95</instance>
        <instance>13.74</instance>
        <instance>53.05</instance>
        <instance>53.48</instance>
        <instance>53.27</instance>
        <instance>53.05</instance>
        <instance>77.37</instance>
        <instance>77.37</instance>
        <instance>77.66</instance>
        <instance>78.84</instance>
        <instance>77.36</instance>
        <instance>79.19</instance>
        <instance>77.36</instance>
        <instance>79.14</instance>
      </value>
      <script><![CDATA[# Calculate trial summary MinLatency&#xa;set result $TrialSumData(MinLatency)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.AvgLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>151.888660313124</instance>
        <instance>151.898742026007</instance>
        <instance>151.912859725152</instance>
        <instance>151.854375705871</instance>
        <instance>151.885886531225</instance>
        <instance>151.859797836525</instance>
        <instance>151.897702462537</instance>
        <instance>151.900159258979</instance>
        <instance>151.903609943</instance>
        <instance>151.907888473966</instance>
        <instance>151.883153253408</instance>
        <instance>151.919788541481</instance>
        <instance>151.906146588442</instance>
        <instance>151.889628367733</instance>
        <instance>151.897000788547</instance>
        <instance>151.931810749532</instance>
        <instance>152.230056677992</instance>
        <instance>152.231054536425</instance>
        <instance>152.224037464535</instance>
        <instance>152.235078500306</instance>
        <instance>157.432483266728</instance>
        <instance>157.424265593528</instance>
        <instance>157.443231123364</instance>
        <instance>157.429955307833</instance>
        <instance>157.935490773742</instance>
        <instance>157.934090227648</instance>
        <instance>157.920225361934</instance>
        <instance>157.952155793816</instance>
        <instance>175.685187229344</instance>
        <instance>175.697417930498</instance>
        <instance>175.772224798995</instance>
        <instance>175.585918866662</instance>
      </value>
      <script><![CDATA[# Calculate trial summary AvgLatency&#xa;set result $TrialSumData(AvgLatency)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.MaxLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>236.73</instance>
        <instance>230.79</instance>
        <instance>236.73</instance>
        <instance>233.13</instance>
        <instance>395.5</instance>
        <instance>232.51</instance>
        <instance>395.5</instance>
        <instance>231.77</instance>
        <instance>298.98</instance>
        <instance>298.98</instance>
        <instance>252.69</instance>
        <instance>254.38</instance>
        <instance>550.0</instance>
        <instance>233.26</instance>
        <instance>230.5</instance>
        <instance>550.0</instance>
        <instance>237.64</instance>
        <instance>233.23</instance>
        <instance>237.64</instance>
        <instance>233.98</instance>
        <instance>432.02</instance>
        <instance>277.39</instance>
        <instance>271.96</instance>
        <instance>432.02</instance>
        <instance>436.34</instance>
        <instance>436.34</instance>
        <instance>432.43</instance>
        <instance>431.53</instance>
        <instance>1066.36</instance>
        <instance>1064.43</instance>
        <instance>1060.71</instance>
        <instance>1066.36</instance>
      </value>
      <script><![CDATA[# Calculate trial summary MaxLatency&#xa;set result $TrialSumData(MaxLatency)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.PfcTxQuantum</name>
      <persist>false</persist>
      <value type="strings">
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[# Calculate trial summary Pfc Tx Quantum&#xa;set result $TrialSumData(PfcTxQuantum)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.PfcTxXonDelay</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[# Calculate trial summary Pfc Tx Xon Delay&#xa;set result $TrialSumData(PfcTxXonDelay)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.PfcTxPauseRate</name>
      <persist>false</persist>
      <value type="strings">
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[# Calculate trial summary Pfc Tx Pause Rate&#xa;set result $TrialSumData(PfcTxPauseRate)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.Intended</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
      </value>
      <script><![CDATA[# Calculate trial summary Intended&#xa;set result $TrialSumData(Intended)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.Offered</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>31.445</instance>
        <instance>31.444</instance>
        <instance>31.455</instance>
        <instance></instance>
        <instance>31.449</instance>
        <instance>31.446</instance>
        <instance>31.448</instance>
        <instance></instance>
        <instance>31.447</instance>
        <instance>31.451</instance>
        <instance>31.445</instance>
        <instance></instance>
        <instance>31.449</instance>
        <instance>31.451</instance>
        <instance>31.443</instance>
        <instance></instance>
        <instance>31.445</instance>
        <instance>31.45</instance>
        <instance>31.445</instance>
        <instance></instance>
        <instance>31.446</instance>
        <instance>31.447</instance>
        <instance>31.446</instance>
        <instance></instance>
        <instance>30.867</instance>
        <instance>30.864</instance>
        <instance>30.865</instance>
        <instance></instance>
        <instance>28.882</instance>
        <instance>28.889</instance>
        <instance>28.891</instance>
      </value>
      <script><![CDATA[# Calculate trial summary Offered&#xa;set result $TrialSumData(Offered)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.TrialNum</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[# Calculate trial summary Qput&#xa;set result $TrialSumData(TrialNum)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.PfcTriggerCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[# Calculate trial summary PfcCount&#xa;set result $TrialSumData(PfcCount)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.TxFrameCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance>34547237</instance>
        <instance>11515874</instance>
        <instance>11516334</instance>
        <instance>11515029</instance>
        <instance>34549505</instance>
        <instance>11516472</instance>
        <instance>11516822</instance>
        <instance>11516211</instance>
        <instance>34552709</instance>
        <instance>11518333</instance>
        <instance>11517460</instance>
        <instance>11516916</instance>
        <instance>34553270</instance>
        <instance>11517057</instance>
        <instance>11518651</instance>
        <instance>11517562</instance>
        <instance>34553271</instance>
        <instance>11517440</instance>
        <instance>11518360</instance>
        <instance>11517471</instance>
        <instance>34552567</instance>
        <instance>11519234</instance>
        <instance>11516326</instance>
        <instance>11517007</instance>
        <instance>33913805</instance>
        <instance>11305559</instance>
        <instance>11303728</instance>
        <instance>11304518</instance>
        <instance>31742113</instance>
        <instance>10581915</instance>
        <instance>10579985</instance>
        <instance>10580213</instance>
      </value>
      <script><![CDATA[# Calculate trial summary TxFrameCount&#xa;set result $TrialSumData(TxFrameCount)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.RxFrameCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance>34547237</instance>
        <instance>11515874</instance>
        <instance>11516334</instance>
        <instance>11515029</instance>
        <instance>34549505</instance>
        <instance>11516472</instance>
        <instance>11516822</instance>
        <instance>11516211</instance>
        <instance>34552709</instance>
        <instance>11518333</instance>
        <instance>11517460</instance>
        <instance>11516916</instance>
        <instance>34553270</instance>
        <instance>11517057</instance>
        <instance>11518651</instance>
        <instance>11517562</instance>
        <instance>34553271</instance>
        <instance>11517440</instance>
        <instance>11518360</instance>
        <instance>11517471</instance>
        <instance>34552567</instance>
        <instance>11519234</instance>
        <instance>11516326</instance>
        <instance>11517007</instance>
        <instance>33913805</instance>
        <instance>11305559</instance>
        <instance>11303728</instance>
        <instance>11304518</instance>
        <instance>31742113</instance>
        <instance>10581915</instance>
        <instance>10579985</instance>
        <instance>10580213</instance>
      </value>
      <script><![CDATA[# Calculate trial summary RxFrameCount&#xa;set result $TrialSumData(RxFrameCount)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.ExpectedRxFrameCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance>34547237</instance>
        <instance>11515874</instance>
        <instance>11516334</instance>
        <instance>11515029</instance>
        <instance>34549505</instance>
        <instance>11516472</instance>
        <instance>11516822</instance>
        <instance>11516211</instance>
        <instance>34552709</instance>
        <instance>11518333</instance>
        <instance>11517460</instance>
        <instance>11516916</instance>
        <instance>34553270</instance>
        <instance>11517057</instance>
        <instance>11518651</instance>
        <instance>11517562</instance>
        <instance>34553271</instance>
        <instance>11517440</instance>
        <instance>11518360</instance>
        <instance>11517471</instance>
        <instance>34552567</instance>
        <instance>11519234</instance>
        <instance>11516326</instance>
        <instance>11517007</instance>
        <instance>33913805</instance>
        <instance>11305559</instance>
        <instance>11303728</instance>
        <instance>11304518</instance>
        <instance>31742113</instance>
        <instance>10581915</instance>
        <instance>10579985</instance>
        <instance>10580213</instance>
      </value>
      <script><![CDATA[# Calculate trial summary ExpectedRxFrameCount&#xa;set result $TrialSumData(ExpectedRxFrameCount)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.DroppedFramePct</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[# Calculate trial summary DroppedFramePct&#xa;set result $TrialSumData(DroppedFramePct)]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>NotsupportedStr</name>
      <persist>false</persist>
      <value type="String">Note: This result view mode does not support Interarrival Time measurements</value>
      <script><![CDATA[if {$ResultViewMode == "JITTER" || $ResultViewMode == "LATENCY_JITTER"} {&#xa;set result "Note: This result view mode does not support Interarrival Time measurements"&#xa;} elseif  {$ResultViewMode == "BASIC" || $ResultViewMode == "HISTOGRAM"} {&#xa;set result "Note: This result view mode does not support Jitter and Interarrival Time measurements"&#xa;} elseif  {$ResultViewMode == "INTERARRIVALTIME" } {&#xa;set result "Note: This result view mode does not support Jitter measurements"&#xa;} elseif  {$ResultViewMode == "FORWARDING" } {&#xa;set result "Note: This result view mode does not support Latency and Jitter measurements"&#xa;} else {&#xa;set result " "&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.BS</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
      </value>
      <script><![CDATA[# Calculate trial summary traffic group&#xa;set result $TrialSumData(BS)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>RRReportGenerationTime</name>
      <persist>true</persist>
      <value type="String">Thu Aug 06 11:46:25.425 PDT 2009</value>
      <script><![CDATA[set RRReportGenerationTime "Thu Aug 06 11:46:25.425 PDT 2009" &#xa;set result $RRReportGenerationTime &#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>RRUserNotes</name>
      <persist>true</persist>
      <value type="String">No User Notes Exist</value>
      <script><![CDATA[set strFrontPageText "" &#xa;set strFrontPageFormattedText "No User Notes Exist" &#xa;set strFormattedKey "" &#xa;set strFormattedValue "" &#xa;set isFirst 1 &#xa;if {[info exists RRUserNotesTable]} {&#xa;set strFrontPageFormattedText "" &#xa;foreach {KeyAndValue} $RRUserNotesTable { &#xa;      if {!$isFirst} { &#xa;      set KeyAndValue [string trim $KeyAndValue {[],}] &#xa;      regsub  {,} $KeyAndValue ":" KeyAndValueFinal &#xa;      set strFrontPageFormattedText "$strFrontPageFormattedText$KeyAndValueFinal\n&#xa;" &#xa;    } &#xa;    set isFirst 0 &#xa;} &#xa;set RRUserNotes $strFrontPageFormattedText &#xa;}&#xa;set result $strFrontPageFormattedText &#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>RRFrontPageText</name>
      <persist>true</persist>
      <value type="String">-</value>
      <script><![CDATA[set result "Test Duration: $RRTestDurationTime msec\nReport Generation Time: $RRReportGenerationTime\nTest State: $RRTestState\n$RRUserNotes"]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum.FS</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance></instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance></instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance></instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance></instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance></instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance></instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance></instance>
        <instance>Random</instance>
        <instance>Random</instance>
        <instance>Random</instance>
      </value>
      <script><![CDATA[# Calculate trial summary results frame size values&#xa;set result [list]&#xa;&#xa;catch { array unset TestSumData }&#xa;set cols [list Datasetid TrafficGroupName Fs Bs Intended PfcTxQuantum PfcTxXonDelay PfcTxPauseRate DroppedFramePct  PfcCount MinLatency AvgLatency MaxLatency MinJitter AvgJitter MaxJitter MinTime AvgTime MaxTime Tx Rx ExpectedRx]&#xa;&#xa;foreach col $cols {&#xa;   set TestSumData($col) [list]&#xa;}&#xa;&#xa;foreach row $TestSum {&#xa;   set rowList [split $row "^"]&#xa;   foreach col $cols value $rowList {&#xa;      lappend TestSumData($col) $value&#xa;   }&#xa;}&#xa;&#xa;set result $TestSumData(Fs)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.TG</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
        <instance></instance>
        <instance>Port 1</instance>
        <instance>Port 2</instance>
        <instance>Port 3</instance>
      </value>
      <script><![CDATA[# Calculate test summary traffic group&#xa;set result $TestSumData(TrafficGroupName)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.IL</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance></instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
        <instance>99.999</instance>
      </value>
      <script><![CDATA[# Calculate test summary traffic group&#xa;set result $TestSumData(Intended)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.BS</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance></instance>
        <instance>1</instance>
        <instance>1</instance>
        <instance>1</instance>
      </value>
      <script><![CDATA[# Calculate test summary traffic group&#xa;set result $TestSumData(Bs)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcTxQuantum</name>
      <persist>false</persist>
      <value type="strings">
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>65535</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[# Calculate test summary Pfc Tx Quantum&#xa;set result $TestSumData(PfcTxQuantum)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcTxXonDelay</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[# Calculate test summary Pfc Tx Xon Delay&#xa;set result $TestSumData(PfcTxXonDelay)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcTxPauseRate</name>
      <persist>false</persist>
      <value type="strings">
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[# Calculate test summary Pfc Tx Pause Rate&#xa;set result $TestSumData(PfcTxPauseRate)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum.DroppedFramePct</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[# Calculate test summary Dropped Frame Pct&#xa;set result $TestSumData(DroppedFramePct)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcTriggerCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance></instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[# Calculate test summary Pfc Count&#xa;set result $TestSumData(PfcCount)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MinLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>4.19</instance>
        <instance>4.85</instance>
        <instance>4.63</instance>
        <instance>4.19</instance>
        <instance>4.16</instance>
        <instance>4.83</instance>
        <instance>4.61</instance>
        <instance>4.16</instance>
        <instance>4.24</instance>
        <instance>4.7</instance>
        <instance>4.24</instance>
        <instance>4.93</instance>
        <instance>4.25</instance>
        <instance>4.91</instance>
        <instance>4.69</instance>
        <instance>4.25</instance>
        <instance>13.74</instance>
        <instance>14.17</instance>
        <instance>13.95</instance>
        <instance>13.74</instance>
        <instance>53.05</instance>
        <instance>53.48</instance>
        <instance>53.27</instance>
        <instance>53.05</instance>
        <instance>77.37</instance>
        <instance>77.37</instance>
        <instance>77.66</instance>
        <instance>78.84</instance>
        <instance>77.36</instance>
        <instance>79.19</instance>
        <instance>77.36</instance>
        <instance>79.14</instance>
      </value>
      <script><![CDATA[# Calculate test summary Min Latency&#xa;set result $TestSumData(MinLatency)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.AvgLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>151.88866</instance>
        <instance>151.898742026007</instance>
        <instance>151.912859725152</instance>
        <instance>151.854375705871</instance>
        <instance>151.88589</instance>
        <instance>151.859797836525</instance>
        <instance>151.897702462537</instance>
        <instance>151.900159258979</instance>
        <instance>151.90361</instance>
        <instance>151.907888473966</instance>
        <instance>151.883153253408</instance>
        <instance>151.919788541481</instance>
        <instance>151.90615</instance>
        <instance>151.889628367733</instance>
        <instance>151.897000788547</instance>
        <instance>151.931810749532</instance>
        <instance>152.23006</instance>
        <instance>152.231054536425</instance>
        <instance>152.224037464535</instance>
        <instance>152.235078500306</instance>
        <instance>157.43248</instance>
        <instance>157.424265593528</instance>
        <instance>157.443231123364</instance>
        <instance>157.429955307833</instance>
        <instance>157.93549</instance>
        <instance>157.934090227648</instance>
        <instance>157.920225361934</instance>
        <instance>157.952155793816</instance>
        <instance>175.68519</instance>
        <instance>175.697417930498</instance>
        <instance>175.772224798995</instance>
        <instance>175.585918866662</instance>
      </value>
      <script><![CDATA[# Calculate test summary Avg Latency&#xa;set result $TestSumData(AvgLatency)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MaxLatency</name>
      <persist>false</persist>
      <value type="strings">
        <instance>236.73</instance>
        <instance>230.79</instance>
        <instance>236.73</instance>
        <instance>233.13</instance>
        <instance>395.5</instance>
        <instance>232.51</instance>
        <instance>395.5</instance>
        <instance>231.77</instance>
        <instance>298.98</instance>
        <instance>298.98</instance>
        <instance>252.69</instance>
        <instance>254.38</instance>
        <instance>550.0</instance>
        <instance>233.26</instance>
        <instance>230.5</instance>
        <instance>550.0</instance>
        <instance>237.64</instance>
        <instance>233.23</instance>
        <instance>237.64</instance>
        <instance>233.98</instance>
        <instance>432.02</instance>
        <instance>277.39</instance>
        <instance>271.96</instance>
        <instance>432.02</instance>
        <instance>436.34</instance>
        <instance>436.34</instance>
        <instance>432.43</instance>
        <instance>431.53</instance>
        <instance>1066.36</instance>
        <instance>1064.43</instance>
        <instance>1060.71</instance>
        <instance>1066.36</instance>
      </value>
      <script><![CDATA[# Calculate test summary Max Latency&#xa;set result $TestSumData(MaxLatency)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MinJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[# Calculate test summary Min Jitter&#xa;set result $TestSumData(MinJitter)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.AvgJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>11.27</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>11.27</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>11.27</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>11.27</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>11.26</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>11.27</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>11.58</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>12.8</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[# Calculate test summary Avg Jitter&#xa;set result $TestSumData(AvgJitter)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MaxJitter</name>
      <persist>false</persist>
      <value type="strings">
        <instance>155.53</instance>
        <instance>130.47</instance>
        <instance>155.53</instance>
        <instance>129.44</instance>
        <instance>306.13</instance>
        <instance>129.58</instance>
        <instance>306.13</instance>
        <instance>132.08</instance>
        <instance>150.6</instance>
        <instance>150.6</instance>
        <instance>129.22</instance>
        <instance>150.22</instance>
        <instance>443.54</instance>
        <instance>130.01</instance>
        <instance>140.86</instance>
        <instance>443.54</instance>
        <instance>133.1</instance>
        <instance>133.1</instance>
        <instance>130.69</instance>
        <instance>131.43</instance>
        <instance>271.69</instance>
        <instance>130.92</instance>
        <instance>129.24</instance>
        <instance>271.69</instance>
        <instance>310.75</instance>
        <instance>310.75</instance>
        <instance>309.23</instance>
        <instance>310.71</instance>
        <instance>941.04</instance>
        <instance>938.51</instance>
        <instance>941.04</instance>
        <instance>940.27</instance>
      </value>
      <script><![CDATA[# Calculate test summary Max Jitter&#xa;set result $TestSumData(MaxJitter)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.TrafficConfig</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>2</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>3</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>4</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>5</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>6</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>7</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>8</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[set result [list]&#xa;set temp $TestSumData(TrafficGroupName)&#xa;set count 0&#xa;foreach tg $temp {&#xa;if { $tg==" " } {&#xa;incr count&#xa;lappend result $count&#xa;} else {&#xa;lappend result " "&#xa;}&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TrafficKey</name>
      <persist>false</persist>
      <value type="strings">
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - Average FS:320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - BS:1, WR:1:1:1, LS:100%, PFC Pause Duration: 1, PQ:65535, XD:1024, Pause Rate: 100</instance>
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - Average FS:320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - BS:1, WR:1:1:1, LS:100%, PFC Pause Duration: 4, PQ:65535, XD:1024, Pause Rate: 100</instance>
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - Average FS:320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - BS:1, WR:1:1:1, LS:100%, PFC Pause Duration: 16, PQ:65535, XD:1024, Pause Rate: 100</instance>
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - Average FS:320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - BS:1, WR:1:1:1, LS:100%, PFC Pause Duration: 64, PQ:65535, XD:1024, Pause Rate: 100</instance>
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - Average FS:320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - BS:1, WR:1:1:1, LS:100%, PFC Pause Duration: 256, PQ:65535, XD:1024, Pause Rate: 100</instance>
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - Average FS:320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - BS:1, WR:1:1:1, LS:100%, PFC Pause Duration: 1024, PQ:65535, XD:1024, Pause Rate: 100</instance>
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - Average FS:320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - BS:1, WR:1:1:1, LS:100%, PFC Pause Duration: 4096, PQ:65535, XD:1024, Pause Rate: 100</instance>
        <instance>DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - Average FS:320, DCB Traffic Group Collection - Port 2, DCB Traffic Group Collection - Port 3, &amp; DCB Traffic Group Collection - Port 1 - BS:1, WR:1:1:1, LS:100%, PFC Pause Duration: 16384, PQ:65535, XD:1024, Pause Rate: 100</instance>
      </value>
      <script><![CDATA[# Sample calculation (script must set variable called "result"&#xa;&#xa;set result [list]&#xa;&#xa;foreach llp $LoopKey {&#xa;set temp [string map {"TrafficGroup " "TG"} $llp]&#xa;set temp [string map {"Frame Size: " "FS:"} $temp]&#xa;set temp [string map {"Burst Size: " "BS:"} $temp]&#xa;set temp [string map {"Weighted Load Ratio: " "WR:"} $temp]&#xa;set temp [string map {"Load: " "LS:"} $temp]&#xa;set temp [string map {"PFC Quantum: " "PQ:"} $temp]&#xa;set temp [string map {"XON Delay: " "XD:"} $temp]&#xa;lappend result $temp&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Latency Graph For Each Subgroup,Test Summary,Jitter Graph For Each Subgroup</pageName>
    </instance>
    <instance>
      <name>TestSum.Rx</name>
      <persist>false</persist>
      <value type="strings">
        <instance>34547237</instance>
        <instance>11515874</instance>
        <instance>11516334</instance>
        <instance>11515029</instance>
        <instance>34549505</instance>
        <instance>11516472</instance>
        <instance>11516822</instance>
        <instance>11516211</instance>
        <instance>34552709</instance>
        <instance>11518333</instance>
        <instance>11517460</instance>
        <instance>11516916</instance>
        <instance>34553270</instance>
        <instance>11517057</instance>
        <instance>11518651</instance>
        <instance>11517562</instance>
        <instance>34553271</instance>
        <instance>11517440</instance>
        <instance>11518360</instance>
        <instance>11517471</instance>
        <instance>34552567</instance>
        <instance>11519234</instance>
        <instance>11516326</instance>
        <instance>11517007</instance>
        <instance>33913805</instance>
        <instance>11305559</instance>
        <instance>11303728</instance>
        <instance>11304518</instance>
        <instance>31742113</instance>
        <instance>10581915</instance>
        <instance>10579985</instance>
        <instance>10580213</instance>
      </value>
      <script><![CDATA[# Calculate test summary rx frame count&#xa;set result $TestSumData(Rx)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.Tx</name>
      <persist>false</persist>
      <value type="strings">
        <instance>34547237</instance>
        <instance>11515874</instance>
        <instance>11516334</instance>
        <instance>11515029</instance>
        <instance>34549505</instance>
        <instance>11516472</instance>
        <instance>11516822</instance>
        <instance>11516211</instance>
        <instance>34552709</instance>
        <instance>11518333</instance>
        <instance>11517460</instance>
        <instance>11516916</instance>
        <instance>34553270</instance>
        <instance>11517057</instance>
        <instance>11518651</instance>
        <instance>11517562</instance>
        <instance>34553271</instance>
        <instance>11517440</instance>
        <instance>11518360</instance>
        <instance>11517471</instance>
        <instance>34552567</instance>
        <instance>11519234</instance>
        <instance>11516326</instance>
        <instance>11517007</instance>
        <instance>33913805</instance>
        <instance>11305559</instance>
        <instance>11303728</instance>
        <instance>11304518</instance>
        <instance>31742113</instance>
        <instance>10581915</instance>
        <instance>10579985</instance>
        <instance>10580213</instance>
      </value>
      <script><![CDATA[# Calculate test summary rx frame count&#xa;set result $TestSumData(Tx)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.ExpectedRx</name>
      <persist>false</persist>
      <value type="strings">
        <instance>34547237</instance>
        <instance>11515874</instance>
        <instance>11516334</instance>
        <instance>11515029</instance>
        <instance>34549505</instance>
        <instance>11516472</instance>
        <instance>11516822</instance>
        <instance>11516211</instance>
        <instance>34552709</instance>
        <instance>11518333</instance>
        <instance>11517460</instance>
        <instance>11516916</instance>
        <instance>34553270</instance>
        <instance>11517057</instance>
        <instance>11518651</instance>
        <instance>11517562</instance>
        <instance>34553271</instance>
        <instance>11517440</instance>
        <instance>11518360</instance>
        <instance>11517471</instance>
        <instance>34552567</instance>
        <instance>11519234</instance>
        <instance>11516326</instance>
        <instance>11517007</instance>
        <instance>33913805</instance>
        <instance>11305559</instance>
        <instance>11303728</instance>
        <instance>11304518</instance>
        <instance>31742113</instance>
        <instance>10581915</instance>
        <instance>10579985</instance>
        <instance>10580213</instance>
      </value>
      <script><![CDATA[# Calculate test summary rx frame count&#xa;set result $TestSumData(ExpectedRx)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.IsConformant</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance></instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance></instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance></instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance></instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance></instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance></instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance></instance>
        <instance>True</instance>
        <instance>True</instance>
        <instance>True</instance>
      </value>
      <script><![CDATA[set result $TrialSumData(IsConformant)&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.PfcTotalQuanta</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>348867390</instance>
        <instance>348867390</instance>
        <instance>348867390</instance>
        <instance></instance>
        <instance>348875117</instance>
        <instance>348875117</instance>
        <instance>348875117</instance>
        <instance></instance>
        <instance>348885738</instance>
        <instance>348885738</instance>
        <instance>348885738</instance>
        <instance></instance>
        <instance>348886199</instance>
        <instance>348886199</instance>
        <instance>348886199</instance>
        <instance></instance>
        <instance>348902238</instance>
        <instance>348902238</instance>
        <instance>348902238</instance>
        <instance></instance>
        <instance>348871777</instance>
        <instance>348871777</instance>
        <instance>348871777</instance>
        <instance></instance>
        <instance>353199172</instance>
        <instance>353199172</instance>
        <instance>353199172</instance>
        <instance></instance>
        <instance>368128967</instance>
        <instance>368128967</instance>
        <instance>368128967</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;set tempTGList $TrialSumData(TrafficGroupName) &#xa;set tempquantaList $TrialSum_PfcTotalQuanta&#xa;set count 0&#xa;foreach tg $tempTGList {&#xa;if { $tg==" " } {&#xa;lappend result " "&#xa;} else {&#xa;lappend result [ lindex $tempquantaList $count ]&#xa;incr count&#xa;}&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.PfcRxFrameCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>2601420</instance>
        <instance>2601420</instance>
        <instance>2601420</instance>
        <instance></instance>
        <instance>2601424</instance>
        <instance>2601424</instance>
        <instance>2601424</instance>
        <instance></instance>
        <instance>2601928</instance>
        <instance>2601928</instance>
        <instance>2601928</instance>
        <instance></instance>
        <instance>2601608</instance>
        <instance>2601608</instance>
        <instance>2601608</instance>
        <instance></instance>
        <instance>2601773</instance>
        <instance>2601773</instance>
        <instance>2601773</instance>
        <instance></instance>
        <instance>2601801</instance>
        <instance>2601801</instance>
        <instance>2601801</instance>
        <instance></instance>
        <instance>2625562</instance>
        <instance>2625562</instance>
        <instance>2625562</instance>
        <instance></instance>
        <instance>2707734</instance>
        <instance>2707734</instance>
        <instance>2707734</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;set tempTGList $TrialSumData(TrafficGroupName) &#xa;set tempquantaList $TrialSum_PfcRxFrameCount&#xa;set count 0&#xa;foreach tg $tempTGList {&#xa;if { $tg==" " } {&#xa;lappend result " "&#xa;} else {&#xa;lappend result [ lindex $tempquantaList $count ]&#xa;incr count&#xa;}&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcTotalQuanta</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>348867390</instance>
        <instance>348867390</instance>
        <instance>348867390</instance>
        <instance></instance>
        <instance>348875117</instance>
        <instance>348875117</instance>
        <instance>348875117</instance>
        <instance></instance>
        <instance>348885738</instance>
        <instance>348885738</instance>
        <instance>348885738</instance>
        <instance></instance>
        <instance>348886199</instance>
        <instance>348886199</instance>
        <instance>348886199</instance>
        <instance></instance>
        <instance>348902238</instance>
        <instance>348902238</instance>
        <instance>348902238</instance>
        <instance></instance>
        <instance>348871777</instance>
        <instance>348871777</instance>
        <instance>348871777</instance>
        <instance></instance>
        <instance>353199172</instance>
        <instance>353199172</instance>
        <instance>353199172</instance>
        <instance></instance>
        <instance>368128967</instance>
        <instance>368128967</instance>
        <instance>368128967</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;set tempTGList $TestSumData(TrafficGroupName) &#xa;set tempquantaList $TestSum_PfcRxQuanta&#xa;set count 0&#xa;foreach tg $tempTGList {&#xa;if { $tg==" " } {&#xa;lappend result " "&#xa;} else {&#xa;lappend result [ lindex $tempquantaList $count ]&#xa;incr count&#xa;}&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcRxFrameCount</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>2601420</instance>
        <instance>2601420</instance>
        <instance>2601420</instance>
        <instance></instance>
        <instance>2601424</instance>
        <instance>2601424</instance>
        <instance>2601424</instance>
        <instance></instance>
        <instance>2601928</instance>
        <instance>2601928</instance>
        <instance>2601928</instance>
        <instance></instance>
        <instance>2601608</instance>
        <instance>2601608</instance>
        <instance>2601608</instance>
        <instance></instance>
        <instance>2601773</instance>
        <instance>2601773</instance>
        <instance>2601773</instance>
        <instance></instance>
        <instance>2601801</instance>
        <instance>2601801</instance>
        <instance>2601801</instance>
        <instance></instance>
        <instance>2625562</instance>
        <instance>2625562</instance>
        <instance>2625562</instance>
        <instance></instance>
        <instance>2707734</instance>
        <instance>2707734</instance>
        <instance>2707734</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;set tempTGList $TestSumData(TrafficGroupName) &#xa;set tempquantaList $TestSum_PfcRxFrameCount&#xa;set count 0&#xa;foreach tg $tempTGList {&#xa;if { $tg==" " } {&#xa;lappend result " "&#xa;} else {&#xa;lappend result [ lindex $tempquantaList $count ]&#xa;incr count&#xa;}&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MinInterarrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[# Calculate test summary Min Interarrival Time&#xa;set result $TestSumData(MinTime)]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.AvgInterarrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[# Calculate test summary Max Interarrival Time&#xa;set result $TestSumData(MaxTime)]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum.MaxInterarrivalTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[# Calculate test summary Max Interarrival Time&#xa;set result $TestSumData(MaxTime)]]></script>
      <multivalued>false</multivalued>
      <pageName>Advanced Test Summary</pageName>
    </instance>
    <instance>
      <name>Priority_PriorityResult.3</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Invalid</instance>
        <instance>Invalid</instance>
        <instance>Invalid</instance>
        <instance>Invalid</instance>
        <instance>Invalid</instance>
        <instance>Invalid</instance>
        <instance>Invalid</instance>
        <instance>Invalid</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PriorityResult 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3</pageName>
    </instance>
    <instance>
      <name>Priority_PriorityResult.0</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PriorityResult 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;}&#xa;&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 0</pageName>
    </instance>
    <instance>
      <name>Priority_PriorityResult.1</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 1&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PriorityResult 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;}&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_PriorityResult.2</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 2&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PriorityResult 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 2</pageName>
    </instance>
    <instance>
      <name>Priority_PriorityResult.4</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 4&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PriorityResult 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;}&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 4</pageName>
    </instance>
    <instance>
      <name>Priority_PriorityResult.5</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 5&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PriorityResult 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;}&#xa;&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 5</pageName>
    </instance>
    <instance>
      <name>Priority_PriorityResult.6</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 6&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PriorityResult 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;}&#xa;&#xa;&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 6</pageName>
    </instance>
    <instance>
      <name>Priority_PriorityResult.7</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
        <instance>Valid</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 7&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PriorityResult 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;}&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 7</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxFrameCount.0</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxFrameCount $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 0</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxFrameCount.1</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 1&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxFrameCount $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxFrameCount.2</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 2&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxFrameCount $column] ",\]"] "\["]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 2</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxFrameCount.3</name>
      <persist>false</persist>
      <value type="strings">
        <instance>2000</instance>
        <instance>2000</instance>
        <instance>2000</instance>
        <instance>2000</instance>
        <instance>2000</instance>
        <instance>2000</instance>
        <instance>2000</instance>
        <instance>2000</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxFrameCount $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxFrameCount.4</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 4&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxFrameCount $column] ",\]"] "\["]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 4</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxFrameCount.5</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 5&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxFrameCount $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 5</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxFrameCount.6</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 6&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxFrameCount $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 6</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxFrameCount.7</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 7&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxFrameCount 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxFrameCount 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxFrameCount $column] ",\]"] "\["]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 7</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxQuanta.0</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxQuanta 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxQuanta 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxQuanta $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 0</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxQuanta.1</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 1&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxQuanta 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxQuanta 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxQuanta $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxQuanta.2</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 2&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxQuanta 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxQuanta 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxQuanta $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 2</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxQuanta.3</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1024000</instance>
        <instance>1024000</instance>
        <instance>1024000</instance>
        <instance>1024000</instance>
        <instance>1024000</instance>
        <instance>1024000</instance>
        <instance>1024000</instance>
        <instance>1024000</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxQuanta 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxQuanta 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxQuanta $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxQuanta.4</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 4&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxQuanta 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxQuanta 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxQuanta $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 4</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxQuanta.5</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 5&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxQuanta 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxQuanta 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxQuanta $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 5</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxQuanta.6</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 6&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxQuanta 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxQuanta 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxQuanta $column] ",\]"] "\["]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 6</pageName>
    </instance>
    <instance>
      <name>Priority_PfcTxQuanta.7</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
        <instance>0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 7&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_PfcTxQuanta 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PfcTxQuanta 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_PfcTxQuanta $column] ",\]"] "\["]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 7</pageName>
    </instance>
    <instance>
      <name>Priority_DutIntendedLoad.0</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutIntendedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutIntendedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_DutIntendedLoad $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 0</pageName>
    </instance>
    <instance>
      <name>Priority_DutIntendedLoad.1</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 1&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutIntendedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutIntendedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_DutIntendedLoad $column] ",\]"] "\["]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_DutIntendedLoad.2</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 2&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutIntendedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutIntendedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_DutIntendedLoad $column] ",\]"] "\["]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 2</pageName>
    </instance>
    <instance>
      <name>Priority_DutIntendedLoad.3</name>
      <persist>false</persist>
      <value type="strings">
        <instance>100.0</instance>
        <instance>100.0</instance>
        <instance>100.0</instance>
        <instance>100.0</instance>
        <instance>100.0</instance>
        <instance>100.0</instance>
        <instance>100.0</instance>
        <instance>100.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutIntendedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutIntendedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_DutIntendedLoad $column] ",\]"] "\["]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3</pageName>
    </instance>
    <instance>
      <name>Priority_DutIntendedLoad.4</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 4&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutIntendedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutIntendedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_DutIntendedLoad $column] ",\]"] "\["]&#xa;}&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 4</pageName>
    </instance>
    <instance>
      <name>Priority_DutIntendedLoad.5</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 5&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutIntendedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutIntendedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_DutIntendedLoad $column] ",\]"] "\["]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 5</pageName>
    </instance>
    <instance>
      <name>Priority_DutIntendedLoad.6</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 6&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutIntendedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutIntendedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_DutIntendedLoad $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 6</pageName>
    </instance>
    <instance>
      <name>Priority_DutIntendedLoad.7</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 7&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutIntendedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutIntendedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;   lappend result [string trimleft [string trimright [lindex $Priority_DutIntendedLoad $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 7</pageName>
    </instance>
    <instance>
      <name>Priority_DutOfferedLoad.0</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutOfferedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutOfferedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_DutOfferedLoad $column] ",\]"] "\["]&#xa;}&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 0</pageName>
    </instance>
    <instance>
      <name>Priority_DutOfferedLoad.1</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 1&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutOfferedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutOfferedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_DutOfferedLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_DutOfferedLoad.2</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 2&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutOfferedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutOfferedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_DutOfferedLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 2</pageName>
    </instance>
    <instance>
      <name>Priority_DutOfferedLoad.3</name>
      <persist>false</persist>
      <value type="strings">
        <instance>94.343</instance>
        <instance>-28.633</instance>
        <instance>94.342</instance>
        <instance>-28.632</instance>
        <instance>-29.227</instance>
        <instance>94.338</instance>
        <instance>-28.102</instance>
        <instance>-26.301</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutOfferedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutOfferedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_DutOfferedLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3</pageName>
    </instance>
    <instance>
      <name>Priority_DutOfferedLoad.4</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 4&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutOfferedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutOfferedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_DutOfferedLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 4</pageName>
    </instance>
    <instance>
      <name>Priority_DutOfferedLoad.5</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 5&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutOfferedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutOfferedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_DutOfferedLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 5</pageName>
    </instance>
    <instance>
      <name>Priority_DutOfferedLoad.6</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 6&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutOfferedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutOfferedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_DutOfferedLoad $column] ",\]"] "\["]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 6</pageName>
    </instance>
    <instance>
      <name>Priority_DutOfferedLoad.7</name>
      <persist>false</persist>
      <value type="strings">
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 7&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_DutOfferedLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_DutOfferedLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_DutOfferedLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 7</pageName>
    </instance>
    <instance>
      <name>Priority_MinValidLoad.0</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MinValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MinValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MinValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 0</pageName>
    </instance>
    <instance>
      <name>Priority_MinValidLoad.1</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 1&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MinValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MinValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MinValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_MinValidLoad.2</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 2&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MinValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MinValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MinValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 2</pageName>
    </instance>
    <instance>
      <name>Priority_MinValidLoad.3</name>
      <persist>false</persist>
      <value type="strings">
        <instance>98.476</instance>
        <instance>0.0</instance>
        <instance>98.476</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>98.476</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MinValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MinValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MinValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3</pageName>
    </instance>
    <instance>
      <name>Priority_MinValidLoad.4</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 4&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MinValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MinValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MinValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 4</pageName>
    </instance>
    <instance>
      <name>Priority_MinValidLoad.5</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 5&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MinValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MinValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MinValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 5</pageName>
    </instance>
    <instance>
      <name>Priority_MinValidLoad.6</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 6&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MinValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MinValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MinValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 6</pageName>
    </instance>
    <instance>
      <name>Priority_MinValidLoad.7</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 7&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MinValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MinValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MinValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 7</pageName>
    </instance>
    <instance>
      <name>Priority_MaxValidLoad.0</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MaxValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MaxValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 0</pageName>
    </instance>
    <instance>
      <name>Priority_MaxValidLoad.1</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 1&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MaxValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MaxValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_MaxValidLoad.2</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 2&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MaxValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MaxValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 2</pageName>
    </instance>
    <instance>
      <name>Priority_MaxValidLoad.3</name>
      <persist>false</persist>
      <value type="strings">
        <instance>100.0</instance>
        <instance>0.0</instance>
        <instance>100.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
        <instance>100.0</instance>
        <instance>0.0</instance>
        <instance>0.0</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MaxValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MaxValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3</pageName>
    </instance>
    <instance>
      <name>Priority_MaxValidLoad.4</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 4&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MaxValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MaxValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 4</pageName>
    </instance>
    <instance>
      <name>Priority_MaxValidLoad.5</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 5&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MaxValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MaxValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 5</pageName>
    </instance>
    <instance>
      <name>Priority_MaxValidLoad.6</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 6&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MaxValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MaxValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 6</pageName>
    </instance>
    <instance>
      <name>Priority_MaxValidLoad.7</name>
      <persist>false</persist>
      <value type="strings">
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
        <instance>N/A</instance>
      </value>
      <script><![CDATA[set result [list]&#xa;&#xa;set column 7&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_MaxValidLoad 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction &#xa;      lappend result [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   }&#xa;} else {&#xa;      lappend result [string trimleft [string trimright [lindex $Priority_MaxValidLoad $column] ",\]"] "\["]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 7</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcQuanta_NonZero</name>
      <persist>false</persist>
      <value type="strings">
        <instance>3</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>3</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>3</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>3</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>3</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>3</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>3</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>3</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[&#xa;proc processRow {row} {&#xa;   set rowResult [list]&#xa;   set colResult [list]&#xa;&#xa;   for {set i 0} {$i < 8} {incr i} {&#xa;      set value [string trimleft [string trimright [lindex $row $i] ",\]"] "\["]&#xa;      #lappend colResult $value&#xa;      if {$value > 0} {&#xa;         lappend colResult $i&#xa;      }&#xa;   }&#xa;&#xa;   if {[llength $colResult] > 0} {&#xa;      lappend rowResult [join $colResult ", "]&#xa;   } else {&#xa;      lappend rowResult "None"&#xa;   }&#xa;  &#xa;   return $rowResult&#xa;}&#xa;&#xa;      &#xa;set result [list]&#xa;&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $TestSum_PfcTxQuanta 1 end] {&#xa;      lappend result [processRow $row]&#xa;   &#xa;      for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;         lappend result [list]&#xa;      }&#xa;   }&#xa;} else {&#xa;   lappend result [processRow $TestSum_PfcTxQuanta]&#xa;&#xa;   for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;      lappend result [list]&#xa;   }&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TestSum_Result</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[&#xa;set result [list]&#xa;&#xa;foreach item $TestSum_Result_Map {&#xa;   set item [format %g $item]&#xa;   if {$item == 0} { &#xa;      lappend result "Valid"&#xa;   } elseif { [expr $item % 101] == 0} {&#xa;      lappend result "Invalid"&#xa;   } else { &#xa;      lappend result "Undetermined" &#xa;   }&#xa;&#xa;   # Add blanks for trafficgroup results&#xa;   for {set i 0} {$i < $NumTrafficGroups} {incr i} {&#xa;      lappend result [list]&#xa;   }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>Priority_TrafficConfig</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
        <instance>2</instance>
        <instance>3</instance>
        <instance>4</instance>
        <instance>5</instance>
        <instance>6</instance>
        <instance>7</instance>
        <instance>8</instance>
      </value>
      <script><![CDATA[&#xa;set result [list]&#xa;&#xa;set numConfigs [format %g [expr ceil($NumIterations / $NumTrials)]]&#xa;&#xa;foreach item $Priority_DataSetIds {&#xa;   set item [format %g $item]&#xa;   lappend result [expr ($item % $numConfigs)  + 1]&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3,Per Port Results - Priority 4,Per Port Results - Priority 5,Per Port Results - Priority 6,Per Port Results - Priority 7,Per Port Results - Priority 0,Per Port Results - Priority 2,Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>TrialSum_Result</name>
      <persist>false</persist>
      <value type="strings">
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>Invalid</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[&#xa;set result [list]&#xa;&#xa;foreach item $TrialSum_Result_Raw {&#xa;   if {[string compare VALID $item] == 0} { &#xa;      lappend result "Valid"&#xa;   } elseif { [string compare INVALID $item] == 0} {&#xa;      lappend result "Invalid"&#xa;   } else { &#xa;      lappend result "Undetermined" &#xa;   }&#xa;&#xa;   # Add blanks for trafficgroup results&#xa;   for {set i 0} {$i < $NumTrafficGroups} {incr i} {&#xa;      lappend result [list]&#xa;   }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>ValidColor</name>
      <persist>false</persist>
      <value type="String">#ffffff</value>
      <script><![CDATA[set result "#ffffff"&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>InvalidColor</name>
      <persist>false</persist>
      <value type="String">#ff0000</value>
      <script><![CDATA[set result "#ff0000"&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>UndeterminedColor</name>
      <persist>false</persist>
      <value type="String">#ffff99</value>
      <script><![CDATA[set result "#ffff99"&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TrialSum_Result_Color</name>
      <persist>false</persist>
      <value type="strings">
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
      </value>
      <script><![CDATA[&#xa;set result [list]&#xa;&#xa;foreach item ${TrialSum.FS}  { }&#xa;&#xa;foreach item $TrialSum_Result_Raw {&#xa;   set color [list]&#xa;   if {[string compare VALID $item] == 0} { &#xa;      set color $ValidColor&#xa;   } elseif { [string compare INVALID $item] == 0} {&#xa;      set color $InvalidColor&#xa;   } else { &#xa;      set color $UndeterminedColor&#xa;   }&#xa;&#xa;   lappend result $color&#xa;   # Add color for traffic groups&#xa;   for {set i 0} {$i < $NumTrafficGroups} {incr i} {&#xa;      lappend result $color&#xa;   }&#xa;}&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary</pageName>
    </instance>
    <instance>
      <name>TestSum_Result_Color</name>
      <persist>false</persist>
      <value type="strings">
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
      </value>
      <script><![CDATA[&#xa;set result [list]&#xa;&#xa;foreach item $TestSum_Result_Map {&#xa;   set item [format %g $item]&#xa;   set color [list]&#xa;   if {$item == 0} { &#xa;      set color $ValidColor&#xa;   } elseif { [expr $item % 101] == 0} {&#xa;      set color $InvalidColor&#xa;   } else { &#xa;      set color $UndeterminedColor&#xa;   }&#xa;&#xa;   lappend result $color&#xa;   # Add color for trafficgroup results&#xa;   for {set i 0} {$i < $NumTrafficGroups} {incr i} {&#xa;      lappend result $color&#xa;   }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Test Summary</pageName>
    </instance>
    <instance>
      <name>Priority_ResultColor.0</name>
      <persist>false</persist>
      <value type="strings">
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
      </value>
      <script><![CDATA[&#xa;proc getColor {value} {&#xa;   set color [list]&#xa;   switch [string tolower $value] {&#xa;      valid {lappend color $::ValidColor}&#xa;      invalid {lappend color $::InvalidColor}&#xa;      default {lappend color $::UndeterminedColor}&#xa;   }&#xa;   return $color&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      &#xa;      lappend result [getColor $value]&#xa;   }&#xa;} else {&#xa;   set value [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;   lappend result [getColor $value]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 0</pageName>
    </instance>
    <instance>
      <name>Priority_ResultColor.1</name>
      <persist>false</persist>
      <value type="strings">
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
      </value>
      <script><![CDATA[&#xa;proc getColor {value} {&#xa;   set color [list]&#xa;   switch [string tolower $value] {&#xa;      valid {lappend color $::ValidColor}&#xa;      invalid {lappend color $::InvalidColor}&#xa;      default {lappend color $::UndeterminedColor}&#xa;   }&#xa;   return $color&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set column 1&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      &#xa;      lappend result [getColor $value]&#xa;   }&#xa;} else {&#xa;   set value [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;   lappend result [getColor $value]&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 1</pageName>
    </instance>
    <instance>
      <name>Priority_ResultColor.2</name>
      <persist>false</persist>
      <value type="strings">
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
      </value>
      <script><![CDATA[&#xa;proc getColor {value} {&#xa;   set color [list]&#xa;   switch [string tolower $value] {&#xa;      valid {lappend color $::ValidColor}&#xa;      invalid {lappend color $::InvalidColor}&#xa;      default {lappend color $::UndeterminedColor}&#xa;   }&#xa;   return $color&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set column 2&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      &#xa;      lappend result [getColor $value]&#xa;   }&#xa;} else {&#xa;   set value [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;   lappend result [getColor $value]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 2</pageName>
    </instance>
    <instance>
      <name>Priority_ResultColor.3</name>
      <persist>false</persist>
      <value type="strings">
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
        <instance>#ff0000</instance>
      </value>
      <script><![CDATA[&#xa;proc getColor {value} {&#xa;   set color [list]&#xa;   switch [string tolower $value] {&#xa;      valid {lappend color $::ValidColor}&#xa;      invalid {lappend color $::InvalidColor}&#xa;      default {lappend color $::UndeterminedColor}&#xa;   }&#xa;   return $color&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      &#xa;      lappend result [getColor $value]&#xa;   }&#xa;} else {&#xa;   set value [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;   lappend result [getColor $value]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 3</pageName>
    </instance>
    <instance>
      <name>Priority_ResultColor.4</name>
      <persist>false</persist>
      <value type="strings">
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
      </value>
      <script><![CDATA[&#xa;proc getColor {value} {&#xa;   set color [list]&#xa;   switch [string tolower $value] {&#xa;      valid {lappend color $::ValidColor}&#xa;      invalid {lappend color $::InvalidColor}&#xa;      default {lappend color $::UndeterminedColor}&#xa;   }&#xa;   return $color&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set column 4&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      &#xa;      lappend result [getColor $value]&#xa;   }&#xa;} else {&#xa;   set value [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;   lappend result [getColor $value]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 4</pageName>
    </instance>
    <instance>
      <name>Priority_ResultColor.5</name>
      <persist>false</persist>
      <value type="strings">
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
      </value>
      <script><![CDATA[&#xa;proc getColor {value} {&#xa;   set color [list]&#xa;   switch [string tolower $value] {&#xa;      valid {lappend color $::ValidColor}&#xa;      invalid {lappend color $::InvalidColor}&#xa;      default {lappend color $::UndeterminedColor}&#xa;   }&#xa;   return $color&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set column 5&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      &#xa;      lappend result [getColor $value]&#xa;   }&#xa;} else {&#xa;   set value [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;   lappend result [getColor $value]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 5</pageName>
    </instance>
    <instance>
      <name>Priority_ResultColor.6</name>
      <persist>false</persist>
      <value type="strings">
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
      </value>
      <script><![CDATA[&#xa;proc getColor {value} {&#xa;   set color [list]&#xa;   switch [string tolower $value] {&#xa;      valid {lappend color $::ValidColor}&#xa;      invalid {lappend color $::InvalidColor}&#xa;      default {lappend color $::UndeterminedColor}&#xa;   }&#xa;   return $color&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set column 6&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      &#xa;      lappend result [getColor $value]&#xa;   }&#xa;} else {&#xa;   set value [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;   lappend result [getColor $value]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 6</pageName>
    </instance>
    <instance>
      <name>Priority_ResultColor.7</name>
      <persist>false</persist>
      <value type="strings">
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
        <instance>#ffffff</instance>
      </value>
      <script><![CDATA[&#xa;proc getColor {value} {&#xa;   set color [list]&#xa;   switch [string tolower $value] {&#xa;      valid {lappend color $::ValidColor}&#xa;      invalid {lappend color $::InvalidColor}&#xa;      default {lappend color $::UndeterminedColor}&#xa;   }&#xa;   return $color&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set column 7&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $Priority_MaxValidLoad 1]&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $Priority_PriorityResult 1 end] {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;      &#xa;      lappend result [getColor $value]&#xa;   }&#xa;} else {&#xa;   set value [string trimleft [string trimright [lindex $Priority_PriorityResult $column] ",\]"] "\["]&#xa;   lappend result [getColor $value]&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Per Port Results - Priority 7</pageName>
    </instance>
    <instance>
      <name>TrialSum.VlanPriority</name>
      <persist>false</persist>
      <value type="strings">
        <instance></instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance></instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance></instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance></instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance></instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance></instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance></instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance></instance>
        <instance>3</instance>
        <instance>3</instance>
        <instance>3</instance>
      </value>
      <script><![CDATA[&#xa;set result [list]&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;set testRow [lindex $TestSum_PfcTxQuanta 1]&#xa;set grpIndex 0&#xa;&#xa;if {[string match "*,*" $testRow]} {&#xa;   foreach row [lrange $TestSum_PfcTxQuanta 1 end] {&#xa;      lappend result [list]&#xa;&#xa;      for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;         lappend result [lindex $TrialSum_VlanPriority $grpIndex]&#xa;         incr grpIndex&#xa;      }&#xa;   }&#xa;} else {&#xa;   lappend result [list]&#xa;&#xa;   for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;      lappend result [lindex $TrialSum_VlanPriority $grpIndex]&#xa;      incr grpIndex&#xa;   }&#xa;}]]></script>
      <multivalued>false</multivalued>
      <pageName>Trial Summary,Test Summary</pageName>
    </instance>
    <instance>
      <name>TrialSum.PfcTxPauseRate</name>
      <persist>false</persist>
      <value type="strings">
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Trial_PfcTxResults&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;      for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;         lappend result ""&#xa;      }&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;   for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;      lappend result ""&#xa;   }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TrialSum.PfcTxPauseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>4</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>16</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>64</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>256</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>4096</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>16384</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Trial_PfcTxResults&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;      for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;         lappend result ""&#xa;      }&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;   for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;      lappend result ""&#xa;   }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcTxPauseRate</name>
      <persist>false</persist>
      <value type="strings">
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>100</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Test_PfcTxResults&#xa;set column 3&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;      for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;         lappend result ""&#xa;      }&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;   for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;      lappend result ""&#xa;   }&#xa;}&#xa;&#xa;&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
    <instance>
      <name>TestSum.PfcTxPauseTime</name>
      <persist>false</persist>
      <value type="strings">
        <instance>1</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>4</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>16</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>64</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>256</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>1024</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>4096</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
        <instance>16384</instance>
        <instance></instance>
        <instance></instance>
        <instance></instance>
      </value>
      <script><![CDATA[proc getValue {row column} {&#xa;&#xa;   if {[string is integer $column]} {&#xa;      # The trimleft/right is to remove control characters from the java/tcl list interaction&#xa;      set value [string trimleft [string trimright [lindex $row $column] ",\]"] "\["]&#xa;   } else {&#xa;      set value $column&#xa;   }&#xa;&#xa;   return $value&#xa;}&#xa;&#xa;set result [list]&#xa;&#xa;set dataSet $Test_PfcTxResults&#xa;set column 0&#xa;&#xa;# RR is inconsistent in how it returns sql data, so we have to check what sort of data we have.  Lame.&#xa;&#xa;if {[string match "*,*" [lindex $dataSet 1]]} {&#xa;   foreach row [lrange $dataSet 1 end] {&#xa;      lappend result [getValue $row $column]&#xa;      for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;         lappend result ""&#xa;      }&#xa;   }&#xa;} else {&#xa;   lappend result [getValue $dataSet $column]&#xa;   for {set i 0} {$i < $::NumTrafficGroups} {incr i} {&#xa;      lappend result ""&#xa;   }&#xa;}&#xa;]]></script>
      <multivalued>false</multivalued>
      <pageName>ALL</pageName>
    </instance>
  </computed>
  <tables>
    <instance>
      <name>TrialSummaryTbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td bgcolor="#eeeeee">Trial\n#</td>&#xa;    <td bgcolor="#eeeeee">Traffic\nGroup</td>&#xa;    <td bgcolor="#eeeeee">Frame\nSize</td>&#xa;    <td bgcolor="#eeeeee">Burst\nSize</td>&#xa;    <td bgcolor="#eeeeee">Intended\nLoad (%)</td>&#xa;    <td  bgcolor="#eeeeee">VLAN\nPriority</td>&#xa;    <td bgcolor="#eeeeee">PFC Pause\nDuration\n(=$PauseTimeUnit$)</td>&#xa;    <td bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td bgcolor="#eeeeee">XON Delay\n(=$XonDelayUnit$)</td>&#xa;    <td bgcolor="#eeeeee">Pauses/Sec</td>&#xa;    <td  bgcolor="#eeeeee">Load\nValidation\nResult</td>&#xa;    <td bgcolor="#eeeeee">PFC Rx\nFrame Count </td>&#xa;    <td bgcolor="#eeeeee">PFC Rx\nQuanta</td>&#xa;    <td bgcolor="#eeeeee">PFC Rx\nTrigger Count </td>&#xa;    <td bgcolor="#eeeeee">Offered\nLoad (%) </td>&#xa;    <td bgcolor="#eeeeee">Conformant</td>&#xa;    <td bgcolor="#eeeeee">Frame\nLoss\n(%)</td>&#xa;  </tr>&#xa;  <tr iterate="=$TrialSum.TrafficGroup$">&#xa;    <td halign="right" bgcolor="#eeeeee">=$TrialSum.TrialNum$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TrialSum.TrafficGroup$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TrialSum.FS$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TrialSum.BS$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TrialSum.Intended$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TrialSum.VlanPriority$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TrialSum.PfcTxPauseTime$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TrialSum.PfcTxQuantum$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TrialSum.PfcTxXonDelay$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TrialSum.PfcTxPauseRate$</td>&#xa;    <td halign="right" bgcolor="=$TrialSum_Result_Color$">=$TrialSum_Result$</td>&#xa;    <td halign="right" bgcolor="=$TrialSum_Result_Color$">=$TrialSum.PfcRxFrameCount$</td>&#xa;    <td halign="right" bgcolor="=$TrialSum_Result_Color$">=$TrialSum.PfcTotalQuanta$</td>&#xa;    <td halign="right" bgcolor="=$TrialSum_Result_Color$">=$TrialSum.PfcTriggerCount$</td>&#xa;    <td halign="right" bgcolor="=$TrialSum_Result_Color$">=$TrialSum.Offered$</td>&#xa;    <td halign="right" bgcolor="=$TrialSum_Result_Color$">=$TrialSum.IsConformant$</td>&#xa;   <td halign="right" bgcolor="=$TrialSum_Result_Color$">=$TrialSum.DroppedFramePct$</td>&#xa;  </tr>&#xa;</table>]]></script>
    </instance>
    <instance>
      <name>TestSummaryTbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="2" bgcolor="#eeeeee">Traffic\nConfig #</td>&#xa;    <td colspan="5" rowspan="1" bgcolor="#eeeeee" halign="center">Traffic Configuration</td>&#xa;    <td colspan="1" rowspan="2" bgcolor="#eeeeee">PFC Pause\nDuration\n(=$PauseTimeUnit$)</td>&#xa;    <td colspan="1" rowspan="2" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="2" bgcolor="#eeeeee">XON Delay\n(=$XonDelayUnit$)</td>&#xa;    <td colspan="1" rowspan="2" bgcolor="#eeeeee">Pauses/Sec</td>&#xa;    <td colspan="1" rowspan="2" bgcolor="#eeeeee">Load\nValidation\nResult</td>&#xa;  </tr>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic Group</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Frame Size</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Burst Size</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Intended\nLoad (%)</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">VLAN\nPriority</td>&#xa;  </tr>&#xa;  <tr iterate="=$TestSum.FS$">&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">=$TestSum.TrafficConfig$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TestSum.TG$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TestSum.FS$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TestSum.BS$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TestSum.IL$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TrialSum.VlanPriority$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TestSum.PfcTxPauseTime$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TestSum.PfcTxQuantum$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TestSum.PfcTxXonDelay$</td>&#xa;    <td halign="right" bgcolor="#eeeeee">=$TestSum.PfcTxPauseRate$</td>&#xa;    <td halign="right" bgcolor="=$TestSum_Result_Color$">=$TestSum_Result$</td>&#xa;  </tr>&#xa;</table>&#xa;]]></script>
    </instance>
    <instance>
      <name>PriorityResult3Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial #</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Priority\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Intended Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Offered Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Minimum\nValid Load</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Maximum\nValid Load</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.3$">=$Priority_PortResult$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.3$">=$Priority_PriorityResult.3$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.3$">=$Priority_PfcTxFrameCount.3$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.3$">=$Priority_PfcTxQuanta.3$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.3$">=$Priority_DutIntendedLoad.3$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.3$">=$Priority_DutOfferedLoad.3$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.3$">=$Priority_MinValidLoad.3$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.3$">=$Priority_MaxValidLoad.3$</td>&#xa;   </tr>&#xa;</table>&#xa;]]></script>
    </instance>
    <instance>
      <name>PriorityResult0Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial #</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Priority\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Intended Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Offered Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Minimum\nValid Load</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Maximum\nValid Load</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.0$">=$Priority_PortResult$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.0$">=$Priority_PriorityResult.0$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.0$">=$Priority_PfcTxFrameCount.0$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.0$">=$Priority_PfcTxQuanta.0$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.0$">=$Priority_DutIntendedLoad.0$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.0$">=$Priority_DutOfferedLoad.0$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.0$">=$Priority_MinValidLoad.0$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.0$">=$Priority_MaxValidLoad.0$</td>&#xa;   </tr>&#xa;</table>&#xa;]]></script>
    </instance>
    <instance>
      <name>PriorityResult1Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial #</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Priority\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Intended Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Offered Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Minimum\nValid Load</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Maximum\nValid Load</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.1$">=$Priority_PortResult$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.1$">=$Priority_PriorityResult.1$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.1$">=$Priority_PfcTxFrameCount.1$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.1$">=$Priority_PfcTxQuanta.1$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.1$">=$Priority_DutIntendedLoad.1$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.1$">=$Priority_DutOfferedLoad.1$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.1$">=$Priority_MinValidLoad.1$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.1$">=$Priority_MaxValidLoad.1$</td>&#xa;   </tr>&#xa;</table>]]></script>
    </instance>
    <instance>
      <name>PriorityResult2Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial #</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Priority\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Intended Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Offered Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Minimum\nValid Load</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Maximum\nValid Load</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.2$">=$Priority_PortResult$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.2$">=$Priority_PriorityResult.2$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.2$">=$Priority_PfcTxFrameCount.2$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.2$">=$Priority_PfcTxQuanta.2$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.2$">=$Priority_DutIntendedLoad.2$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.2$">=$Priority_DutOfferedLoad.2$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.2$">=$Priority_MinValidLoad.2$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.2$">=$Priority_MaxValidLoad.2$</td>&#xa;   </tr>&#xa;</table>&#xa;]]></script>
    </instance>
    <instance>
      <name>PriorityResult4Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial #</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Priority\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Intended Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Offered Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Minimum\nValid Load</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Maximum\nValid Load</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.4$">=$Priority_PortResult$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.4$">=$Priority_PriorityResult.4$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.4$">=$Priority_PfcTxFrameCount.4$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.4$">=$Priority_PfcTxQuanta.4$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.4$">=$Priority_DutIntendedLoad.4$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.4$">=$Priority_DutOfferedLoad.4$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.4$">=$Priority_MinValidLoad.4$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.4$">=$Priority_MaxValidLoad.4$</td>&#xa;   </tr>&#xa;</table>&#xa;]]></script>
    </instance>
    <instance>
      <name>PriorityResult5Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial #</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Priority\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Intended Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Offered Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Minimum\nValid Load</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Maximum\nValid Load</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.5$">=$Priority_PortResult$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.5$">=$Priority_PriorityResult.5$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.5$">=$Priority_PfcTxFrameCount.5$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.5$">=$Priority_PfcTxQuanta.5$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.5$">=$Priority_DutIntendedLoad.5$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.5$">=$Priority_DutOfferedLoad.5$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.5$">=$Priority_MinValidLoad.5$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.5$">=$Priority_MaxValidLoad.5$</td>&#xa;   </tr>&#xa;</table>]]></script>
    </instance>
    <instance>
      <name>PriorityResult6Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial #</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Priority\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Intended Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Offered Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Minimum\nValid Load</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Maximum\nValid Load</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.6$">=$Priority_PortResult$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.6$">=$Priority_PriorityResult.6$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.6$">=$Priority_PfcTxFrameCount.6$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.6$">=$Priority_PfcTxQuanta.6$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.6$">=$Priority_DutIntendedLoad.6$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.6$">=$Priority_DutOfferedLoad.6$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.6$">=$Priority_MinValidLoad.6$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.6$">=$Priority_MaxValidLoad.6$</td>&#xa;   </tr>&#xa;</table>]]></script>
    </instance>
    <instance>
      <name>PriorityResult7Tbl</name>
      <script><![CDATA[<table>&#xa;  <tr>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Trial #</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Traffic\nConfiguration</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Port\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Priority\nResult</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nFrame Count</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">PFC Tx\nQuanta</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Intended Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Offered Load\nfrom DUT</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Minimum\nValid Load</td>&#xa;    <td colspan="1" rowspan="1" bgcolor="#eeeeee">Maximum\nValid Load</td>&#xa;  </tr>&#xa;    <tr iterate="=$Priority_PortName$">&#xa;    <td bgcolor="#eeeeee">=$Priority_TrialNum$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_TrafficConfig$</td>&#xa;    <td bgcolor="#eeeeee">=$Priority_PortName$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.7$">=$Priority_PortResult$</td>&#xa;    <td bgcolor="=$Priority_ResultColor.7$">=$Priority_PriorityResult.7$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.7$">=$Priority_PfcTxFrameCount.7$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.7$">=$Priority_PfcTxQuanta.7$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.7$">=$Priority_DutIntendedLoad.7$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.7$">=$Priority_DutOfferedLoad.7$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.7$">=$Priority_MinValidLoad.7$</td>&#xa;    <td halign="right" bgcolor="=$Priority_ResultColor.7$">=$Priority_MaxValidLoad.7$</td>&#xa;   </tr>&#xa;</table>]]></script>
    </instance>
  </tables>
  <graphs>
    <instance type="Bar">
      <name>LatencyGraph</name>
      <ThreeD>false</ThreeD>
      <iterate>true</iterate>
      <backgroundColor>#eeeeee</backgroundColor>
      <plotBackgroundColor>#ffffff</plotBackgroundColor>
      <statistic>
        <name>Adv_MinLatency</name>
        <title>Min Latency</title>
        <color>#40ff40</color>
        <valueAxis>Latency (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>Adv_AvgLatency</name>
        <title>Avg Latency</title>
        <color>#ffff40</color>
        <valueAxis>Latency (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>Adv_MaxLatency</name>
        <title>Max Latency</title>
        <color>#ff4040</color>
        <valueAxis>Latency (uSec)</valueAxis>
      </statistic>
      <title>Latency For =$AdvTestSummary_TrafficGroupName$ Subgroup</title>
      <xStatistic>LoopKey</xStatistic>
      <xTitle>Latency by Frame Size[FS], Burst Size [BS] and Intended Load (%) [LS]</xTitle>
      <yTitle>Latency (uSec)</yTitle>
    </instance>
    <instance type="Bar">
      <name>JitterGraph</name>
      <ThreeD>false</ThreeD>
      <iterate>true</iterate>
      <backgroundColor>#eeeeee</backgroundColor>
      <plotBackgroundColor>#ffffff</plotBackgroundColor>
      <statistic>
        <name>Adv_MinJitter</name>
        <title>Min Jitter</title>
        <color>#40ff40</color>
        <valueAxis>Jitter (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>Adv_AvgJitter</name>
        <title>Avg Jitter</title>
        <color>#ffff40</color>
        <valueAxis>Jitter (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>Adv_MaxJitter</name>
        <title>Max Jitter</title>
        <color>#ff4040</color>
        <valueAxis>Jitter (uSec)</valueAxis>
      </statistic>
      <title>Jitter For =$AdvTestSummary_TrafficGroupName$ Subgroup</title>
      <xStatistic>LoopKey</xStatistic>
      <xTitle>Jitter by Frame Size[FS], Burst Size [BS] and Intended Load (%) [LS]</xTitle>
      <yTitle>Jitter (uSec)</yTitle>
    </instance>
    <instance type="Bar">
      <name>InterarrivalGraph</name>
      <ThreeD>false</ThreeD>
      <iterate>true</iterate>
      <backgroundColor>#eeeeee</backgroundColor>
      <plotBackgroundColor>#ffffff</plotBackgroundColor>
      <statistic>
        <name>Adv_MinInterarrivalTime</name>
        <title>Min Interarrival Time</title>
        <color>#40ff40</color>
        <valueAxis>Interarrival Time (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>Adv_AvgInterarrivalTime</name>
        <title>Avg Interarrival Time</title>
        <color>#ffff40</color>
        <valueAxis>Interarrival Time (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>Adv_MaxInterarrivalTime</name>
        <title>Max Interarrival Time</title>
        <color>#ff4040</color>
        <valueAxis>Interarrival Time (uSec)</valueAxis>
      </statistic>
      <title>Interarrival Time For =$AdvTestSummary_TrafficGroupName$ Subgroup</title>
      <xStatistic>LoopKey</xStatistic>
      <xTitle>Interarrival Time by Frame Size[FS], Burst Size [BS] and Intended Load (%) [LS]</xTitle>
      <yTitle>Interarrival Time (uSec)</yTitle>
    </instance>
    <instance type="Bar">
      <name>JitterAllGraph</name>
      <ThreeD>false</ThreeD>
      <iterate>false</iterate>
      <backgroundColor>#eeeeee</backgroundColor>
      <plotBackgroundColor>#ffffff</plotBackgroundColor>
      <statistic>
        <name>TestMinJitter</name>
        <title>Min Jitter</title>
        <color></color>
        <valueAxis>Jitter (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>TestAvgJitter</name>
        <title>Avg Jitter</title>
        <color></color>
        <valueAxis>Jitter (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>TestMaxJitter</name>
        <title>Max Jitter</title>
        <color></color>
        <valueAxis>Jitter (uSec)</valueAxis>
      </statistic>
      <title></title>
      <xStatistic>TrafficKey</xStatistic>
      <xTitle>Traffic Configuration</xTitle>
      <yTitle>Queueput (uSec)</yTitle>
    </instance>
    <instance type="Bar">
      <name>LatencyAllGraph</name>
      <ThreeD>false</ThreeD>
      <iterate>false</iterate>
      <backgroundColor>#eeeeee</backgroundColor>
      <plotBackgroundColor>#ffffff</plotBackgroundColor>
      <statistic>
        <name>TestMinLatency</name>
        <title>Min Latency</title>
        <color>#40ff40</color>
        <valueAxis>Latency (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>TestAvgLatency</name>
        <title>Avg Latency</title>
        <color>#ffff40</color>
        <valueAxis>Latency (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>TestMaxLatency</name>
        <title>Max Latency</title>
        <color>#ff4040</color>
        <valueAxis>Latency (uSec)</valueAxis>
      </statistic>
      <title></title>
      <xStatistic>TrafficKey</xStatistic>
      <xTitle>Traffic Configuration</xTitle>
      <yTitle></yTitle>
    </instance>
    <instance type="Bar">
      <name>InterarrivalAllGraph</name>
      <ThreeD>false</ThreeD>
      <iterate>true</iterate>
      <backgroundColor>#eeeeee</backgroundColor>
      <plotBackgroundColor>#ffffff</plotBackgroundColor>
      <statistic>
        <name>TestMinArrivalTime</name>
        <title>Min Interarrival Time</title>
        <color></color>
        <valueAxis>Interarrival Time (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>TestAvgArrivalTime</name>
        <title>Avg Interarrival Time</title>
        <color></color>
        <valueAxis>Interarrival Time (uSec)</valueAxis>
      </statistic>
      <statistic>
        <name>TestMaxArrivalTime</name>
        <title>Max Interarrival Time</title>
        <color></color>
        <valueAxis>Interarrival Time (uSec)</valueAxis>
      </statistic>
      <title></title>
      <xStatistic>TrafficKey</xStatistic>
      <xTitle>Traffic Configuration</xTitle>
      <yTitle></yTitle>
    </instance>
  </graphs>
  <layout>
    <page name="Title" display="true">
      <width>800</width>
      <height>800</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>startDateStr</name>
        <x>200</x>
        <y>511</y>
        <width>59</width>
        <height>15</height>
        <size>12</size>
        <value xml:space="preserve">Test&amp;nbsp;Date:</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>SpirentLotoTextStr</name>
        <x>200</x>
        <y>341</y>
        <width>287</width>
        <height>31</height>
        <size>25</size>
        <value xml:space="preserve">Spirent&amp;nbsp;TestCenter&amp;nbsp;Report</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>TestTypeStr</name>
        <x>200</x>
        <y>450</y>
        <width>61</width>
        <height>15</height>
        <size>12</size>
        <value xml:space="preserve">Test&amp;nbsp;Type:</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>TestTypeVar</name>
        <x>300</x>
        <y>450</y>
        <width>287</width>
        <height>15</height>
        <size>12</size>
        <value xml:space="preserve">DCB&amp;nbsp;PFC&amp;nbsp;Load&amp;nbsp;Validation&amp;nbsp;Test&amp;nbsp;Statistics</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>CounterModeStr</name>
        <x>200</x>
        <y>480</y>
        <width>80</width>
        <height>16</height>
        <size>12</size>
        <value xml:space="preserve">Counter&amp;nbsp;Mode:</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>CounterModeStr</name>
        <x>300</x>
        <y>480</y>
        <width>31</width>
        <height>16</height>
        <size>12</size>
        <value xml:space="preserve">=$CounterModeType$</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>startDateVar</name>
        <x>300</x>
        <y>510</y>
        <width>142</width>
        <height>16</height>
        <size>12</size>
        <value xml:space="preserve">=$TestStartDate$</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>nameLogo</name>
        <x>0</x>
        <y>0</y>
        <width>200</width>
        <height>100</height>
        <src>upperLeftLogo.jpg</src>
      </instance>
      <instance type="Image">
        <name>hdrLogo</name>
        <x>170</x>
        <y>0</y>
        <width>630</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Image">
        <name>rightLogo</name>
        <x>690</x>
        <y>100</y>
        <width>110</width>
        <height>700</height>
        <src>rightSideLogo.jpg</src>
      </instance>
      <instance type="Image">
        <name>footerLogo</name>
        <x>0</x>
        <y>720</y>
        <width>800</width>
        <height>80</height>
        <src>footerLogo.png</src>
      </instance>
    </page>
    <page name="Test Summary" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>2</gridColumns>
      <instance type="Text">
        <name>TestSummaryTitle</name>
        <x>345</x>
        <y>100</y>
        <width>110</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Test&amp;nbsp;Summary</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>hdr</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>TestSummaryTbl</name>
        <x>80</x>
        <y>150</y>
        <width>580</width>
        <height>100</height>
        <value>TestSummaryTbl</value>
        <size>10</size>
      </instance>
    </page>
    <page name="Trial Summary" display="true">
      <width>1150</width>
      <height>700</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Grid</iterateType>
      <gridRows>2</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>TestSummaryTitle</name>
        <x>377</x>
        <y>106</y>
        <width>283</width>
        <height>21</height>
        <size>16</size>
        <value xml:space="preserve">Trial&amp;nbsp;Summary</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>hdr</name>
        <x>433</x>
        <y>1</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>TrialSummaryTbl</name>
        <x>85</x>
        <y>150</y>
        <width>980</width>
        <height>229</height>
        <value>TrialSummaryTbl</value>
        <size>10</size>
      </instance>
    </page>
    <page name="Per Port Results - Priority 0" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>30</x>
        <y>160</y>
        <width>740</width>
        <height>110</height>
        <value>PriorityResult0Tbl</value>
        <size>12</size>
      </instance>
      <instance type="Text">
        <name>Title</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;0</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
    </page>
    <page name="Per Port Results - Priority 1" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>Title</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;1</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>30</x>
        <y>160</y>
        <width>740</width>
        <height>110</height>
        <value>PriorityResult1Tbl</value>
        <size>12</size>
      </instance>
    </page>
    <page name="Per Port Results - Priority 2" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>Title</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;2</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>30</x>
        <y>160</y>
        <width>740</width>
        <height>110</height>
        <value>PriorityResult2Tbl</value>
        <size>12</size>
      </instance>
    </page>
    <page name="Per Port Results - Priority 3" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>Title</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;3</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>30</x>
        <y>160</y>
        <width>740</width>
        <height>110</height>
        <value>PriorityResult3Tbl</value>
        <size>12</size>
      </instance>
    </page>
    <page name="Per Port Results - Priority 4" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>Title</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;4</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>30</x>
        <y>160</y>
        <width>740</width>
        <height>110</height>
        <value>PriorityResult4Tbl</value>
        <size>12</size>
      </instance>
    </page>
    <page name="Per Port Results - Priority 5" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>Title</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;5</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>30</x>
        <y>160</y>
        <width>740</width>
        <height>110</height>
        <value>PriorityResult5Tbl</value>
        <size>12</size>
      </instance>
    </page>
    <page name="Per Port Results - Priority 6" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>Title</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;6</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>30</x>
        <y>160</y>
        <width>740</width>
        <height>110</height>
        <value>PriorityResult6Tbl</value>
        <size>12</size>
      </instance>
    </page>
    <page name="Per Port Results - Priority 7" display="true">
      <width>800</width>
      <height>600</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>Table</name>
        <x>284</x>
        <y>110</y>
        <width>232</width>
        <height>20</height>
        <size>16</size>
        <value xml:space="preserve">Per&amp;nbsp;Port&amp;nbsp;Results&amp;nbsp;for&amp;nbsp;Priority&amp;nbsp;7</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>Header</name>
        <x>80</x>
        <y>0</y>
        <width>720</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Table">
        <name>PriorityResultTable</name>
        <x>30</x>
        <y>160</y>
        <width>740</width>
        <height>110</height>
        <value>PriorityResult7Tbl</value>
        <size>12</size>
      </instance>
    </page>
    <page name="Version" display="true">
      <width>800</width>
      <height>700</height>
      <masterPage></masterPage>
      <iterate>false</iterate>
      <iterateType>Duplicate</iterateType>
      <gridRows>1</gridRows>
      <gridColumns>1</gridColumns>
      <instance type="Text">
        <name>VersionStr</name>
        <x>35</x>
        <y>580</y>
        <width>97</width>
        <height>11</height>
        <size>9</size>
        <value xml:space="preserve">Template&amp;nbsp;Version:&amp;nbsp;R2C</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>InputStartIdStr</name>
        <x>35</x>
        <y>600</y>
        <width>125</width>
        <height>11</height>
        <size>9</size>
        <value xml:space="preserve">RunTime&amp;nbsp;Start&amp;nbsp;Data&amp;nbsp;Set&amp;nbsp;ID:&amp;nbsp;=$@StartDataSetId$</value>
        <color>#000000</color>
      </instance>
      <instance type="Text">
        <name>inputEndIdStr</name>
        <x>35</x>
        <y>620</y>
        <width>166</width>
        <height>11</height>
        <size>9</size>
        <value xml:space="preserve">RunTime&amp;nbsp;End&amp;nbsp;Data&amp;nbsp;Set&amp;nbsp;ID:&amp;nbsp;=$@EndDataSetId$</value>
        <color>#000000</color>
      </instance>
      <instance type="Image">
        <name>headerLogo</name>
        <x>0</x>
        <y>0</y>
        <width>800</width>
        <height>100</height>
        <src>headerLogo.jpg</src>
      </instance>
      <instance type="Image">
        <name>rightLogo</name>
        <x>670</x>
        <y>100</y>
        <width>130</width>
        <height>400</height>
        <src>contactLogo.jpg</src>
      </instance>
      <instance type="Image">
        <name>footerLogo</name>
        <x>1</x>
        <y>649</y>
        <width>800</width>
        <height>50</height>
        <src>footerLogo.png</src>
      </instance>
      <instance type="Text">
        <name>Timestamp</name>
        <x>35</x>
        <y>640</y>
        <width>296</width>
        <height>11</height>
        <size>9</size>
        <value xml:space="preserve">RR&amp;nbsp;Timestamp&amp;nbsp;Saved&amp;nbsp;Timestamp:&amp;nbsp;=$RRTemplateSavedTimestamp$</value>
        <color>#000000</color>
      </instance>
    </page>
  </layout>
  <csv/>
</template>

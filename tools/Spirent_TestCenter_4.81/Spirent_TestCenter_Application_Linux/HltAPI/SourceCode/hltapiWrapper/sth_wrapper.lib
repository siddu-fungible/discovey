# Copyright (c) 2014 by Spirent Communications, Inc.
# All Rights Reserved
#
# By accessing or executing this software, you agree to be bound
# by the terms of this agreement.
#
# Redistribution and use of this software in source and binary forms,
# with or without modification, are permitted provided that the
# following conditions are met:
#   1.  Redistribution of source code must contain the above copyright
#       notice, this list of conditions, and the following disclaimer.
#   2.  Redistribution in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer
#       in the documentation and/or other materials provided with the
#       distribution.
#   3.  Neither the name Spirent Communications nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# This software is provided by the copyright holders and contributors
# [as is] and any express or implied warranties, including, but not
# limited to, the implied warranties of merchantability and fitness for
# a particular purpose are disclaimed.  In no event shall Spirent
# Communications, Inc. or its contributors be liable for any direct,
# indirect, incidental, special, exemplary, or consequential damages
# (including, but not limited to: procurement of substitute goods or
# services; loss of use, data, or profits; or business interruption)
# however caused and on any theory of liability, whether in contract,
# strict liability, or tort (including negligence or otherwise) arising
# in any way out of the use of this software, even if advised of the
# possibility of such damage.
# File Name:                 sth_wrapper.lib
# Description:               This is a wrapper library for Spirent HLTAPI
# to work with Cisco's existing scripts
#
###############################################################################


set _HLT_WRAPPER_VERSION 3.00

set ::env(SPIRENT_OPTIONS) "STC_LOG_ENABLE 1"

#package require SpirentHltApi

namespace eval ::spirent {

    set supportedversions(stc)    4.30-
    set supportedversions(hltapi) 4.40
    
    variable _WRAPPER_DIR [file dirname [::info script]]
    variable phy_mode
    variable dst_ip_addr
    variable dst_mac_addr
    
    variable subscribe_flag
    variable hResultDataSetFiltered
    variable aStreamblockNameFromId
    variable lstStreamblocks
    
    set phy_mode fiber
    set dst_ip_addr 192.85.1.10
    set dst_mac_addr 00:00:00:00:11:11
    
    set subscribe_flag 0
    array set hResultDataSetFiltered {}
    array set aStreamblockNameFromId {}
    

    variable profile_counter
    variable profile
    set profile_counter 0
    # set profile(profiles,port1) {profile1 profile2 ...}
    # set profile(profiles,port2) {profile5 profile6 ...}
    # set profile(streamblocks,profile1) {streamblock1 streamblock2 ...}
    # set profile(streamblocks,profile2) {streamblock5 streamblock6 ...}
    array set profile {}
    
    # Mapping port (slot number/port number) to port handle (portx)
    variable kl_port_to_handle_map
    set kl_port_to_handle_map {}
    variable kl_handle_to_port_map
    set kl_handle_to_port_map {}    

    
    variable int_gateway_ip_addr_from_port
    set int_gateway_ip_addr_from_port {}

    # MGJ: Only uncomment if you need to explicitly specify which format to return.
    variable port_has_slot_number
    set port_has_slot_number 0

    # MGJ: Required for support of Ixia aggregate QoS statistics.
    variable qos_statistics
    set qos_statistics 0

    variable link_local_intf_ip_addr_default1
    variable link_local_intf_ip_addr_default2
    set link_local_intf_ip_addr_default1 fe80::
    set link_local_intf_ip_addr_default2 0

    variable enable_debug_database
    set enable_debug_database 0
    variable enable_debug_level2
    set enable_debug_level2 0   ;# 1 for enable the debug folder; 0 for disable the debug folder
    variable logfilename    ;#for command log
    variable debugfilename  ;#for debugging log
#multicast start
#    variable gre_object_index
#    set gre_object_index 0
#    ##gre_objects_from_port: style A: key => port handle(1/9/2); vlaue => gre interface handle list(gre_object9 gre_object10)
#    ##gre_objects_from_port: style B: key => gre interface handle(gre_object5); value => ospf handle(router5)
#    variable gre_objects_from_port
#    set gre_objects_from_port {}
#    ##gre_tunnel_list: key => gre interface handle(gre_object7); vlaue => gre args
#    variable gre_tunnel_list
#    set gre_tunnel_list {}
#    ##hosts_from_gre_obj: key => gre interface handle(gre_object4); vlaue => interface handle(host4)
#    variable hosts_from_gre_obj
#    set hosts_from_gre_obj {}
#    ##intface_ip_from_gre_obj: key => gre interface handle; value => intf_ip_addr
#    variable intface_ip_from_gre_obj
#    set intface_ip_from_gre_obj {}
#    variable gre_physical_router_per_port
#    set gre_physical_router_per_port {}
    ##intf_ip_addr_from_port: key => port handle; value => ip address
    variable intf_ip_addr_from_port
    set intf_ip_addr_from_port {}
    ##pkts_per_burst: -pkts_per_burst value in args, or value from ::spirent::pkts_per_burst_list
    variable pkts_per_burst
    set pkts_per_burst {}
    ##pkts_per_burst_list: key => stream id; vlaue => pkts_per_burst value
    variable pkts_per_burst_list
    set pkts_per_burst_list {}
##multicast end

    set internalFileList sth_wrapper_functions.lib
    foreach internalFile $internalFileList {
        if {[catch {source [file join $_WRAPPER_DIR $internalFile]} e]} {
            append eMsg "Error loading the Spirent SpirentHltApiWrapper Internal File $internalFile (Ver. $_WRAPPER_DIR). ($e).\n"
            set errorLoadingUtilityFiles 1
        }
    }
    if {[::info exists errorLoadingUtilityFiles]} {
        catch {package forget SpirentHltApi}
        catch {namespace delete ::sth::}
        return -code 1 -errorcode -2 $eMsg
    } else {
    # Exporting the commands provided by SpirentHltApiWrapper
        namespace export alarms_control
        namespace export alarms_stats
        namespace export cleanup_session
        namespace export connect
        namespace export device_info
        namespace export status_item
        namespace export emulation_ancp_config
        namespace export emulation_ancp_control
        namespace export emulation_ancp_stats
        namespace export emulation_ancp_subscriber_lines_config
        namespace export emulation_bfd_config
        namespace export emulation_bfd_control
        namespace export emulation_bfd_info
        namespace export emulation_bgp_config
        namespace export emulation_bgp_control
        namespace export emulation_bgp_info
        namespace export emulation_bgp_route_config
        namespace export emulation_bgp_route_info
        namespace export emulation_dhcp_config
        namespace export emulation_dhcp_group_config
        namespace export emulation_dhcp_control
        namespace export emulation_dhcp_stats
        namespace export emulation_dhcp_server_config
        namespace export emulation_dhcp_server_control
        namespace export emulation_dhcp_server_relay_agent_config
        namespace export emulation_dhcp_server_stats
        namespace export emulation_efm_config
        namespace export emulation_efm_control
        namespace export emulation_efm_stat
        namespace export emulation_gre_config
        namespace export emulation_igmp_config
        namespace export emulation_igmp_control
        namespace export emulation_igmp_group_config
        namespace export emulation_igmp_info
        namespace export emulation_isis_config
        namespace export emulation_isis_control
        namespace export emulation_isis_info
        namespace export emulation_isis_topology_route_config
        namespace export emulation_l2vpn_pe_config
        namespace export emulation_lacp_config
        namespace export emulation_lacp_control
        namespace export emulation_lacp_info
        namespace export emulation_ldp_config
        namespace export emulation_ldp_control
        namespace export emulation_ldp_info
        namespace export emulation_ldp_route_config
        namespace export emulation_lldp_config
        namespace export emulation_lldp_control
        namespace export emulation_lldp_dcbx_tlv_config
        namespace export emulation_lldp_info
        namespace export emulation_lldp_optional_tlv_config
        namespace export emulation_mld_config
        namespace export emulation_mld_control
        namespace export emulation_mld_group_config
        namespace export emulation_mld_info
        namespace export emulation_mpls_l2vpn_pe_config
        namespace export emulation_mpls_l2vpn_site_config
        namespace export emulation_mpls_l3vpn_pe_config
        namespace export emulation_mpls_l3vpn_site_config
        namespace export emulation_multicast_group_config
        namespace export emulation_multicast_source_config
        namespace export emulation_mvpn_config
        namespace export emulation_mvpn_control
        namespace export emulation_mvpn_customer_port_config
        namespace export emulation_mvpn_info
        namespace export emulation_mvpn_provider_port_config
        namespace export emulation_oam_config_msg
        namespace export emulation_oam_config_topology
        namespace export emulation_oam_control
        namespace export emulation_oam_info
        namespace export emulation_ospf_config
        namespace export emulation_ospf_control
        namespace export emulation_ospf_lsa_config
        namespace export emulation_ospf_route_info
        namespace export emulation_ospf_topology_route_config
        namespace export emulation_ospfv2_info
        namespace export emulation_ospfv3_info
        namespace export emulation_pim_config
        namespace export emulation_pim_control
        namespace export emulation_pim_group_config
        namespace export emulation_pim_info
        namespace export emulation_ping
        namespace export emulation_ptp_config
        namespace export emulation_ptp_control
        namespace export emulation_ptp_stats
        namespace export emulation_rip_config
        namespace export emulation_rip_control
        namespace export emulation_rip_info
        namespace export emulation_rip_route_config
        namespace export emulation_rsvp_config
        namespace export emulation_rsvp_control
        namespace export emulation_rsvp_info
        namespace export emulation_rsvp_tunnel_config
        namespace export emulation_rsvp_tunnel_info
        namespace export emulation_rsvpte_tunnel_control
        namespace export emulation_sip_config
        namespace export emulation_sip_control
        namespace export emulation_sip_stats
        namespace export emulation_vpls_site_config
        namespace export emulation_mpls_tp_config
        namespace export emulation_mpls_tp_port_config
        namespace export emulation_mpls_tp_control
        namespace export emulation_lsp_ping_info
        namespace export emulation_dot1x_config
        namespace export emulation_dot1x_control
        namespace export emulation_dot1x_stats
        namespace export emulation_stp_config
        namespace export emulation_mstp_region_config
        namespace export emulation_msti_config
        namespace export emulation_stp_control
        namespace export emulation_stp_stats
        namespace export fc_config
        namespace export fc_control
        namespace export fc_stats
        namespace export fcoe_config
        namespace export fcoe_control
        namespace export fcoe_stats
        namespace export fcoe_traffic_config
        namespace export fip_traffic_config
        namespace export interface_config
        namespace export interface_stats
        namespace export l2tp_config
        namespace export l2tp_control
        namespace export l2tp_stats
        namespace export labserver_connect
        namespace export labserver_disconnect
        namespace export packet_config_buffers
        namespace export packet_config_filter
        namespace export packet_config_triggers
        namespace export packet_control
        namespace export packet_info
        namespace export packet_stats
        namespace export packet_capture_decode
        namespace export ppp_config
        namespace export ppp_stats
        namespace export pppox_config
        namespace export pppox_control
        namespace export pppox_server_config
        namespace export pppox_server_control
        namespace export pppox_server_stats
        namespace export pppox_stats
        namespace export test_config
        namespace export test_control
        namespace export test_rfc2544_config
        namespace export test_rfc2544_control
        namespace export test_rfc2544_info
        namespace export test_rfc3918_config
        namespace export test_rfc3918_control
        namespace export test_rfc3918_info
        namespace export emulation_device_config
        namespace export traffic_config
        namespace export traffic_control
        namespace export traffic_stats
        namespace export emulation_igmp_querier_config
        namespace export emulation_igmp_querier_control
        namespace export get_port_list_from_connect
        namespace export capture_packets

    }
}

package provide SpirentHltApiWrapper $_HLT_WRAPPER_VERSION
set location [pwd]
puts "HLTAPI Debug :: $location :: Spirent HLTAPI wrapper library (version $_HLT_WRAPPER_VERSION) was successfully loaded and initialized"

namespace eval ::ixia {
    namespace import -force ::spirent::*
}
namespace eval ::AgtTest {
    namespace import -force ::spirent::*
}
namespace eval ::stc4ixia {
    namespace import -force ::spirent::*
}
namespace eval ::stc4agilent {
    namespace import -force ::spirent::*
}

# Rename spirent procedures.
foreach szNamespace {::ixia:: ::AgtTest::} {
    ::spirent::debug "renaming $szNamespace procedures"
    
    foreach szProcName "[info procs ::spirent::*] [info procs ::hltUtils::*] \
                    ::ixia::interface_config ::AgtTest::interface_config \
                    ::ixia::traffic_config ::AgtTest::traffic_config  \
                    ::ixia::traffic_stats ::AgtTest::traffic_stats" {
        # Specify which spirent namespace commands NOT to rename.
        if ![regexp {process_cmd|trace|debug|listToArray|process_arguments|trace_report_enter|trace_report_leave} $szProcName ->] {
        # ixia and AgtTest namespaces are used, not spirent!
                #Renamed procedures must handle calls using those namespaoes.
        # Have to rename procedures for all namespaces.
            regsub ::spirent:: $szProcName $szNamespace szProcName
            
            catch {
                set szProcNameOrig ${szProcName}_orig
                
                rename $szProcName $szProcNameOrig

                ::spirent::debug "\trenaming $szProcName to $szProcNameOrig procedures"
                
                    #   Add an entry procedure to process arguments.
                proc $szProcName {args} [format {
                    
                # This is required to expand the TCL keyword args list.
                    #set args [::spirent::process_arguments %3$s]
                    set szCommand "set args \[::spirent::process_arguments %3$s\]"
                    eval $szCommand
                    
                # This is required to expand the TCL keyword args list.
                    set szCommand "return \[%2$s %3$s\]"
                    eval $szCommand
                } $szProcName $szProcNameOrig \$args]
            
                # Add the stc4ixia and stc4agilent procs as well.
                regsub {ixia::}    $szProcName {stc4ixia::}    szProcName
                regsub {AgtTest::} $szProcName {stc4agilent::} szProcName
                proc $szProcName {args} [format {

                    # This is required to expand the TCL keyword args list.
                    #set args [::spirent::process_arguments %3$s]
                    set szCommand "set args \[::spirent::process_arguments %3$s\]"
                    eval $szCommand

                    # This is required to expand the TCL keyword args list.
                    set szCommand "return \[%2$s %3$s\]"
                    eval $szCommand
                } $szProcName $szProcNameOrig \$args]
            }
        }
    }    
}

# Convert the "SPIRENT_OPTIONS" environment variable into individual environment variables.
# Cisco does not want to have a lot of individual environment variables, so we have collapsed them
# into a single one.
# The SPIRENT_OPTIONS environment variable is a Tcl key-value pair list that can be used with the
# array set command (eg: "STC_LAB_SERVER_ADDRESS 10.1.1.1 STC_LOG_ENABLE TRUE").
if { [info exists ::env(SPIRENT_OPTIONS)] } {
    foreach {key value} $::env(SPIRENT_OPTIONS) {
        set ::env($key) $value
    }
}


#namespace eval ::spirent {

if { [info exists ::env(STC_LOG_ENABLE)] && $::env(STC_LOG_ENABLE) } {
    # Initialize logging.

    if { [info exists ::env(STC_LOG_PATH)] } {
        set logpath $::env(STC_LOG_PATH)
    } elseif { [info exists ::env(EASY_BASEDIR)] } {
        set logpath $::env(EASY_BASEDIR)
    } else {
        set logpath [file join [pwd] SpirentHltApiWrapperLogs]
    }

    catch {file mkdir $logpath}

    set timestamp [clock format [clock scan now] -format {%Y-%m-%d_%H-%M-%S}]

    set ::spirent::logfilename "SpirentHltApiWrapper_Commands_${timestamp}.log"
    set ::spirent::logfilename [file join $logpath $::spirent::logfilename]
    set ::spirent::logfilename [file normalize $::spirent::logfilename]

    # Initialize the command log.
    set fh [open $::spirent::logfilename w]
    close $fh

    set ::spirent::debugfilename "SpirentHltApiWrapper_Debug_${timestamp}.log"
    set ::spirent::debugfilename [file join $logpath $::spirent::debugfilename]
    set ::spirent::debugfilename [file normalize $::spirent::debugfilename]

    # Initialize the command log.
    set fh [open $::spirent::debugfilename w]
    close $fh

    # Add a trace function to all the commands in the specified namespace.
    foreach entry "::ixia::* ::AgtTest::* ::stc4ixia::* ::stc4agilent::* ::ixiangpf::*" {
        foreach procedure [info procs $entry] {
            if { ! [regexp {_orig$} $procedure] } {
                trace add execution $procedure enter ::spirent::TraceEnter
                trace add execution $procedure leave ::spirent::TraceLeave
            }
        }
    }
} ;# End if logging enabled.


#} ;# End namespace spirent.
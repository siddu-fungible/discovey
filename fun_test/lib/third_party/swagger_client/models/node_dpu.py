# coding: utf-8

"""
    Fungible Controller Intent API

    Intent based REST API for interfacing between the management/orchestration system and Fungible Controller `(FC)` Services `INTERNAL`: The API is for internal controller use only `DEBUG`: The API will not be available in production use   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NodeDpu(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available': 'bool',
        'fault_zones': 'list[str]',
        'mgmt_ip': 'str',
        'mgmt_port': 'str',
        'name': 'str',
        'node_class': 'str',
        'state': 'str',
        'uuid': 'str',
        'dpus': 'list[Dpu]'
    }

    attribute_map = {
        'available': 'available',
        'fault_zones': 'fault_zones',
        'mgmt_ip': 'mgmt_ip',
        'mgmt_port': 'mgmt_port',
        'name': 'name',
        'node_class': 'node_class',
        'state': 'state',
        'uuid': 'uuid',
        'dpus': 'dpus'
    }

    def __init__(self, available=None, fault_zones=None, mgmt_ip=None, mgmt_port=None, name=None, node_class=None, state=None, uuid=None, dpus=None):  # noqa: E501
        """NodeDpu - a model defined in Swagger"""  # noqa: E501

        self._available = None
        self._fault_zones = None
        self._mgmt_ip = None
        self._mgmt_port = None
        self._name = None
        self._node_class = None
        self._state = None
        self._uuid = None
        self._dpus = None
        self.discriminator = None

        if available is not None:
            self.available = available
        if fault_zones is not None:
            self.fault_zones = fault_zones
        if mgmt_ip is not None:
            self.mgmt_ip = mgmt_ip
        if mgmt_port is not None:
            self.mgmt_port = mgmt_port
        if name is not None:
            self.name = name
        if node_class is not None:
            self.node_class = node_class
        if state is not None:
            self.state = state
        if uuid is not None:
            self.uuid = uuid
        if dpus is not None:
            self.dpus = dpus

    @property
    def available(self):
        """Gets the available of this NodeDpu.  # noqa: E501


        :return: The available of this NodeDpu.  # noqa: E501
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this NodeDpu.


        :param available: The available of this NodeDpu.  # noqa: E501
        :type: bool
        """

        self._available = available

    @property
    def fault_zones(self):
        """Gets the fault_zones of this NodeDpu.  # noqa: E501


        :return: The fault_zones of this NodeDpu.  # noqa: E501
        :rtype: list[str]
        """
        return self._fault_zones

    @fault_zones.setter
    def fault_zones(self, fault_zones):
        """Sets the fault_zones of this NodeDpu.


        :param fault_zones: The fault_zones of this NodeDpu.  # noqa: E501
        :type: list[str]
        """

        self._fault_zones = fault_zones

    @property
    def mgmt_ip(self):
        """Gets the mgmt_ip of this NodeDpu.  # noqa: E501


        :return: The mgmt_ip of this NodeDpu.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_ip

    @mgmt_ip.setter
    def mgmt_ip(self, mgmt_ip):
        """Sets the mgmt_ip of this NodeDpu.


        :param mgmt_ip: The mgmt_ip of this NodeDpu.  # noqa: E501
        :type: str
        """

        self._mgmt_ip = mgmt_ip

    @property
    def mgmt_port(self):
        """Gets the mgmt_port of this NodeDpu.  # noqa: E501


        :return: The mgmt_port of this NodeDpu.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_port

    @mgmt_port.setter
    def mgmt_port(self, mgmt_port):
        """Sets the mgmt_port of this NodeDpu.


        :param mgmt_port: The mgmt_port of this NodeDpu.  # noqa: E501
        :type: str
        """

        self._mgmt_port = mgmt_port

    @property
    def name(self):
        """Gets the name of this NodeDpu.  # noqa: E501


        :return: The name of this NodeDpu.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeDpu.


        :param name: The name of this NodeDpu.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def node_class(self):
        """Gets the node_class of this NodeDpu.  # noqa: E501


        :return: The node_class of this NodeDpu.  # noqa: E501
        :rtype: str
        """
        return self._node_class

    @node_class.setter
    def node_class(self, node_class):
        """Sets the node_class of this NodeDpu.


        :param node_class: The node_class of this NodeDpu.  # noqa: E501
        :type: str
        """

        self._node_class = node_class

    @property
    def state(self):
        """Gets the state of this NodeDpu.  # noqa: E501


        :return: The state of this NodeDpu.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this NodeDpu.


        :param state: The state of this NodeDpu.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def uuid(self):
        """Gets the uuid of this NodeDpu.  # noqa: E501


        :return: The uuid of this NodeDpu.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this NodeDpu.


        :param uuid: The uuid of this NodeDpu.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def dpus(self):
        """Gets the dpus of this NodeDpu.  # noqa: E501


        :return: The dpus of this NodeDpu.  # noqa: E501
        :rtype: list[Dpu]
        """
        return self._dpus

    @dpus.setter
    def dpus(self, dpus):
        """Sets the dpus of this NodeDpu.


        :param dpus: The dpus of this NodeDpu.  # noqa: E501
        :type: list[Dpu]
        """

        self._dpus = dpus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeDpu, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeDpu):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Fungible Controller Intent API

    Intent based REST API for interfacing between the management/orchestration system and Fungible Controller `(FC)` Services `INTERNAL`: The API is for internal controller use only `DEBUG`: The API will not be available in production use   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InterfaceState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'oper_status': 'NetworkState',
        'admin_status': 'NetworkState',
        'name': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'oper_status': 'oper-status',
        'admin_status': 'admin-status',
        'name': 'name'
    }

    def __init__(self, enabled=None, oper_status=None, admin_status=None, name=None):  # noqa: E501
        """InterfaceState - a model defined in Swagger"""  # noqa: E501

        self._enabled = None
        self._oper_status = None
        self._admin_status = None
        self._name = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if oper_status is not None:
            self.oper_status = oper_status
        if admin_status is not None:
            self.admin_status = admin_status
        if name is not None:
            self.name = name

    @property
    def enabled(self):
        """Gets the enabled of this InterfaceState.  # noqa: E501


        :return: The enabled of this InterfaceState.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this InterfaceState.


        :param enabled: The enabled of this InterfaceState.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def oper_status(self):
        """Gets the oper_status of this InterfaceState.  # noqa: E501


        :return: The oper_status of this InterfaceState.  # noqa: E501
        :rtype: NetworkState
        """
        return self._oper_status

    @oper_status.setter
    def oper_status(self, oper_status):
        """Sets the oper_status of this InterfaceState.


        :param oper_status: The oper_status of this InterfaceState.  # noqa: E501
        :type: NetworkState
        """

        self._oper_status = oper_status

    @property
    def admin_status(self):
        """Gets the admin_status of this InterfaceState.  # noqa: E501


        :return: The admin_status of this InterfaceState.  # noqa: E501
        :rtype: NetworkState
        """
        return self._admin_status

    @admin_status.setter
    def admin_status(self, admin_status):
        """Sets the admin_status of this InterfaceState.


        :param admin_status: The admin_status of this InterfaceState.  # noqa: E501
        :type: NetworkState
        """

        self._admin_status = admin_status

    @property
    def name(self):
        """Gets the name of this InterfaceState.  # noqa: E501


        :return: The name of this InterfaceState.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InterfaceState.


        :param name: The name of this InterfaceState.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InterfaceState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InterfaceState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

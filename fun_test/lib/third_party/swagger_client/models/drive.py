# coding: utf-8

"""
    Fungible Controller Intent API

    Intent based REST API for interfacing between the management/orchestration system and Fungible Controller `(FC)` Services `INTERNAL`: The API is for internal controller use only `DEBUG`: The API will not be available in production use   # noqa: E501

    OpenAPI spec version: 0.1.1
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Drive(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'dpu': 'str',
        'fault_zone': 'str',
        'nguid_low': 'int',
        'nguid_high': 'int',
        'usage': 'int',
        'slot_id': 'int',
        'state': 'ResourceState',
        'plugged': 'bool',
        'capacity': 'int',
        'volumes': 'list[str]',
        'created_at': 'datetime',
        'modified_at': 'datetime'
    }

    attribute_map = {
        'uuid': 'uuid',
        'dpu': 'dpu',
        'fault_zone': 'fault_zone',
        'nguid_low': 'nguid_low',
        'nguid_high': 'nguid_high',
        'usage': 'usage',
        'slot_id': 'slot_id',
        'state': 'state',
        'plugged': 'plugged',
        'capacity': 'capacity',
        'volumes': 'volumes',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, uuid=None, dpu=None, fault_zone=None, nguid_low=None, nguid_high=None, usage=None, slot_id=None, state=None, plugged=None, capacity=None, volumes=None, created_at=None, modified_at=None):  # noqa: E501
        """Drive - a model defined in Swagger"""  # noqa: E501

        self._uuid = None
        self._dpu = None
        self._fault_zone = None
        self._nguid_low = None
        self._nguid_high = None
        self._usage = None
        self._slot_id = None
        self._state = None
        self._plugged = None
        self._capacity = None
        self._volumes = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        self.dpu = dpu
        if fault_zone is not None:
            self.fault_zone = fault_zone
        if nguid_low is not None:
            self.nguid_low = nguid_low
        if nguid_high is not None:
            self.nguid_high = nguid_high
        if usage is not None:
            self.usage = usage
        self.slot_id = slot_id
        if state is not None:
            self.state = state
        if plugged is not None:
            self.plugged = plugged
        if capacity is not None:
            self.capacity = capacity
        if volumes is not None:
            self.volumes = volumes
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def uuid(self):
        """Gets the uuid of this Drive.  # noqa: E501

        unique id of drive assigned by FS  # noqa: E501

        :return: The uuid of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Drive.

        unique id of drive assigned by FS  # noqa: E501

        :param uuid: The uuid of this Drive.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def dpu(self):
        """Gets the dpu of this Drive.  # noqa: E501

        id of dpu to which this drive is attached  # noqa: E501

        :return: The dpu of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._dpu

    @dpu.setter
    def dpu(self, dpu):
        """Sets the dpu of this Drive.

        id of dpu to which this drive is attached  # noqa: E501

        :param dpu: The dpu of this Drive.  # noqa: E501
        :type: str
        """
        if dpu is None:
            raise ValueError("Invalid value for `dpu`, must not be `None`")  # noqa: E501

        self._dpu = dpu

    @property
    def fault_zone(self):
        """Gets the fault_zone of this Drive.  # noqa: E501


        :return: The fault_zone of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._fault_zone

    @fault_zone.setter
    def fault_zone(self, fault_zone):
        """Sets the fault_zone of this Drive.


        :param fault_zone: The fault_zone of this Drive.  # noqa: E501
        :type: str
        """

        self._fault_zone = fault_zone

    @property
    def nguid_low(self):
        """Gets the nguid_low of this Drive.  # noqa: E501


        :return: The nguid_low of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._nguid_low

    @nguid_low.setter
    def nguid_low(self, nguid_low):
        """Sets the nguid_low of this Drive.


        :param nguid_low: The nguid_low of this Drive.  # noqa: E501
        :type: int
        """
        if nguid_low is not None and nguid_low < 0:  # noqa: E501
            raise ValueError("Invalid value for `nguid_low`, must be a value greater than or equal to `0`")  # noqa: E501

        self._nguid_low = nguid_low

    @property
    def nguid_high(self):
        """Gets the nguid_high of this Drive.  # noqa: E501


        :return: The nguid_high of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._nguid_high

    @nguid_high.setter
    def nguid_high(self, nguid_high):
        """Sets the nguid_high of this Drive.


        :param nguid_high: The nguid_high of this Drive.  # noqa: E501
        :type: int
        """
        if nguid_high is not None and nguid_high < 0:  # noqa: E501
            raise ValueError("Invalid value for `nguid_high`, must be a value greater than or equal to `0`")  # noqa: E501

        self._nguid_high = nguid_high

    @property
    def usage(self):
        """Gets the usage of this Drive.  # noqa: E501


        :return: The usage of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this Drive.


        :param usage: The usage of this Drive.  # noqa: E501
        :type: int
        """
        if usage is not None and usage < 0:  # noqa: E501
            raise ValueError("Invalid value for `usage`, must be a value greater than or equal to `0`")  # noqa: E501

        self._usage = usage

    @property
    def slot_id(self):
        """Gets the slot_id of this Drive.  # noqa: E501

        dpu slot to which drive is connected  # noqa: E501

        :return: The slot_id of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._slot_id

    @slot_id.setter
    def slot_id(self, slot_id):
        """Sets the slot_id of this Drive.

        dpu slot to which drive is connected  # noqa: E501

        :param slot_id: The slot_id of this Drive.  # noqa: E501
        :type: int
        """
        if slot_id is None:
            raise ValueError("Invalid value for `slot_id`, must not be `None`")  # noqa: E501

        self._slot_id = slot_id

    @property
    def state(self):
        """Gets the state of this Drive.  # noqa: E501


        :return: The state of this Drive.  # noqa: E501
        :rtype: ResourceState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Drive.


        :param state: The state of this Drive.  # noqa: E501
        :type: ResourceState
        """

        self._state = state

    @property
    def plugged(self):
        """Gets the plugged of this Drive.  # noqa: E501


        :return: The plugged of this Drive.  # noqa: E501
        :rtype: bool
        """
        return self._plugged

    @plugged.setter
    def plugged(self, plugged):
        """Sets the plugged of this Drive.


        :param plugged: The plugged of this Drive.  # noqa: E501
        :type: bool
        """

        self._plugged = plugged

    @property
    def capacity(self):
        """Gets the capacity of this Drive.  # noqa: E501


        :return: The capacity of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Drive.


        :param capacity: The capacity of this Drive.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def volumes(self):
        """Gets the volumes of this Drive.  # noqa: E501


        :return: The volumes of this Drive.  # noqa: E501
        :rtype: list[str]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this Drive.


        :param volumes: The volumes of this Drive.  # noqa: E501
        :type: list[str]
        """

        self._volumes = volumes

    @property
    def created_at(self):
        """Gets the created_at of this Drive.  # noqa: E501

        set on create  # noqa: E501

        :return: The created_at of this Drive.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Drive.

        set on create  # noqa: E501

        :param created_at: The created_at of this Drive.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Drive.  # noqa: E501

        set when modified  # noqa: E501

        :return: The modified_at of this Drive.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Drive.

        set when modified  # noqa: E501

        :param modified_at: The modified_at of this Drive.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Drive, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Drive):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

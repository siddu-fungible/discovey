# coding: utf-8

"""
    Fungible Controller Intent API

    Intent based REST API for interfacing between the management/orchestration system and Fungible Controller `(FC)` Services `INTERNAL`: The API is for internal controller use only `DEBUG`: The API will not be available in production use   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BodyNodeUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'op': 'NodeUpdateOp',
        'state': 'ResourceState',
        'available': 'bool',
        'ip_assignment_dhcp': 'bool',
        'dataplane_ip': 'str',
        'fpg_num': 'int',
        'subnet_mask': 'str',
        'next_hop': 'str',
        'mgmt_ip': 'str',
        'level': 'str',
        'status': 'str'
    }

    attribute_map = {
        'op': 'op',
        'state': 'state',
        'available': 'available',
        'ip_assignment_dhcp': 'ip_assignment_dhcp',
        'dataplane_ip': 'dataplane_ip',
        'fpg_num': 'fpg_num',
        'subnet_mask': 'subnet_mask',
        'next_hop': 'next_hop',
        'mgmt_ip': 'mgmt_ip',
        'level': 'level',
        'status': 'status'
    }

    def __init__(self, op=None, state=None, available=None, ip_assignment_dhcp=None, dataplane_ip=None, fpg_num=None, subnet_mask=None, next_hop=None, mgmt_ip=None, level=None, status=None):  # noqa: E501
        """BodyNodeUpdate - a model defined in Swagger"""  # noqa: E501

        self._op = None
        self._state = None
        self._available = None
        self._ip_assignment_dhcp = None
        self._dataplane_ip = None
        self._fpg_num = None
        self._subnet_mask = None
        self._next_hop = None
        self._mgmt_ip = None
        self._level = None
        self._status = None
        self.discriminator = None

        self.op = op
        if state is not None:
            self.state = state
        if available is not None:
            self.available = available
        if ip_assignment_dhcp is not None:
            self.ip_assignment_dhcp = ip_assignment_dhcp
        if dataplane_ip is not None:
            self.dataplane_ip = dataplane_ip
        if fpg_num is not None:
            self.fpg_num = fpg_num
        if subnet_mask is not None:
            self.subnet_mask = subnet_mask
        if next_hop is not None:
            self.next_hop = next_hop
        if mgmt_ip is not None:
            self.mgmt_ip = mgmt_ip
        if level is not None:
            self.level = level
        if status is not None:
            self.status = status

    @property
    def op(self):
        """Gets the op of this BodyNodeUpdate.  # noqa: E501


        :return: The op of this BodyNodeUpdate.  # noqa: E501
        :rtype: NodeUpdateOp
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this BodyNodeUpdate.


        :param op: The op of this BodyNodeUpdate.  # noqa: E501
        :type: NodeUpdateOp
        """
        if op is None:
            raise ValueError("Invalid value for `op`, must not be `None`")  # noqa: E501

        self._op = op

    @property
    def state(self):
        """Gets the state of this BodyNodeUpdate.  # noqa: E501


        :return: The state of this BodyNodeUpdate.  # noqa: E501
        :rtype: ResourceState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BodyNodeUpdate.


        :param state: The state of this BodyNodeUpdate.  # noqa: E501
        :type: ResourceState
        """

        self._state = state

    @property
    def available(self):
        """Gets the available of this BodyNodeUpdate.  # noqa: E501


        :return: The available of this BodyNodeUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this BodyNodeUpdate.


        :param available: The available of this BodyNodeUpdate.  # noqa: E501
        :type: bool
        """

        self._available = available

    @property
    def ip_assignment_dhcp(self):
        """Gets the ip_assignment_dhcp of this BodyNodeUpdate.  # noqa: E501


        :return: The ip_assignment_dhcp of this BodyNodeUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._ip_assignment_dhcp

    @ip_assignment_dhcp.setter
    def ip_assignment_dhcp(self, ip_assignment_dhcp):
        """Sets the ip_assignment_dhcp of this BodyNodeUpdate.


        :param ip_assignment_dhcp: The ip_assignment_dhcp of this BodyNodeUpdate.  # noqa: E501
        :type: bool
        """

        self._ip_assignment_dhcp = ip_assignment_dhcp

    @property
    def dataplane_ip(self):
        """Gets the dataplane_ip of this BodyNodeUpdate.  # noqa: E501


        :return: The dataplane_ip of this BodyNodeUpdate.  # noqa: E501
        :rtype: str
        """
        return self._dataplane_ip

    @dataplane_ip.setter
    def dataplane_ip(self, dataplane_ip):
        """Sets the dataplane_ip of this BodyNodeUpdate.


        :param dataplane_ip: The dataplane_ip of this BodyNodeUpdate.  # noqa: E501
        :type: str
        """

        self._dataplane_ip = dataplane_ip

    @property
    def fpg_num(self):
        """Gets the fpg_num of this BodyNodeUpdate.  # noqa: E501


        :return: The fpg_num of this BodyNodeUpdate.  # noqa: E501
        :rtype: int
        """
        return self._fpg_num

    @fpg_num.setter
    def fpg_num(self, fpg_num):
        """Sets the fpg_num of this BodyNodeUpdate.


        :param fpg_num: The fpg_num of this BodyNodeUpdate.  # noqa: E501
        :type: int
        """

        self._fpg_num = fpg_num

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this BodyNodeUpdate.  # noqa: E501


        :return: The subnet_mask of this BodyNodeUpdate.  # noqa: E501
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this BodyNodeUpdate.


        :param subnet_mask: The subnet_mask of this BodyNodeUpdate.  # noqa: E501
        :type: str
        """

        self._subnet_mask = subnet_mask

    @property
    def next_hop(self):
        """Gets the next_hop of this BodyNodeUpdate.  # noqa: E501


        :return: The next_hop of this BodyNodeUpdate.  # noqa: E501
        :rtype: str
        """
        return self._next_hop

    @next_hop.setter
    def next_hop(self, next_hop):
        """Sets the next_hop of this BodyNodeUpdate.


        :param next_hop: The next_hop of this BodyNodeUpdate.  # noqa: E501
        :type: str
        """

        self._next_hop = next_hop

    @property
    def mgmt_ip(self):
        """Gets the mgmt_ip of this BodyNodeUpdate.  # noqa: E501


        :return: The mgmt_ip of this BodyNodeUpdate.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_ip

    @mgmt_ip.setter
    def mgmt_ip(self, mgmt_ip):
        """Sets the mgmt_ip of this BodyNodeUpdate.


        :param mgmt_ip: The mgmt_ip of this BodyNodeUpdate.  # noqa: E501
        :type: str
        """

        self._mgmt_ip = mgmt_ip

    @property
    def level(self):
        """Gets the level of this BodyNodeUpdate.  # noqa: E501


        :return: The level of this BodyNodeUpdate.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this BodyNodeUpdate.


        :param level: The level of this BodyNodeUpdate.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def status(self):
        """Gets the status of this BodyNodeUpdate.  # noqa: E501


        :return: The status of this BodyNodeUpdate.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BodyNodeUpdate.


        :param status: The status of this BodyNodeUpdate.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BodyNodeUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BodyNodeUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

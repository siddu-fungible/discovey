# coding: utf-8

"""
    Fungible Controller Intent API

    Intent based REST API for interfacing between the management/orchestration system and Fungible Controller `(FC)` Services `INTERNAL`: The API is for internal controller use only `DEBUG`: The API will not be available in production use   # noqa: E501

    OpenAPI spec version: 0.1.1
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DpIpSetup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ip_assignment_dhcp': 'bool',
        'subnet_mask': 'str',
        'next_hop': 'str'
    }

    attribute_map = {
        'ip_assignment_dhcp': 'ip_assignment_dhcp',
        'subnet_mask': 'subnet_mask',
        'next_hop': 'next_hop'
    }

    def __init__(self, ip_assignment_dhcp=None, subnet_mask=None, next_hop=None):  # noqa: E501
        """DpIpSetup - a model defined in Swagger"""  # noqa: E501

        self._ip_assignment_dhcp = None
        self._subnet_mask = None
        self._next_hop = None
        self.discriminator = None

        if ip_assignment_dhcp is not None:
            self.ip_assignment_dhcp = ip_assignment_dhcp
        if subnet_mask is not None:
            self.subnet_mask = subnet_mask
        if next_hop is not None:
            self.next_hop = next_hop

    @property
    def ip_assignment_dhcp(self):
        """Gets the ip_assignment_dhcp of this DpIpSetup.  # noqa: E501


        :return: The ip_assignment_dhcp of this DpIpSetup.  # noqa: E501
        :rtype: bool
        """
        return self._ip_assignment_dhcp

    @ip_assignment_dhcp.setter
    def ip_assignment_dhcp(self, ip_assignment_dhcp):
        """Sets the ip_assignment_dhcp of this DpIpSetup.


        :param ip_assignment_dhcp: The ip_assignment_dhcp of this DpIpSetup.  # noqa: E501
        :type: bool
        """

        self._ip_assignment_dhcp = ip_assignment_dhcp

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this DpIpSetup.  # noqa: E501


        :return: The subnet_mask of this DpIpSetup.  # noqa: E501
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this DpIpSetup.


        :param subnet_mask: The subnet_mask of this DpIpSetup.  # noqa: E501
        :type: str
        """

        self._subnet_mask = subnet_mask

    @property
    def next_hop(self):
        """Gets the next_hop of this DpIpSetup.  # noqa: E501


        :return: The next_hop of this DpIpSetup.  # noqa: E501
        :rtype: str
        """
        return self._next_hop

    @next_hop.setter
    def next_hop(self, next_hop):
        """Sets the next_hop of this DpIpSetup.


        :param next_hop: The next_hop of this DpIpSetup.  # noqa: E501
        :type: str
        """

        self._next_hop = next_hop

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DpIpSetup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DpIpSetup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

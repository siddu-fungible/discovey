# coding: utf-8

"""
    Fungible Controller Intent API

    Intent based REST API for interfacing between the management/orchestration system and Fungible Controller `(FC)` Services `INTERNAL`: The API is for internal controller use only `DEBUG`: The API will not be available in production use   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BodyVolumeAttach(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transport': 'Transport',
        'host_nqn': 'str',
        'remote_ip': 'str',
        'fnid': 'object',
        'huid': 'object',
        'ctlid': 'object'
    }

    attribute_map = {
        'transport': 'transport',
        'host_nqn': 'host_nqn',
        'remote_ip': 'remote_ip',
        'fnid': 'fnid',
        'huid': 'huid',
        'ctlid': 'ctlid'
    }

    def __init__(self, transport=None, host_nqn=None, remote_ip=None, fnid=None, huid=None, ctlid=None):  # noqa: E501
        """BodyVolumeAttach - a model defined in Swagger"""  # noqa: E501

        self._transport = None
        self._host_nqn = None
        self._remote_ip = None
        self._fnid = None
        self._huid = None
        self._ctlid = None
        self.discriminator = None

        if transport is not None:
            self.transport = transport
        if host_nqn is not None:
            self.host_nqn = host_nqn
        if remote_ip is not None:
            self.remote_ip = remote_ip
        if fnid is not None:
            self.fnid = fnid
        if huid is not None:
            self.huid = huid
        if ctlid is not None:
            self.ctlid = ctlid

    @property
    def transport(self):
        """Gets the transport of this BodyVolumeAttach.  # noqa: E501


        :return: The transport of this BodyVolumeAttach.  # noqa: E501
        :rtype: Transport
        """
        return self._transport

    @transport.setter
    def transport(self, transport):
        """Sets the transport of this BodyVolumeAttach.


        :param transport: The transport of this BodyVolumeAttach.  # noqa: E501
        :type: Transport
        """

        self._transport = transport

    @property
    def host_nqn(self):
        """Gets the host_nqn of this BodyVolumeAttach.  # noqa: E501


        :return: The host_nqn of this BodyVolumeAttach.  # noqa: E501
        :rtype: str
        """
        return self._host_nqn

    @host_nqn.setter
    def host_nqn(self, host_nqn):
        """Sets the host_nqn of this BodyVolumeAttach.


        :param host_nqn: The host_nqn of this BodyVolumeAttach.  # noqa: E501
        :type: str
        """

        self._host_nqn = host_nqn

    @property
    def remote_ip(self):
        """Gets the remote_ip of this BodyVolumeAttach.  # noqa: E501


        :return: The remote_ip of this BodyVolumeAttach.  # noqa: E501
        :rtype: str
        """
        return self._remote_ip

    @remote_ip.setter
    def remote_ip(self, remote_ip):
        """Sets the remote_ip of this BodyVolumeAttach.


        :param remote_ip: The remote_ip of this BodyVolumeAttach.  # noqa: E501
        :type: str
        """

        self._remote_ip = remote_ip

    @property
    def fnid(self):
        """Gets the fnid of this BodyVolumeAttach.  # noqa: E501


        :return: The fnid of this BodyVolumeAttach.  # noqa: E501
        :rtype: object
        """
        return self._fnid

    @fnid.setter
    def fnid(self, fnid):
        """Sets the fnid of this BodyVolumeAttach.


        :param fnid: The fnid of this BodyVolumeAttach.  # noqa: E501
        :type: object
        """

        self._fnid = fnid

    @property
    def huid(self):
        """Gets the huid of this BodyVolumeAttach.  # noqa: E501


        :return: The huid of this BodyVolumeAttach.  # noqa: E501
        :rtype: object
        """
        return self._huid

    @huid.setter
    def huid(self, huid):
        """Sets the huid of this BodyVolumeAttach.


        :param huid: The huid of this BodyVolumeAttach.  # noqa: E501
        :type: object
        """

        self._huid = huid

    @property
    def ctlid(self):
        """Gets the ctlid of this BodyVolumeAttach.  # noqa: E501


        :return: The ctlid of this BodyVolumeAttach.  # noqa: E501
        :rtype: object
        """
        return self._ctlid

    @ctlid.setter
    def ctlid(self, ctlid):
        """Sets the ctlid of this BodyVolumeAttach.


        :param ctlid: The ctlid of this BodyVolumeAttach.  # noqa: E501
        :type: object
        """

        self._ctlid = ctlid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BodyVolumeAttach, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BodyVolumeAttach):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

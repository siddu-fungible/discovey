# coding: utf-8

"""
    Fungible Storage Controller Intent API

    REST API for interfacing between the management/orchestration system and Fungible Storage Controller `(FSC)` `INTERNAL`: The API is for internal controller use only `DEBUG`: The API will not be available in production use   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TopologydriveApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_drive(self, dpu_id, body_drive_create, **kwargs):  # noqa: E501
        """(INTERNAL) Add drive to the specified dpu  # noqa: E501

        Add a drive to the specified dpu. The dpu specified by dpu_id MUST already exist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_drive(dpu_id, body_drive_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpu_id: DPU id (required)
        :param BodyDriveCreate body_drive_create: (required)
        :return: ResponseDataWithCreateUuid
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_drive_with_http_info(dpu_id, body_drive_create, **kwargs)  # noqa: E501
        else:
            (data) = self.add_drive_with_http_info(dpu_id, body_drive_create, **kwargs)  # noqa: E501
            return data

    def add_drive_with_http_info(self, dpu_id, body_drive_create, **kwargs):  # noqa: E501
        """(INTERNAL) Add drive to the specified dpu  # noqa: E501

        Add a drive to the specified dpu. The dpu specified by dpu_id MUST already exist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_drive_with_http_info(dpu_id, body_drive_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpu_id: DPU id (required)
        :param BodyDriveCreate body_drive_create: (required)
        :return: ResponseDataWithCreateUuid
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dpu_id', 'body_drive_create']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_drive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dpu_id' is set
        if ('dpu_id' not in params or
                params['dpu_id'] is None):
            raise ValueError("Missing the required parameter `dpu_id` when calling `add_drive`")  # noqa: E501
        # verify the required parameter 'body_drive_create' is set
        if ('body_drive_create' not in params or
                params['body_drive_create'] is None):
            raise ValueError("Missing the required parameter `body_drive_create` when calling `add_drive`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dpu_id' in params:
            path_params['dpu_id'] = params['dpu_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_drive_create' in params:
            body_params = params['body_drive_create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/topology/dpus/{dpu_id}/drives', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseDataWithCreateUuid',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_drive(self, drive_uuid, **kwargs):  # noqa: E501
        """(INTERNAL) delete drive  # noqa: E501

        Deletes the drive with specified uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_drive(drive_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str drive_uuid: FSC assigned drive UUID (required)
        :return: SuccessResponseFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_drive_with_http_info(drive_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_drive_with_http_info(drive_uuid, **kwargs)  # noqa: E501
            return data

    def delete_drive_with_http_info(self, drive_uuid, **kwargs):  # noqa: E501
        """(INTERNAL) delete drive  # noqa: E501

        Deletes the drive with specified uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_drive_with_http_info(drive_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str drive_uuid: FSC assigned drive UUID (required)
        :return: SuccessResponseFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['drive_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_drive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'drive_uuid' is set
        if ('drive_uuid' not in params or
                params['drive_uuid'] is None):
            raise ValueError("Missing the required parameter `drive_uuid` when calling `delete_drive`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'drive_uuid' in params:
            path_params['drive_uuid'] = params['drive_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/topology/drives/{drive_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def format_drive_change_uuid(self, drive_uuid, body_drive_format, **kwargs):  # noqa: E501
        """format drive  # noqa: E501

        Format is equivalent to labeling the drive for use by the FSC. The uuid of the drive is re-written  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.format_drive_change_uuid(drive_uuid, body_drive_format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str drive_uuid: FSC assigned drive UUID (required)
        :param BodyDriveFormat body_drive_format: (required)
        :return: ResponseDataWithCreateUuid
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.format_drive_change_uuid_with_http_info(drive_uuid, body_drive_format, **kwargs)  # noqa: E501
        else:
            (data) = self.format_drive_change_uuid_with_http_info(drive_uuid, body_drive_format, **kwargs)  # noqa: E501
            return data

    def format_drive_change_uuid_with_http_info(self, drive_uuid, body_drive_format, **kwargs):  # noqa: E501
        """format drive  # noqa: E501

        Format is equivalent to labeling the drive for use by the FSC. The uuid of the drive is re-written  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.format_drive_change_uuid_with_http_info(drive_uuid, body_drive_format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str drive_uuid: FSC assigned drive UUID (required)
        :param BodyDriveFormat body_drive_format: (required)
        :return: ResponseDataWithCreateUuid
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['drive_uuid', 'body_drive_format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method format_drive_change_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'drive_uuid' is set
        if ('drive_uuid' not in params or
                params['drive_uuid'] is None):
            raise ValueError("Missing the required parameter `drive_uuid` when calling `format_drive_change_uuid`")  # noqa: E501
        # verify the required parameter 'body_drive_format' is set
        if ('body_drive_format' not in params or
                params['body_drive_format'] is None):
            raise ValueError("Missing the required parameter `body_drive_format` when calling `format_drive_change_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'drive_uuid' in params:
            path_params['drive_uuid'] = params['drive_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_drive_format' in params:
            body_params = params['body_drive_format']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/topology/drives/{drive_uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseDataWithCreateUuid',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_drive(self, drive_uuid, **kwargs):  # noqa: E501
        """get drive properties/single property  # noqa: E501

        Returns drive properties for specified drive uuid. If field is specified, returns only the specified field property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_drive(drive_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str drive_uuid: FSC assigned drive UUID (required)
        :param str field: Specific field name of object attribute to retrieve
        :return: ResponseDataWithFreeformObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_drive_with_http_info(drive_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_drive_with_http_info(drive_uuid, **kwargs)  # noqa: E501
            return data

    def get_drive_with_http_info(self, drive_uuid, **kwargs):  # noqa: E501
        """get drive properties/single property  # noqa: E501

        Returns drive properties for specified drive uuid. If field is specified, returns only the specified field property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_drive_with_http_info(drive_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str drive_uuid: FSC assigned drive UUID (required)
        :param str field: Specific field name of object attribute to retrieve
        :return: ResponseDataWithFreeformObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['drive_uuid', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_drive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'drive_uuid' is set
        if ('drive_uuid' not in params or
                params['drive_uuid'] is None):
            raise ValueError("Missing the required parameter `drive_uuid` when calling `get_drive`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'drive_uuid' in params:
            path_params['drive_uuid'] = params['drive_uuid']  # noqa: E501

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/topology/drives/{drive_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseDataWithFreeformObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_drive(self, drive_uuid, body_drive_update, **kwargs):  # noqa: E501
        """(INTERNAL) modify drive attributes  # noqa: E501

        Modify attributes of an existing drive. An op parameter is used to specify the command  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_drive(drive_uuid, body_drive_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str drive_uuid: FSC assigned drive UUID (required)
        :param BodyDriveUpdate body_drive_update: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_drive_with_http_info(drive_uuid, body_drive_update, **kwargs)  # noqa: E501
        else:
            (data) = self.update_drive_with_http_info(drive_uuid, body_drive_update, **kwargs)  # noqa: E501
            return data

    def update_drive_with_http_info(self, drive_uuid, body_drive_update, **kwargs):  # noqa: E501
        """(INTERNAL) modify drive attributes  # noqa: E501

        Modify attributes of an existing drive. An op parameter is used to specify the command  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_drive_with_http_info(drive_uuid, body_drive_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str drive_uuid: FSC assigned drive UUID (required)
        :param BodyDriveUpdate body_drive_update: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['drive_uuid', 'body_drive_update']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_drive" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'drive_uuid' is set
        if ('drive_uuid' not in params or
                params['drive_uuid'] is None):
            raise ValueError("Missing the required parameter `drive_uuid` when calling `update_drive`")  # noqa: E501
        # verify the required parameter 'body_drive_update' is set
        if ('body_drive_update' not in params or
                params['body_drive_update'] is None):
            raise ValueError("Missing the required parameter `body_drive_update` when calling `update_drive`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'drive_uuid' in params:
            path_params['drive_uuid'] = params['drive_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_drive_update' in params:
            body_params = params['body_drive_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/topology/drives/{drive_uuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Fungible Storage Controller Intent API

    REST API for interfacing between the management/orchestration system and Fungible Storage Controller `(FSC)`  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StoragevolumesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def attach_volume(self, volume_uuid, body_volume_attach, **kwargs):  # noqa: E501
        """Attach volume  # noqa: E501

        Attach a volume to a host using specified transport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_volume(volume_uuid, body_volume_attach, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume_uuid: FSC assigned volume UUID (required)
        :param BodyVolumeAttach body_volume_attach: (required)
        :return: ResponseCreateUuid
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attach_volume_with_http_info(volume_uuid, body_volume_attach, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_volume_with_http_info(volume_uuid, body_volume_attach, **kwargs)  # noqa: E501
            return data

    def attach_volume_with_http_info(self, volume_uuid, body_volume_attach, **kwargs):  # noqa: E501
        """Attach volume  # noqa: E501

        Attach a volume to a host using specified transport  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_volume_with_http_info(volume_uuid, body_volume_attach, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume_uuid: FSC assigned volume UUID (required)
        :param BodyVolumeAttach body_volume_attach: (required)
        :return: ResponseCreateUuid
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume_uuid', 'body_volume_attach']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume_uuid' is set
        if ('volume_uuid' not in params or
                params['volume_uuid'] is None):
            raise ValueError("Missing the required parameter `volume_uuid` when calling `attach_volume`")  # noqa: E501
        # verify the required parameter 'body_volume_attach' is set
        if ('body_volume_attach' not in params or
                params['body_volume_attach'] is None):
            raise ValueError("Missing the required parameter `body_volume_attach` when calling `attach_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_uuid' in params:
            path_params['volume_uuid'] = params['volume_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_volume_attach' in params:
            body_params = params['body_volume_attach']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/volumes/{volume_uuid}/ports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseCreateUuid',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_volume(self, body_volume_intent_create, **kwargs):  # noqa: E501
        """Create a new volume  # noqa: E501

        Create new volume using the specified parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_volume(body_volume_intent_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyVolumeIntentCreate body_volume_intent_create: (required)
        :return: ResponseCreateUuid
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_volume_with_http_info(body_volume_intent_create, **kwargs)  # noqa: E501
        else:
            (data) = self.create_volume_with_http_info(body_volume_intent_create, **kwargs)  # noqa: E501
            return data

    def create_volume_with_http_info(self, body_volume_intent_create, **kwargs):  # noqa: E501
        """Create a new volume  # noqa: E501

        Create new volume using the specified parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_volume_with_http_info(body_volume_intent_create, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BodyVolumeIntentCreate body_volume_intent_create: (required)
        :return: ResponseCreateUuid
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body_volume_intent_create']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body_volume_intent_create' is set
        if ('body_volume_intent_create' not in params or
                params['body_volume_intent_create'] is None):
            raise ValueError("Missing the required parameter `body_volume_intent_create` when calling `create_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_volume_intent_create' in params:
            body_params = params['body_volume_intent_create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/volumes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseCreateUuid',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_port(self, port_uuid, **kwargs):  # noqa: E501
        """Delete port  # noqa: E501

        Deletes the port with specified uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_port(port_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str port_uuid: FSC assigned port UUID (required)
        :return: SuccessResponseFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_port_with_http_info(port_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_port_with_http_info(port_uuid, **kwargs)  # noqa: E501
            return data

    def delete_port_with_http_info(self, port_uuid, **kwargs):  # noqa: E501
        """Delete port  # noqa: E501

        Deletes the port with specified uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_port_with_http_info(port_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str port_uuid: FSC assigned port UUID (required)
        :return: SuccessResponseFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['port_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'port_uuid' is set
        if ('port_uuid' not in params or
                params['port_uuid'] is None):
            raise ValueError("Missing the required parameter `port_uuid` when calling `delete_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'port_uuid' in params:
            path_params['port_uuid'] = params['port_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/ports/{port_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_volume(self, volume_uuid, **kwargs):  # noqa: E501
        """Delete volume  # noqa: E501

        Deletes the volume with specified uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_volume(volume_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume_uuid: FSC assigned volume UUID (required)
        :return: SuccessResponseFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_volume_with_http_info(volume_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_volume_with_http_info(volume_uuid, **kwargs)  # noqa: E501
            return data

    def delete_volume_with_http_info(self, volume_uuid, **kwargs):  # noqa: E501
        """Delete volume  # noqa: E501

        Deletes the volume with specified uuid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_volume_with_http_info(volume_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume_uuid: FSC assigned volume UUID (required)
        :return: SuccessResponseFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume_uuid' is set
        if ('volume_uuid' not in params or
                params['volume_uuid'] is None):
            raise ValueError("Missing the required parameter `volume_uuid` when calling `delete_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_uuid' in params:
            path_params['volume_uuid'] = params['volume_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/volumes/{volume_uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_port(self, port_uuid, **kwargs):  # noqa: E501
        """Get port properties/single property  # noqa: E501

        Returns port properties for specified port uuid. If field is specified, returns only the specified field property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_port(port_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str port_uuid: FSC assigned port UUID (required)
        :param str field: Specific field name of object attribute to retrieve
        :return: ResponseDataWithFreeformObjects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_port_with_http_info(port_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_port_with_http_info(port_uuid, **kwargs)  # noqa: E501
            return data

    def get_port_with_http_info(self, port_uuid, **kwargs):  # noqa: E501
        """Get port properties/single property  # noqa: E501

        Returns port properties for specified port uuid. If field is specified, returns only the specified field property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_port_with_http_info(port_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str port_uuid: FSC assigned port UUID (required)
        :param str field: Specific field name of object attribute to retrieve
        :return: ResponseDataWithFreeformObjects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['port_uuid', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_port" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'port_uuid' is set
        if ('port_uuid' not in params or
                params['port_uuid'] is None):
            raise ValueError("Missing the required parameter `port_uuid` when calling `get_port`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'port_uuid' in params:
            path_params['port_uuid'] = params['port_uuid']  # noqa: E501

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/ports/{port_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseDataWithFreeformObjects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ports(self, **kwargs):  # noqa: E501
        """Get multiple ports  # noqa: E501

        Retrieve map of all ports (uuid->port)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ports(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The number of items to skip before starting to collect the list
        :param int limit: The numbers of items to return in the resulting list
        :return: ResponseDataWithMapOfPorts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ports_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_ports_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_ports_with_http_info(self, **kwargs):  # noqa: E501
        """Get multiple ports  # noqa: E501

        Retrieve map of all ports (uuid->port)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ports_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The number of items to skip before starting to collect the list
        :param int limit: The numbers of items to return in the resulting list
        :return: ResponseDataWithMapOfPorts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ports" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_ports`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_ports`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_ports`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/ports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseDataWithMapOfPorts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_volume(self, volume_uuid, **kwargs):  # noqa: E501
        """Get volume properties/single property  # noqa: E501

        Returns volume properties for specified volume uuid. If field is specified, returns only the specified field property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume(volume_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume_uuid: FSC assigned volume UUID (required)
        :param str field: Specific field name of object attribute to retrieve
        :return: ResponseDataWithFreeformObjects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_volume_with_http_info(volume_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_volume_with_http_info(volume_uuid, **kwargs)  # noqa: E501
            return data

    def get_volume_with_http_info(self, volume_uuid, **kwargs):  # noqa: E501
        """Get volume properties/single property  # noqa: E501

        Returns volume properties for specified volume uuid. If field is specified, returns only the specified field property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_with_http_info(volume_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume_uuid: FSC assigned volume UUID (required)
        :param str field: Specific field name of object attribute to retrieve
        :return: ResponseDataWithFreeformObjects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume_uuid', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume_uuid' is set
        if ('volume_uuid' not in params or
                params['volume_uuid'] is None):
            raise ValueError("Missing the required parameter `volume_uuid` when calling `get_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_uuid' in params:
            path_params['volume_uuid'] = params['volume_uuid']  # noqa: E501

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/volumes/{volume_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseDataWithFreeformObjects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_volume_topology(self, volume_uuid, **kwargs):  # noqa: E501
        """Get volume topology  # noqa: E501

        Returns volume topology for specified volume uuid (such as uuids of source volumes)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_topology(volume_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume_uuid: FSC assigned volume UUID (required)
        :return: ResponseVolumeTopology
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_volume_topology_with_http_info(volume_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_volume_topology_with_http_info(volume_uuid, **kwargs)  # noqa: E501
            return data

    def get_volume_topology_with_http_info(self, volume_uuid, **kwargs):  # noqa: E501
        """Get volume topology  # noqa: E501

        Returns volume topology for specified volume uuid (such as uuids of source volumes)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_topology_with_http_info(volume_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume_uuid: FSC assigned volume UUID (required)
        :return: ResponseVolumeTopology
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volume_topology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume_uuid' is set
        if ('volume_uuid' not in params or
                params['volume_uuid'] is None):
            raise ValueError("Missing the required parameter `volume_uuid` when calling `get_volume_topology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_uuid' in params:
            path_params['volume_uuid'] = params['volume_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/volumes/{volume_uuid}/topology', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseVolumeTopology',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_volumes(self, **kwargs):  # noqa: E501
        """Get multiple volumes  # noqa: E501

        Retrieve map of all user created volumes (uuid->volume)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volumes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The number of items to skip before starting to collect the list
        :param int limit: The numbers of items to return in the resulting list
        :return: ResponseDataWithMapOfVolumes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_volumes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_volumes_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_volumes_with_http_info(self, **kwargs):  # noqa: E501
        """Get multiple volumes  # noqa: E501

        Retrieve map of all user created volumes (uuid->volume)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volumes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The number of items to skip before starting to collect the list
        :param int limit: The numbers of items to return in the resulting list
        :return: ResponseDataWithMapOfVolumes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volumes" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_volumes`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_volumes`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `get_volumes`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/volumes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseDataWithMapOfVolumes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def inject_fault_volume(self, volume_uuid, **kwargs):  # noqa: E501
        """(DEBUG) Inject volume failure  # noqa: E501

        Pseudo-inject a failure in the specified volume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inject_fault_volume(volume_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume_uuid: FSC assigned volume UUID (required)
        :return: ResponseVolumeInjectFault
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.inject_fault_volume_with_http_info(volume_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.inject_fault_volume_with_http_info(volume_uuid, **kwargs)  # noqa: E501
            return data

    def inject_fault_volume_with_http_info(self, volume_uuid, **kwargs):  # noqa: E501
        """(DEBUG) Inject volume failure  # noqa: E501

        Pseudo-inject a failure in the specified volume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.inject_fault_volume_with_http_info(volume_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume_uuid: FSC assigned volume UUID (required)
        :return: ResponseVolumeInjectFault
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inject_fault_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume_uuid' is set
        if ('volume_uuid' not in params or
                params['volume_uuid'] is None):
            raise ValueError("Missing the required parameter `volume_uuid` when calling `inject_fault_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_uuid' in params:
            path_params['volume_uuid'] = params['volume_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/volumes/{volume_uuid}/fault', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseVolumeInjectFault',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_volume(self, volume_uuid, body_volume_update, **kwargs):  # noqa: E501
        """Modify volume attributes  # noqa: E501

        Modify attributes of an existing volume. A body op parameter is used to specify the command  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_volume(volume_uuid, body_volume_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume_uuid: FSC assigned volume UUID (required)
        :param BodyVolumeUpdate body_volume_update: (required)
        :return: SuccessResponseFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_volume_with_http_info(volume_uuid, body_volume_update, **kwargs)  # noqa: E501
        else:
            (data) = self.update_volume_with_http_info(volume_uuid, body_volume_update, **kwargs)  # noqa: E501
            return data

    def update_volume_with_http_info(self, volume_uuid, body_volume_update, **kwargs):  # noqa: E501
        """Modify volume attributes  # noqa: E501

        Modify attributes of an existing volume. A body op parameter is used to specify the command  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_volume_with_http_info(volume_uuid, body_volume_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str volume_uuid: FSC assigned volume UUID (required)
        :param BodyVolumeUpdate body_volume_update: (required)
        :return: SuccessResponseFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['volume_uuid', 'body_volume_update']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_volume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'volume_uuid' is set
        if ('volume_uuid' not in params or
                params['volume_uuid'] is None):
            raise ValueError("Missing the required parameter `volume_uuid` when calling `update_volume`")  # noqa: E501
        # verify the required parameter 'body_volume_update' is set
        if ('body_volume_update' not in params or
                params['body_volume_update'] is None):
            raise ValueError("Missing the required parameter `body_volume_update` when calling `update_volume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'volume_uuid' in params:
            path_params['volume_uuid'] = params['volume_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body_volume_update' in params:
            body_params = params['body_volume_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/volumes/{volume_uuid}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Fungible Storage Controller Intent API

    REST API for interfacing between the management/orchestration system and Fungible Storage Controller `(FSC)`  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StoragepoolsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_global_pool_dpu(self, **kwargs):  # noqa: E501
        """Add dpu to the global pool  # noqa: E501

        Add a dpu to the default global pool. The dpu specified by dpu_id MUST already exist in the topology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_global_pool_dpu(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpu_id:
        :return: SuccessResponseFields
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_global_pool_dpu_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_global_pool_dpu_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_global_pool_dpu_with_http_info(self, **kwargs):  # noqa: E501
        """Add dpu to the global pool  # noqa: E501

        Add a dpu to the default global pool. The dpu specified by dpu_id MUST already exist in the topology  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_global_pool_dpu_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dpu_id:
        :return: SuccessResponseFields
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dpu_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_global_pool_dpu" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dpu_id' in params:
            body_params = params['dpu_id']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/pools/dpus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResponseFields',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_pools(self, **kwargs):  # noqa: E501
        """Get info of all the storage pools  # noqa: E501

        Retrieve map of all storage pools (uuid->pool)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_pools(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ResponseDataWithMapOfPools
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_pools_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_pools_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_pools_with_http_info(self, **kwargs):  # noqa: E501
        """Get info of all the storage pools  # noqa: E501

        Retrieve map of all storage pools (uuid->pool)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_pools_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ResponseDataWithMapOfPools
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_pools" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/pools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseDataWithMapOfPools',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pool_by_uuid(self, pool_uuid, **kwargs):  # noqa: E501
        """get pool properties/single property  # noqa: E501

        Returns pool properties for specified pool uuid. If field is specified, returns only the specified field property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pool_by_uuid(pool_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_uuid: FSC assigned pool UUID (required)
        :param str field: Specific field name of object attribute to retrieve
        :return: ResponseDataWithFreeformObjects
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_pool_by_uuid_with_http_info(pool_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_pool_by_uuid_with_http_info(pool_uuid, **kwargs)  # noqa: E501
            return data

    def get_pool_by_uuid_with_http_info(self, pool_uuid, **kwargs):  # noqa: E501
        """get pool properties/single property  # noqa: E501

        Returns pool properties for specified pool uuid. If field is specified, returns only the specified field property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pool_by_uuid_with_http_info(pool_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pool_uuid: FSC assigned pool UUID (required)
        :param str field: Specific field name of object attribute to retrieve
        :return: ResponseDataWithFreeformObjects
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pool_uuid', 'field']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pool_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pool_uuid' is set
        if ('pool_uuid' not in params or
                params['pool_uuid'] is None):
            raise ValueError("Missing the required parameter `pool_uuid` when calling `get_pool_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pool_uuid' in params:
            path_params['pool_uuid'] = params['pool_uuid']  # noqa: E501

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage/pools/{pool_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseDataWithFreeformObjects',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

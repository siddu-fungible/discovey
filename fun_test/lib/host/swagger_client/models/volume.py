# coding: utf-8

"""
    Fungible Storage Controller Intent API

    REST API for interfacing between the management/orchestration system and Fungible Storage Controller `(FSC)` `INTERNAL`: The API is for internal controller use only `DEBUG`: The API will not be available in production use   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Volume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'uuid': 'str',
        'vol_type': 'VolumeTypes',
        'pool': 'str',
        'dpu': 'str',
        'capacity': 'int',
        'compress': 'bool',
        'encrypt': 'bool',
        'zip_effort': 'ZipEffort',
        'allow_expansion': 'bool',
        'stripe_count': 'int',
        'crc_enabled': 'bool',
        'crc_type': 'str',
        'is_clone': 'bool',
        'clone_source_volume_uuid': 'str',
        'state': 'ResourceState',
        'rebuild_state': 'RebuildState',
        'rebuild_percent': 'int',
        'spare_vol': 'str',
        'ports': 'MapOfPorts',
        'src_vols': 'list[str]',
        'stats': 'VolumeStats',
        'physical_capacity': 'int',
        'additional_fields': 'AdditionalFields',
        'created_at': 'datetime',
        'modified_at': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'uuid': 'uuid',
        'vol_type': 'vol_type',
        'pool': 'pool',
        'dpu': 'dpu',
        'capacity': 'capacity',
        'compress': 'compress',
        'encrypt': 'encrypt',
        'zip_effort': 'zip_effort',
        'allow_expansion': 'allow_expansion',
        'stripe_count': 'stripe_count',
        'crc_enabled': 'crc_enabled',
        'crc_type': 'crc_type',
        'is_clone': 'is_clone',
        'clone_source_volume_uuid': 'clone_source_volume_uuid',
        'state': 'state',
        'rebuild_state': 'rebuild_state',
        'rebuild_percent': 'rebuild_percent',
        'spare_vol': 'spare_vol',
        'ports': 'ports',
        'src_vols': 'src_vols',
        'stats': 'stats',
        'physical_capacity': 'physical_capacity',
        'additional_fields': 'additional_fields',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, name=None, uuid=None, vol_type=None, pool=None, dpu=None, capacity=None, compress=None, encrypt=None, zip_effort=None, allow_expansion=None, stripe_count=None, crc_enabled=None, crc_type='nocrc', is_clone=None, clone_source_volume_uuid=None, state=None, rebuild_state=None, rebuild_percent=None, spare_vol=None, ports=None, src_vols=None, stats=None, physical_capacity=None, additional_fields=None, created_at=None, modified_at=None):  # noqa: E501
        """Volume - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._uuid = None
        self._vol_type = None
        self._pool = None
        self._dpu = None
        self._capacity = None
        self._compress = None
        self._encrypt = None
        self._zip_effort = None
        self._allow_expansion = None
        self._stripe_count = None
        self._crc_enabled = None
        self._crc_type = None
        self._is_clone = None
        self._clone_source_volume_uuid = None
        self._state = None
        self._rebuild_state = None
        self._rebuild_percent = None
        self._spare_vol = None
        self._ports = None
        self._src_vols = None
        self._stats = None
        self._physical_capacity = None
        self._additional_fields = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None

        self.name = name
        self.uuid = uuid
        self.vol_type = vol_type
        if pool is not None:
            self.pool = pool
        if dpu is not None:
            self.dpu = dpu
        if capacity is not None:
            self.capacity = capacity
        if compress is not None:
            self.compress = compress
        if encrypt is not None:
            self.encrypt = encrypt
        if zip_effort is not None:
            self.zip_effort = zip_effort
        if allow_expansion is not None:
            self.allow_expansion = allow_expansion
        if stripe_count is not None:
            self.stripe_count = stripe_count
        if crc_enabled is not None:
            self.crc_enabled = crc_enabled
        if crc_type is not None:
            self.crc_type = crc_type
        if is_clone is not None:
            self.is_clone = is_clone
        if clone_source_volume_uuid is not None:
            self.clone_source_volume_uuid = clone_source_volume_uuid
        if state is not None:
            self.state = state
        if rebuild_state is not None:
            self.rebuild_state = rebuild_state
        if rebuild_percent is not None:
            self.rebuild_percent = rebuild_percent
        if spare_vol is not None:
            self.spare_vol = spare_vol
        if ports is not None:
            self.ports = ports
        if src_vols is not None:
            self.src_vols = src_vols
        if stats is not None:
            self.stats = stats
        self.physical_capacity = physical_capacity
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def name(self):
        """Gets the name of this Volume.  # noqa: E501

        user specified name of volume  # noqa: E501

        :return: The name of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Volume.

        user specified name of volume  # noqa: E501

        :param name: The name of this Volume.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def uuid(self):
        """Gets the uuid of this Volume.  # noqa: E501

        assigned by FSC  # noqa: E501

        :return: The uuid of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Volume.

        assigned by FSC  # noqa: E501

        :param uuid: The uuid of this Volume.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def vol_type(self):
        """Gets the vol_type of this Volume.  # noqa: E501


        :return: The vol_type of this Volume.  # noqa: E501
        :rtype: VolumeTypes
        """
        return self._vol_type

    @vol_type.setter
    def vol_type(self, vol_type):
        """Sets the vol_type of this Volume.


        :param vol_type: The vol_type of this Volume.  # noqa: E501
        :type: VolumeTypes
        """
        if vol_type is None:
            raise ValueError("Invalid value for `vol_type`, must not be `None`")  # noqa: E501

        self._vol_type = vol_type

    @property
    def pool(self):
        """Gets the pool of this Volume.  # noqa: E501


        :return: The pool of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this Volume.


        :param pool: The pool of this Volume.  # noqa: E501
        :type: str
        """

        self._pool = pool

    @property
    def dpu(self):
        """Gets the dpu of this Volume.  # noqa: E501


        :return: The dpu of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._dpu

    @dpu.setter
    def dpu(self, dpu):
        """Sets the dpu of this Volume.


        :param dpu: The dpu of this Volume.  # noqa: E501
        :type: str
        """

        self._dpu = dpu

    @property
    def capacity(self):
        """Gets the capacity of this Volume.  # noqa: E501


        :return: The capacity of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Volume.


        :param capacity: The capacity of this Volume.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    @property
    def compress(self):
        """Gets the compress of this Volume.  # noqa: E501


        :return: The compress of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._compress

    @compress.setter
    def compress(self, compress):
        """Sets the compress of this Volume.


        :param compress: The compress of this Volume.  # noqa: E501
        :type: bool
        """

        self._compress = compress

    @property
    def encrypt(self):
        """Gets the encrypt of this Volume.  # noqa: E501


        :return: The encrypt of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._encrypt

    @encrypt.setter
    def encrypt(self, encrypt):
        """Sets the encrypt of this Volume.


        :param encrypt: The encrypt of this Volume.  # noqa: E501
        :type: bool
        """

        self._encrypt = encrypt

    @property
    def zip_effort(self):
        """Gets the zip_effort of this Volume.  # noqa: E501


        :return: The zip_effort of this Volume.  # noqa: E501
        :rtype: ZipEffort
        """
        return self._zip_effort

    @zip_effort.setter
    def zip_effort(self, zip_effort):
        """Sets the zip_effort of this Volume.


        :param zip_effort: The zip_effort of this Volume.  # noqa: E501
        :type: ZipEffort
        """

        self._zip_effort = zip_effort

    @property
    def allow_expansion(self):
        """Gets the allow_expansion of this Volume.  # noqa: E501


        :return: The allow_expansion of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._allow_expansion

    @allow_expansion.setter
    def allow_expansion(self, allow_expansion):
        """Sets the allow_expansion of this Volume.


        :param allow_expansion: The allow_expansion of this Volume.  # noqa: E501
        :type: bool
        """

        self._allow_expansion = allow_expansion

    @property
    def stripe_count(self):
        """Gets the stripe_count of this Volume.  # noqa: E501


        :return: The stripe_count of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._stripe_count

    @stripe_count.setter
    def stripe_count(self, stripe_count):
        """Sets the stripe_count of this Volume.


        :param stripe_count: The stripe_count of this Volume.  # noqa: E501
        :type: int
        """

        self._stripe_count = stripe_count

    @property
    def crc_enabled(self):
        """Gets the crc_enabled of this Volume.  # noqa: E501


        :return: The crc_enabled of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._crc_enabled

    @crc_enabled.setter
    def crc_enabled(self, crc_enabled):
        """Sets the crc_enabled of this Volume.


        :param crc_enabled: The crc_enabled of this Volume.  # noqa: E501
        :type: bool
        """

        self._crc_enabled = crc_enabled

    @property
    def crc_type(self):
        """Gets the crc_type of this Volume.  # noqa: E501


        :return: The crc_type of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._crc_type

    @crc_type.setter
    def crc_type(self, crc_type):
        """Sets the crc_type of this Volume.


        :param crc_type: The crc_type of this Volume.  # noqa: E501
        :type: str
        """
        allowed_values = ["crc16", "crc32", "crc32c", "crc64", "nocrc"]  # noqa: E501
        if crc_type not in allowed_values:
            raise ValueError(
                "Invalid value for `crc_type` ({0}), must be one of {1}"  # noqa: E501
                .format(crc_type, allowed_values)
            )

        self._crc_type = crc_type

    @property
    def is_clone(self):
        """Gets the is_clone of this Volume.  # noqa: E501


        :return: The is_clone of this Volume.  # noqa: E501
        :rtype: bool
        """
        return self._is_clone

    @is_clone.setter
    def is_clone(self, is_clone):
        """Sets the is_clone of this Volume.


        :param is_clone: The is_clone of this Volume.  # noqa: E501
        :type: bool
        """

        self._is_clone = is_clone

    @property
    def clone_source_volume_uuid(self):
        """Gets the clone_source_volume_uuid of this Volume.  # noqa: E501


        :return: The clone_source_volume_uuid of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._clone_source_volume_uuid

    @clone_source_volume_uuid.setter
    def clone_source_volume_uuid(self, clone_source_volume_uuid):
        """Sets the clone_source_volume_uuid of this Volume.


        :param clone_source_volume_uuid: The clone_source_volume_uuid of this Volume.  # noqa: E501
        :type: str
        """

        self._clone_source_volume_uuid = clone_source_volume_uuid

    @property
    def state(self):
        """Gets the state of this Volume.  # noqa: E501


        :return: The state of this Volume.  # noqa: E501
        :rtype: ResourceState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Volume.


        :param state: The state of this Volume.  # noqa: E501
        :type: ResourceState
        """

        self._state = state

    @property
    def rebuild_state(self):
        """Gets the rebuild_state of this Volume.  # noqa: E501


        :return: The rebuild_state of this Volume.  # noqa: E501
        :rtype: RebuildState
        """
        return self._rebuild_state

    @rebuild_state.setter
    def rebuild_state(self, rebuild_state):
        """Sets the rebuild_state of this Volume.


        :param rebuild_state: The rebuild_state of this Volume.  # noqa: E501
        :type: RebuildState
        """

        self._rebuild_state = rebuild_state

    @property
    def rebuild_percent(self):
        """Gets the rebuild_percent of this Volume.  # noqa: E501


        :return: The rebuild_percent of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._rebuild_percent

    @rebuild_percent.setter
    def rebuild_percent(self, rebuild_percent):
        """Sets the rebuild_percent of this Volume.


        :param rebuild_percent: The rebuild_percent of this Volume.  # noqa: E501
        :type: int
        """
        if rebuild_percent is not None and rebuild_percent > 100:  # noqa: E501
            raise ValueError("Invalid value for `rebuild_percent`, must be a value less than or equal to `100`")  # noqa: E501
        if rebuild_percent is not None and rebuild_percent < 0:  # noqa: E501
            raise ValueError("Invalid value for `rebuild_percent`, must be a value greater than or equal to `0`")  # noqa: E501

        self._rebuild_percent = rebuild_percent

    @property
    def spare_vol(self):
        """Gets the spare_vol of this Volume.  # noqa: E501


        :return: The spare_vol of this Volume.  # noqa: E501
        :rtype: str
        """
        return self._spare_vol

    @spare_vol.setter
    def spare_vol(self, spare_vol):
        """Sets the spare_vol of this Volume.


        :param spare_vol: The spare_vol of this Volume.  # noqa: E501
        :type: str
        """

        self._spare_vol = spare_vol

    @property
    def ports(self):
        """Gets the ports of this Volume.  # noqa: E501


        :return: The ports of this Volume.  # noqa: E501
        :rtype: MapOfPorts
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this Volume.


        :param ports: The ports of this Volume.  # noqa: E501
        :type: MapOfPorts
        """

        self._ports = ports

    @property
    def src_vols(self):
        """Gets the src_vols of this Volume.  # noqa: E501


        :return: The src_vols of this Volume.  # noqa: E501
        :rtype: list[str]
        """
        return self._src_vols

    @src_vols.setter
    def src_vols(self, src_vols):
        """Sets the src_vols of this Volume.


        :param src_vols: The src_vols of this Volume.  # noqa: E501
        :type: list[str]
        """

        self._src_vols = src_vols

    @property
    def stats(self):
        """Gets the stats of this Volume.  # noqa: E501


        :return: The stats of this Volume.  # noqa: E501
        :rtype: VolumeStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Volume.


        :param stats: The stats of this Volume.  # noqa: E501
        :type: VolumeStats
        """

        self._stats = stats

    @property
    def physical_capacity(self):
        """Gets the physical_capacity of this Volume.  # noqa: E501


        :return: The physical_capacity of this Volume.  # noqa: E501
        :rtype: int
        """
        return self._physical_capacity

    @physical_capacity.setter
    def physical_capacity(self, physical_capacity):
        """Sets the physical_capacity of this Volume.


        :param physical_capacity: The physical_capacity of this Volume.  # noqa: E501
        :type: int
        """
        if physical_capacity is None:
            raise ValueError("Invalid value for `physical_capacity`, must not be `None`")  # noqa: E501

        self._physical_capacity = physical_capacity

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Volume.  # noqa: E501


        :return: The additional_fields of this Volume.  # noqa: E501
        :rtype: AdditionalFields
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Volume.


        :param additional_fields: The additional_fields of this Volume.  # noqa: E501
        :type: AdditionalFields
        """

        self._additional_fields = additional_fields

    @property
    def created_at(self):
        """Gets the created_at of this Volume.  # noqa: E501

        set on create  # noqa: E501

        :return: The created_at of this Volume.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Volume.

        set on create  # noqa: E501

        :param created_at: The created_at of this Volume.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Volume.  # noqa: E501

        set when modified  # noqa: E501

        :return: The modified_at of this Volume.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Volume.

        set when modified  # noqa: E501

        :param modified_at: The modified_at of this Volume.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Volume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Volume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

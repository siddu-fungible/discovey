# coding: utf-8

"""
    Fungible Storage Controller Intent API

    REST API for interfacing between the management/orchestration system and Fungible Storage Controller `(FSC)` `INTERNAL`: The API is for internal controller use only `DEBUG`: The API will not be available in production use   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Interface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'openconfig_if_ethernetethernet': 'InterfaceOpenconfigifethernetethernet',
        'subinterfaces': 'InterfaceSubinterfaces',
        'name': 'str',
        'state': 'InterfaceState'
    }

    attribute_map = {
        'openconfig_if_ethernetethernet': 'openconfig-if-ethernet:ethernet',
        'subinterfaces': 'subinterfaces',
        'name': 'name',
        'state': 'state'
    }

    def __init__(self, openconfig_if_ethernetethernet=None, subinterfaces=None, name=None, state=None):  # noqa: E501
        """Interface - a model defined in Swagger"""  # noqa: E501

        self._openconfig_if_ethernetethernet = None
        self._subinterfaces = None
        self._name = None
        self._state = None
        self.discriminator = None

        if openconfig_if_ethernetethernet is not None:
            self.openconfig_if_ethernetethernet = openconfig_if_ethernetethernet
        if subinterfaces is not None:
            self.subinterfaces = subinterfaces
        if name is not None:
            self.name = name
        if state is not None:
            self.state = state

    @property
    def openconfig_if_ethernetethernet(self):
        """Gets the openconfig_if_ethernetethernet of this Interface.  # noqa: E501


        :return: The openconfig_if_ethernetethernet of this Interface.  # noqa: E501
        :rtype: InterfaceOpenconfigifethernetethernet
        """
        return self._openconfig_if_ethernetethernet

    @openconfig_if_ethernetethernet.setter
    def openconfig_if_ethernetethernet(self, openconfig_if_ethernetethernet):
        """Sets the openconfig_if_ethernetethernet of this Interface.


        :param openconfig_if_ethernetethernet: The openconfig_if_ethernetethernet of this Interface.  # noqa: E501
        :type: InterfaceOpenconfigifethernetethernet
        """

        self._openconfig_if_ethernetethernet = openconfig_if_ethernetethernet

    @property
    def subinterfaces(self):
        """Gets the subinterfaces of this Interface.  # noqa: E501


        :return: The subinterfaces of this Interface.  # noqa: E501
        :rtype: InterfaceSubinterfaces
        """
        return self._subinterfaces

    @subinterfaces.setter
    def subinterfaces(self, subinterfaces):
        """Sets the subinterfaces of this Interface.


        :param subinterfaces: The subinterfaces of this Interface.  # noqa: E501
        :type: InterfaceSubinterfaces
        """

        self._subinterfaces = subinterfaces

    @property
    def name(self):
        """Gets the name of this Interface.  # noqa: E501


        :return: The name of this Interface.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Interface.


        :param name: The name of this Interface.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Interface.  # noqa: E501


        :return: The state of this Interface.  # noqa: E501
        :rtype: InterfaceState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Interface.


        :param state: The state of this Interface.  # noqa: E501
        :type: InterfaceState
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Interface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Interface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

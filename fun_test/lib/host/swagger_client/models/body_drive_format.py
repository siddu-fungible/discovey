# coding: utf-8

"""
    Fungible Storage Controller Intent API

    REST API for interfacing between the management/orchestration system and Fungible Storage Controller `(FSC)`  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BodyDriveFormat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drive_uuid': 'str',
        'dpu_id': 'str',
        'nguid_low': 'int',
        'nguid_high': 'int',
        'capacity_bytes': 'int'
    }

    attribute_map = {
        'drive_uuid': 'drive_uuid',
        'dpu_id': 'dpu_id',
        'nguid_low': 'nguid_low',
        'nguid_high': 'nguid_high',
        'capacity_bytes': 'capacity_bytes'
    }

    def __init__(self, drive_uuid=None, dpu_id=None, nguid_low=None, nguid_high=None, capacity_bytes=None):  # noqa: E501
        """BodyDriveFormat - a model defined in Swagger"""  # noqa: E501

        self._drive_uuid = None
        self._dpu_id = None
        self._nguid_low = None
        self._nguid_high = None
        self._capacity_bytes = None
        self.discriminator = None

        self.drive_uuid = drive_uuid
        self.dpu_id = dpu_id
        if nguid_low is not None:
            self.nguid_low = nguid_low
        if nguid_high is not None:
            self.nguid_high = nguid_high
        if capacity_bytes is not None:
            self.capacity_bytes = capacity_bytes

    @property
    def drive_uuid(self):
        """Gets the drive_uuid of this BodyDriveFormat.  # noqa: E501


        :return: The drive_uuid of this BodyDriveFormat.  # noqa: E501
        :rtype: str
        """
        return self._drive_uuid

    @drive_uuid.setter
    def drive_uuid(self, drive_uuid):
        """Sets the drive_uuid of this BodyDriveFormat.


        :param drive_uuid: The drive_uuid of this BodyDriveFormat.  # noqa: E501
        :type: str
        """
        if drive_uuid is None:
            raise ValueError("Invalid value for `drive_uuid`, must not be `None`")  # noqa: E501

        self._drive_uuid = drive_uuid

    @property
    def dpu_id(self):
        """Gets the dpu_id of this BodyDriveFormat.  # noqa: E501

        id of dpu to which this drive is attached  # noqa: E501

        :return: The dpu_id of this BodyDriveFormat.  # noqa: E501
        :rtype: str
        """
        return self._dpu_id

    @dpu_id.setter
    def dpu_id(self, dpu_id):
        """Sets the dpu_id of this BodyDriveFormat.

        id of dpu to which this drive is attached  # noqa: E501

        :param dpu_id: The dpu_id of this BodyDriveFormat.  # noqa: E501
        :type: str
        """
        if dpu_id is None:
            raise ValueError("Invalid value for `dpu_id`, must not be `None`")  # noqa: E501

        self._dpu_id = dpu_id

    @property
    def nguid_low(self):
        """Gets the nguid_low of this BodyDriveFormat.  # noqa: E501


        :return: The nguid_low of this BodyDriveFormat.  # noqa: E501
        :rtype: int
        """
        return self._nguid_low

    @nguid_low.setter
    def nguid_low(self, nguid_low):
        """Sets the nguid_low of this BodyDriveFormat.


        :param nguid_low: The nguid_low of this BodyDriveFormat.  # noqa: E501
        :type: int
        """

        self._nguid_low = nguid_low

    @property
    def nguid_high(self):
        """Gets the nguid_high of this BodyDriveFormat.  # noqa: E501


        :return: The nguid_high of this BodyDriveFormat.  # noqa: E501
        :rtype: int
        """
        return self._nguid_high

    @nguid_high.setter
    def nguid_high(self, nguid_high):
        """Sets the nguid_high of this BodyDriveFormat.


        :param nguid_high: The nguid_high of this BodyDriveFormat.  # noqa: E501
        :type: int
        """

        self._nguid_high = nguid_high

    @property
    def capacity_bytes(self):
        """Gets the capacity_bytes of this BodyDriveFormat.  # noqa: E501


        :return: The capacity_bytes of this BodyDriveFormat.  # noqa: E501
        :rtype: int
        """
        return self._capacity_bytes

    @capacity_bytes.setter
    def capacity_bytes(self, capacity_bytes):
        """Sets the capacity_bytes of this BodyDriveFormat.


        :param capacity_bytes: The capacity_bytes of this BodyDriveFormat.  # noqa: E501
        :type: int
        """

        self._capacity_bytes = capacity_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BodyDriveFormat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BodyDriveFormat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

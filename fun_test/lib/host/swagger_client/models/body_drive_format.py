# coding: utf-8

"""
    Fungible Storage Controller Intent API

    REST API for interfacing between the management/orchestration system and Fungible Storage Controller `(FSC)` `INTERNAL`: The API is for internal controller use only `DEBUG`: The API will not be available in production use   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BodyDriveFormat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dpu_id': 'str',
        'nguid_low': 'int',
        'nguid_high': 'int',
        'slot_id': 'int',
        'fault_zones': 'list[str]',
        'capacity': 'int'
    }

    attribute_map = {
        'dpu_id': 'dpu_id',
        'nguid_low': 'nguid_low',
        'nguid_high': 'nguid_high',
        'slot_id': 'slot_id',
        'fault_zones': 'fault_zones',
        'capacity': 'capacity'
    }

    def __init__(self, dpu_id=None, nguid_low=None, nguid_high=None, slot_id=None, fault_zones=None, capacity=None):  # noqa: E501
        """BodyDriveFormat - a model defined in Swagger"""  # noqa: E501

        self._dpu_id = None
        self._nguid_low = None
        self._nguid_high = None
        self._slot_id = None
        self._fault_zones = None
        self._capacity = None
        self.discriminator = None

        self.dpu_id = dpu_id
        self.nguid_low = nguid_low
        self.nguid_high = nguid_high
        self.slot_id = slot_id
        if fault_zones is not None:
            self.fault_zones = fault_zones
        if capacity is not None:
            self.capacity = capacity

    @property
    def dpu_id(self):
        """Gets the dpu_id of this BodyDriveFormat.  # noqa: E501

        id of dpu to which this drive is attached  # noqa: E501

        :return: The dpu_id of this BodyDriveFormat.  # noqa: E501
        :rtype: str
        """
        return self._dpu_id

    @dpu_id.setter
    def dpu_id(self, dpu_id):
        """Sets the dpu_id of this BodyDriveFormat.

        id of dpu to which this drive is attached  # noqa: E501

        :param dpu_id: The dpu_id of this BodyDriveFormat.  # noqa: E501
        :type: str
        """
        if dpu_id is None:
            raise ValueError("Invalid value for `dpu_id`, must not be `None`")  # noqa: E501

        self._dpu_id = dpu_id

    @property
    def nguid_low(self):
        """Gets the nguid_low of this BodyDriveFormat.  # noqa: E501


        :return: The nguid_low of this BodyDriveFormat.  # noqa: E501
        :rtype: int
        """
        return self._nguid_low

    @nguid_low.setter
    def nguid_low(self, nguid_low):
        """Sets the nguid_low of this BodyDriveFormat.


        :param nguid_low: The nguid_low of this BodyDriveFormat.  # noqa: E501
        :type: int
        """
        if nguid_low is None:
            raise ValueError("Invalid value for `nguid_low`, must not be `None`")  # noqa: E501

        self._nguid_low = nguid_low

    @property
    def nguid_high(self):
        """Gets the nguid_high of this BodyDriveFormat.  # noqa: E501


        :return: The nguid_high of this BodyDriveFormat.  # noqa: E501
        :rtype: int
        """
        return self._nguid_high

    @nguid_high.setter
    def nguid_high(self, nguid_high):
        """Sets the nguid_high of this BodyDriveFormat.


        :param nguid_high: The nguid_high of this BodyDriveFormat.  # noqa: E501
        :type: int
        """
        if nguid_high is None:
            raise ValueError("Invalid value for `nguid_high`, must not be `None`")  # noqa: E501

        self._nguid_high = nguid_high

    @property
    def slot_id(self):
        """Gets the slot_id of this BodyDriveFormat.  # noqa: E501

        dpu slot to which drive is connected  # noqa: E501

        :return: The slot_id of this BodyDriveFormat.  # noqa: E501
        :rtype: int
        """
        return self._slot_id

    @slot_id.setter
    def slot_id(self, slot_id):
        """Sets the slot_id of this BodyDriveFormat.

        dpu slot to which drive is connected  # noqa: E501

        :param slot_id: The slot_id of this BodyDriveFormat.  # noqa: E501
        :type: int
        """
        if slot_id is None:
            raise ValueError("Invalid value for `slot_id`, must not be `None`")  # noqa: E501

        self._slot_id = slot_id

    @property
    def fault_zones(self):
        """Gets the fault_zones of this BodyDriveFormat.  # noqa: E501


        :return: The fault_zones of this BodyDriveFormat.  # noqa: E501
        :rtype: list[str]
        """
        return self._fault_zones

    @fault_zones.setter
    def fault_zones(self, fault_zones):
        """Sets the fault_zones of this BodyDriveFormat.


        :param fault_zones: The fault_zones of this BodyDriveFormat.  # noqa: E501
        :type: list[str]
        """

        self._fault_zones = fault_zones

    @property
    def capacity(self):
        """Gets the capacity of this BodyDriveFormat.  # noqa: E501


        :return: The capacity of this BodyDriveFormat.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this BodyDriveFormat.


        :param capacity: The capacity of this BodyDriveFormat.  # noqa: E501
        :type: int
        """

        self._capacity = capacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BodyDriveFormat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BodyDriveFormat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

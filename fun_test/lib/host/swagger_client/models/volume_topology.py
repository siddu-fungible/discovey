# coding: utf-8

"""
    Fungible Storage Controller Intent API

    REST API for interfacing between the management/orchestration system and Fungible Storage Controller `(FSC)`  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VolumeTopology(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'type': 'str',
        'dpu_id': 'str',
        'stats': 'VolumeStats',
        'src_vols': 'list[str]'
    }

    attribute_map = {
        'uuid': 'uuid',
        'type': 'type',
        'dpu_id': 'dpu_id',
        'stats': 'stats',
        'src_vols': 'src_vols'
    }

    def __init__(self, uuid=None, type=None, dpu_id=None, stats=None, src_vols=None):  # noqa: E501
        """VolumeTopology - a model defined in Swagger"""  # noqa: E501

        self._uuid = None
        self._type = None
        self._dpu_id = None
        self._stats = None
        self._src_vols = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if type is not None:
            self.type = type
        if dpu_id is not None:
            self.dpu_id = dpu_id
        if stats is not None:
            self.stats = stats
        if src_vols is not None:
            self.src_vols = src_vols

    @property
    def uuid(self):
        """Gets the uuid of this VolumeTopology.  # noqa: E501


        :return: The uuid of this VolumeTopology.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this VolumeTopology.


        :param uuid: The uuid of this VolumeTopology.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def type(self):
        """Gets the type of this VolumeTopology.  # noqa: E501


        :return: The type of this VolumeTopology.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VolumeTopology.


        :param type: The type of this VolumeTopology.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def dpu_id(self):
        """Gets the dpu_id of this VolumeTopology.  # noqa: E501


        :return: The dpu_id of this VolumeTopology.  # noqa: E501
        :rtype: str
        """
        return self._dpu_id

    @dpu_id.setter
    def dpu_id(self, dpu_id):
        """Sets the dpu_id of this VolumeTopology.


        :param dpu_id: The dpu_id of this VolumeTopology.  # noqa: E501
        :type: str
        """

        self._dpu_id = dpu_id

    @property
    def stats(self):
        """Gets the stats of this VolumeTopology.  # noqa: E501


        :return: The stats of this VolumeTopology.  # noqa: E501
        :rtype: VolumeStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this VolumeTopology.


        :param stats: The stats of this VolumeTopology.  # noqa: E501
        :type: VolumeStats
        """

        self._stats = stats

    @property
    def src_vols(self):
        """Gets the src_vols of this VolumeTopology.  # noqa: E501


        :return: The src_vols of this VolumeTopology.  # noqa: E501
        :rtype: list[str]
        """
        return self._src_vols

    @src_vols.setter
    def src_vols(self, src_vols):
        """Sets the src_vols of this VolumeTopology.


        :param src_vols: The src_vols of this VolumeTopology.  # noqa: E501
        :type: list[str]
        """

        self._src_vols = src_vols

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VolumeTopology, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeTopology):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

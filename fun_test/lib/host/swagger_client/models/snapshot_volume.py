# coding: utf-8

"""
    Fungible Storage Controller Intent API

    REST API for interfacing between the management/orchestration system and Fungible Storage Controller `(FSC)` `INTERNAL`: The API is for internal controller use only `DEBUG`: The API will not be available in production use   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SnapshotVolume(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'uuid': 'str',
        'source_volume_uuid': 'str',
        'source_volume_name': 'str',
        'ports': 'MapOfPorts',
        'physical_size': 'int',
        'created_at': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'uuid': 'uuid',
        'source_volume_uuid': 'source_volume_uuid',
        'source_volume_name': 'source_volume_name',
        'ports': 'ports',
        'physical_size': 'physical_size',
        'created_at': 'created_at'
    }

    def __init__(self, name=None, uuid=None, source_volume_uuid=None, source_volume_name=None, ports=None, physical_size=None, created_at=None):  # noqa: E501
        """SnapshotVolume - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._uuid = None
        self._source_volume_uuid = None
        self._source_volume_name = None
        self._ports = None
        self._physical_size = None
        self._created_at = None
        self.discriminator = None

        self.name = name
        self.uuid = uuid
        self.source_volume_uuid = source_volume_uuid
        self.source_volume_name = source_volume_name
        if ports is not None:
            self.ports = ports
        self.physical_size = physical_size
        if created_at is not None:
            self.created_at = created_at

    @property
    def name(self):
        """Gets the name of this SnapshotVolume.  # noqa: E501

        user specified name of volume  # noqa: E501

        :return: The name of this SnapshotVolume.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SnapshotVolume.

        user specified name of volume  # noqa: E501

        :param name: The name of this SnapshotVolume.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def uuid(self):
        """Gets the uuid of this SnapshotVolume.  # noqa: E501

        assigned by FSC  # noqa: E501

        :return: The uuid of this SnapshotVolume.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SnapshotVolume.

        assigned by FSC  # noqa: E501

        :param uuid: The uuid of this SnapshotVolume.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def source_volume_uuid(self):
        """Gets the source_volume_uuid of this SnapshotVolume.  # noqa: E501


        :return: The source_volume_uuid of this SnapshotVolume.  # noqa: E501
        :rtype: str
        """
        return self._source_volume_uuid

    @source_volume_uuid.setter
    def source_volume_uuid(self, source_volume_uuid):
        """Sets the source_volume_uuid of this SnapshotVolume.


        :param source_volume_uuid: The source_volume_uuid of this SnapshotVolume.  # noqa: E501
        :type: str
        """
        if source_volume_uuid is None:
            raise ValueError("Invalid value for `source_volume_uuid`, must not be `None`")  # noqa: E501

        self._source_volume_uuid = source_volume_uuid

    @property
    def source_volume_name(self):
        """Gets the source_volume_name of this SnapshotVolume.  # noqa: E501


        :return: The source_volume_name of this SnapshotVolume.  # noqa: E501
        :rtype: str
        """
        return self._source_volume_name

    @source_volume_name.setter
    def source_volume_name(self, source_volume_name):
        """Sets the source_volume_name of this SnapshotVolume.


        :param source_volume_name: The source_volume_name of this SnapshotVolume.  # noqa: E501
        :type: str
        """
        if source_volume_name is None:
            raise ValueError("Invalid value for `source_volume_name`, must not be `None`")  # noqa: E501

        self._source_volume_name = source_volume_name

    @property
    def ports(self):
        """Gets the ports of this SnapshotVolume.  # noqa: E501


        :return: The ports of this SnapshotVolume.  # noqa: E501
        :rtype: MapOfPorts
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this SnapshotVolume.


        :param ports: The ports of this SnapshotVolume.  # noqa: E501
        :type: MapOfPorts
        """

        self._ports = ports

    @property
    def physical_size(self):
        """Gets the physical_size of this SnapshotVolume.  # noqa: E501


        :return: The physical_size of this SnapshotVolume.  # noqa: E501
        :rtype: int
        """
        return self._physical_size

    @physical_size.setter
    def physical_size(self, physical_size):
        """Sets the physical_size of this SnapshotVolume.


        :param physical_size: The physical_size of this SnapshotVolume.  # noqa: E501
        :type: int
        """
        if physical_size is None:
            raise ValueError("Invalid value for `physical_size`, must not be `None`")  # noqa: E501

        self._physical_size = physical_size

    @property
    def created_at(self):
        """Gets the created_at of this SnapshotVolume.  # noqa: E501

        set on create  # noqa: E501

        :return: The created_at of this SnapshotVolume.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SnapshotVolume.

        set on create  # noqa: E501

        :param created_at: The created_at of this SnapshotVolume.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnapshotVolume, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotVolume):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

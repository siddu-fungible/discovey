# coding: utf-8

"""
    Fungible Storage Controller Intent API

    REST API for interfacing between the management/orchestration system and Fungible Storage Controller `(FSC)`  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Drive(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'storage_backend': 'str',
        'drive_uuid': 'str',
        'dpu_id': 'str',
        'slot_id': 'int',
        'nguid_low': 'int',
        'nguid_high': 'int',
        'state': 'ResourceState',
        'plugged': 'bool',
        'total_capacity_bytes': 'int',
        'available_capacity_bytes': 'int',
        'volumes': 'list[Volume]',
        'created_at': 'datetime',
        'modified_at': 'datetime'
    }

    attribute_map = {
        'storage_backend': 'storage_backend',
        'drive_uuid': 'drive_uuid',
        'dpu_id': 'dpu_id',
        'slot_id': 'slot_id',
        'nguid_low': 'nguid_low',
        'nguid_high': 'nguid_high',
        'state': 'state',
        'plugged': 'plugged',
        'total_capacity_bytes': 'total_capacity_bytes',
        'available_capacity_bytes': 'available_capacity_bytes',
        'volumes': 'volumes',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, storage_backend='ssd', drive_uuid=None, dpu_id=None, slot_id=None, nguid_low=None, nguid_high=None, state=None, plugged=None, total_capacity_bytes=None, available_capacity_bytes=None, volumes=None, created_at=None, modified_at=None):  # noqa: E501
        """Drive - a model defined in Swagger"""  # noqa: E501

        self._storage_backend = None
        self._drive_uuid = None
        self._dpu_id = None
        self._slot_id = None
        self._nguid_low = None
        self._nguid_high = None
        self._state = None
        self._plugged = None
        self._total_capacity_bytes = None
        self._available_capacity_bytes = None
        self._volumes = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None

        if storage_backend is not None:
            self.storage_backend = storage_backend
        if drive_uuid is not None:
            self.drive_uuid = drive_uuid
        self.dpu_id = dpu_id
        self.slot_id = slot_id
        if nguid_low is not None:
            self.nguid_low = nguid_low
        if nguid_high is not None:
            self.nguid_high = nguid_high
        if state is not None:
            self.state = state
        if plugged is not None:
            self.plugged = plugged
        if total_capacity_bytes is not None:
            self.total_capacity_bytes = total_capacity_bytes
        if available_capacity_bytes is not None:
            self.available_capacity_bytes = available_capacity_bytes
        if volumes is not None:
            self.volumes = volumes
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def storage_backend(self):
        """Gets the storage_backend of this Drive.  # noqa: E501


        :return: The storage_backend of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._storage_backend

    @storage_backend.setter
    def storage_backend(self, storage_backend):
        """Sets the storage_backend of this Drive.


        :param storage_backend: The storage_backend of this Drive.  # noqa: E501
        :type: str
        """
        allowed_values = ["ssd", "hard disk"]  # noqa: E501
        if storage_backend not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_backend` ({0}), must be one of {1}"  # noqa: E501
                .format(storage_backend, allowed_values)
            )

        self._storage_backend = storage_backend

    @property
    def drive_uuid(self):
        """Gets the drive_uuid of this Drive.  # noqa: E501

        unique id of drive assigned by FS  # noqa: E501

        :return: The drive_uuid of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._drive_uuid

    @drive_uuid.setter
    def drive_uuid(self, drive_uuid):
        """Sets the drive_uuid of this Drive.

        unique id of drive assigned by FS  # noqa: E501

        :param drive_uuid: The drive_uuid of this Drive.  # noqa: E501
        :type: str
        """

        self._drive_uuid = drive_uuid

    @property
    def dpu_id(self):
        """Gets the dpu_id of this Drive.  # noqa: E501

        id of dpu to which this drive is attached  # noqa: E501

        :return: The dpu_id of this Drive.  # noqa: E501
        :rtype: str
        """
        return self._dpu_id

    @dpu_id.setter
    def dpu_id(self, dpu_id):
        """Sets the dpu_id of this Drive.

        id of dpu to which this drive is attached  # noqa: E501

        :param dpu_id: The dpu_id of this Drive.  # noqa: E501
        :type: str
        """
        if dpu_id is None:
            raise ValueError("Invalid value for `dpu_id`, must not be `None`")  # noqa: E501

        self._dpu_id = dpu_id

    @property
    def slot_id(self):
        """Gets the slot_id of this Drive.  # noqa: E501

        dpu slot to which drive is connected  # noqa: E501

        :return: The slot_id of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._slot_id

    @slot_id.setter
    def slot_id(self, slot_id):
        """Sets the slot_id of this Drive.

        dpu slot to which drive is connected  # noqa: E501

        :param slot_id: The slot_id of this Drive.  # noqa: E501
        :type: int
        """
        if slot_id is None:
            raise ValueError("Invalid value for `slot_id`, must not be `None`")  # noqa: E501

        self._slot_id = slot_id

    @property
    def nguid_low(self):
        """Gets the nguid_low of this Drive.  # noqa: E501


        :return: The nguid_low of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._nguid_low

    @nguid_low.setter
    def nguid_low(self, nguid_low):
        """Sets the nguid_low of this Drive.


        :param nguid_low: The nguid_low of this Drive.  # noqa: E501
        :type: int
        """

        self._nguid_low = nguid_low

    @property
    def nguid_high(self):
        """Gets the nguid_high of this Drive.  # noqa: E501


        :return: The nguid_high of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._nguid_high

    @nguid_high.setter
    def nguid_high(self, nguid_high):
        """Sets the nguid_high of this Drive.


        :param nguid_high: The nguid_high of this Drive.  # noqa: E501
        :type: int
        """

        self._nguid_high = nguid_high

    @property
    def state(self):
        """Gets the state of this Drive.  # noqa: E501


        :return: The state of this Drive.  # noqa: E501
        :rtype: ResourceState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Drive.


        :param state: The state of this Drive.  # noqa: E501
        :type: ResourceState
        """

        self._state = state

    @property
    def plugged(self):
        """Gets the plugged of this Drive.  # noqa: E501


        :return: The plugged of this Drive.  # noqa: E501
        :rtype: bool
        """
        return self._plugged

    @plugged.setter
    def plugged(self, plugged):
        """Sets the plugged of this Drive.


        :param plugged: The plugged of this Drive.  # noqa: E501
        :type: bool
        """

        self._plugged = plugged

    @property
    def total_capacity_bytes(self):
        """Gets the total_capacity_bytes of this Drive.  # noqa: E501


        :return: The total_capacity_bytes of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._total_capacity_bytes

    @total_capacity_bytes.setter
    def total_capacity_bytes(self, total_capacity_bytes):
        """Sets the total_capacity_bytes of this Drive.


        :param total_capacity_bytes: The total_capacity_bytes of this Drive.  # noqa: E501
        :type: int
        """

        self._total_capacity_bytes = total_capacity_bytes

    @property
    def available_capacity_bytes(self):
        """Gets the available_capacity_bytes of this Drive.  # noqa: E501


        :return: The available_capacity_bytes of this Drive.  # noqa: E501
        :rtype: int
        """
        return self._available_capacity_bytes

    @available_capacity_bytes.setter
    def available_capacity_bytes(self, available_capacity_bytes):
        """Sets the available_capacity_bytes of this Drive.


        :param available_capacity_bytes: The available_capacity_bytes of this Drive.  # noqa: E501
        :type: int
        """

        self._available_capacity_bytes = available_capacity_bytes

    @property
    def volumes(self):
        """Gets the volumes of this Drive.  # noqa: E501


        :return: The volumes of this Drive.  # noqa: E501
        :rtype: list[Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this Drive.


        :param volumes: The volumes of this Drive.  # noqa: E501
        :type: list[Volume]
        """

        self._volumes = volumes

    @property
    def created_at(self):
        """Gets the created_at of this Drive.  # noqa: E501

        set on create  # noqa: E501

        :return: The created_at of this Drive.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Drive.

        set on create  # noqa: E501

        :param created_at: The created_at of this Drive.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Drive.  # noqa: E501

        set when modified  # noqa: E501

        :return: The modified_at of this Drive.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Drive.

        set when modified  # noqa: E501

        :param modified_at: The modified_at of this Drive.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Drive, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Drive):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Fungible Storage Controller Intent API

    REST API for interfacing between the management/orchestration system and Fungible Storage Controller `(FSC)`  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: storage@fungible.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Dpu(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dpu_id': 'str',
        'dpu_name': 'str',
        'dpu_class': 'str',
        'parent_id': 'str',
        'fault_zones': 'list[str]',
        'mgmt_ip': 'str',
        'mgmt_ports': 'dict(str, str)',
        'ip_assignment_dhcp': 'bool',
        'dataplane_ip': 'str',
        'fpg_num': 'int',
        'subnet_mask': 'str',
        'next_hop': 'str',
        'drives': 'list[BodyDriveCreate]',
        'state': 'ResourceState',
        'additional_fields': 'AdditionalFields',
        'created_at': 'datetime',
        'modified_at': 'datetime'
    }

    attribute_map = {
        'dpu_id': 'dpu_id',
        'dpu_name': 'dpu_name',
        'dpu_class': 'dpu_class',
        'parent_id': 'parent_id',
        'fault_zones': 'fault_zones',
        'mgmt_ip': 'mgmt_ip',
        'mgmt_ports': 'mgmt_ports',
        'ip_assignment_dhcp': 'ip_assignment_dhcp',
        'dataplane_ip': 'dataplane_ip',
        'fpg_num': 'fpg_num',
        'subnet_mask': 'subnet_mask',
        'next_hop': 'next_hop',
        'drives': 'drives',
        'state': 'state',
        'additional_fields': 'additional_fields',
        'created_at': 'created_at',
        'modified_at': 'modified_at'
    }

    def __init__(self, dpu_id=None, dpu_name=None, dpu_class=None, parent_id=None, fault_zones=None, mgmt_ip=None, mgmt_ports=None, ip_assignment_dhcp=None, dataplane_ip=None, fpg_num=None, subnet_mask=None, next_hop=None, drives=None, state=None, additional_fields=None, created_at=None, modified_at=None):  # noqa: E501
        """Dpu - a model defined in Swagger"""  # noqa: E501

        self._dpu_id = None
        self._dpu_name = None
        self._dpu_class = None
        self._parent_id = None
        self._fault_zones = None
        self._mgmt_ip = None
        self._mgmt_ports = None
        self._ip_assignment_dhcp = None
        self._dataplane_ip = None
        self._fpg_num = None
        self._subnet_mask = None
        self._next_hop = None
        self._drives = None
        self._state = None
        self._additional_fields = None
        self._created_at = None
        self._modified_at = None
        self.discriminator = None

        self.dpu_id = dpu_id
        self.dpu_name = dpu_name
        if dpu_class is not None:
            self.dpu_class = dpu_class
        if parent_id is not None:
            self.parent_id = parent_id
        if fault_zones is not None:
            self.fault_zones = fault_zones
        if mgmt_ip is not None:
            self.mgmt_ip = mgmt_ip
        if mgmt_ports is not None:
            self.mgmt_ports = mgmt_ports
        if ip_assignment_dhcp is not None:
            self.ip_assignment_dhcp = ip_assignment_dhcp
        if dataplane_ip is not None:
            self.dataplane_ip = dataplane_ip
        if fpg_num is not None:
            self.fpg_num = fpg_num
        if subnet_mask is not None:
            self.subnet_mask = subnet_mask
        if next_hop is not None:
            self.next_hop = next_hop
        if drives is not None:
            self.drives = drives
        if state is not None:
            self.state = state
        if additional_fields is not None:
            self.additional_fields = additional_fields
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at

    @property
    def dpu_id(self):
        """Gets the dpu_id of this Dpu.  # noqa: E501

        unique id of dpu  # noqa: E501

        :return: The dpu_id of this Dpu.  # noqa: E501
        :rtype: str
        """
        return self._dpu_id

    @dpu_id.setter
    def dpu_id(self, dpu_id):
        """Sets the dpu_id of this Dpu.

        unique id of dpu  # noqa: E501

        :param dpu_id: The dpu_id of this Dpu.  # noqa: E501
        :type: str
        """
        if dpu_id is None:
            raise ValueError("Invalid value for `dpu_id`, must not be `None`")  # noqa: E501

        self._dpu_id = dpu_id

    @property
    def dpu_name(self):
        """Gets the dpu_name of this Dpu.  # noqa: E501

        Descriptive name of dpu  # noqa: E501

        :return: The dpu_name of this Dpu.  # noqa: E501
        :rtype: str
        """
        return self._dpu_name

    @dpu_name.setter
    def dpu_name(self, dpu_name):
        """Sets the dpu_name of this Dpu.

        Descriptive name of dpu  # noqa: E501

        :param dpu_name: The dpu_name of this Dpu.  # noqa: E501
        :type: str
        """
        if dpu_name is None:
            raise ValueError("Invalid value for `dpu_name`, must not be `None`")  # noqa: E501

        self._dpu_name = dpu_name

    @property
    def dpu_class(self):
        """Gets the dpu_class of this Dpu.  # noqa: E501


        :return: The dpu_class of this Dpu.  # noqa: E501
        :rtype: str
        """
        return self._dpu_class

    @dpu_class.setter
    def dpu_class(self, dpu_class):
        """Sets the dpu_class of this Dpu.


        :param dpu_class: The dpu_class of this Dpu.  # noqa: E501
        :type: str
        """

        self._dpu_class = dpu_class

    @property
    def parent_id(self):
        """Gets the parent_id of this Dpu.  # noqa: E501

        id of parent node of this dpu  # noqa: E501

        :return: The parent_id of this Dpu.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Dpu.

        id of parent node of this dpu  # noqa: E501

        :param parent_id: The parent_id of this Dpu.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def fault_zones(self):
        """Gets the fault_zones of this Dpu.  # noqa: E501


        :return: The fault_zones of this Dpu.  # noqa: E501
        :rtype: list[str]
        """
        return self._fault_zones

    @fault_zones.setter
    def fault_zones(self, fault_zones):
        """Sets the fault_zones of this Dpu.


        :param fault_zones: The fault_zones of this Dpu.  # noqa: E501
        :type: list[str]
        """

        self._fault_zones = fault_zones

    @property
    def mgmt_ip(self):
        """Gets the mgmt_ip of this Dpu.  # noqa: E501


        :return: The mgmt_ip of this Dpu.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_ip

    @mgmt_ip.setter
    def mgmt_ip(self, mgmt_ip):
        """Sets the mgmt_ip of this Dpu.


        :param mgmt_ip: The mgmt_ip of this Dpu.  # noqa: E501
        :type: str
        """

        self._mgmt_ip = mgmt_ip

    @property
    def mgmt_ports(self):
        """Gets the mgmt_ports of this Dpu.  # noqa: E501


        :return: The mgmt_ports of this Dpu.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._mgmt_ports

    @mgmt_ports.setter
    def mgmt_ports(self, mgmt_ports):
        """Sets the mgmt_ports of this Dpu.


        :param mgmt_ports: The mgmt_ports of this Dpu.  # noqa: E501
        :type: dict(str, str)
        """

        self._mgmt_ports = mgmt_ports

    @property
    def ip_assignment_dhcp(self):
        """Gets the ip_assignment_dhcp of this Dpu.  # noqa: E501


        :return: The ip_assignment_dhcp of this Dpu.  # noqa: E501
        :rtype: bool
        """
        return self._ip_assignment_dhcp

    @ip_assignment_dhcp.setter
    def ip_assignment_dhcp(self, ip_assignment_dhcp):
        """Sets the ip_assignment_dhcp of this Dpu.


        :param ip_assignment_dhcp: The ip_assignment_dhcp of this Dpu.  # noqa: E501
        :type: bool
        """

        self._ip_assignment_dhcp = ip_assignment_dhcp

    @property
    def dataplane_ip(self):
        """Gets the dataplane_ip of this Dpu.  # noqa: E501


        :return: The dataplane_ip of this Dpu.  # noqa: E501
        :rtype: str
        """
        return self._dataplane_ip

    @dataplane_ip.setter
    def dataplane_ip(self, dataplane_ip):
        """Sets the dataplane_ip of this Dpu.


        :param dataplane_ip: The dataplane_ip of this Dpu.  # noqa: E501
        :type: str
        """

        self._dataplane_ip = dataplane_ip

    @property
    def fpg_num(self):
        """Gets the fpg_num of this Dpu.  # noqa: E501


        :return: The fpg_num of this Dpu.  # noqa: E501
        :rtype: int
        """
        return self._fpg_num

    @fpg_num.setter
    def fpg_num(self, fpg_num):
        """Sets the fpg_num of this Dpu.


        :param fpg_num: The fpg_num of this Dpu.  # noqa: E501
        :type: int
        """

        self._fpg_num = fpg_num

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this Dpu.  # noqa: E501


        :return: The subnet_mask of this Dpu.  # noqa: E501
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this Dpu.


        :param subnet_mask: The subnet_mask of this Dpu.  # noqa: E501
        :type: str
        """

        self._subnet_mask = subnet_mask

    @property
    def next_hop(self):
        """Gets the next_hop of this Dpu.  # noqa: E501


        :return: The next_hop of this Dpu.  # noqa: E501
        :rtype: str
        """
        return self._next_hop

    @next_hop.setter
    def next_hop(self, next_hop):
        """Sets the next_hop of this Dpu.


        :param next_hop: The next_hop of this Dpu.  # noqa: E501
        :type: str
        """

        self._next_hop = next_hop

    @property
    def drives(self):
        """Gets the drives of this Dpu.  # noqa: E501


        :return: The drives of this Dpu.  # noqa: E501
        :rtype: list[BodyDriveCreate]
        """
        return self._drives

    @drives.setter
    def drives(self, drives):
        """Sets the drives of this Dpu.


        :param drives: The drives of this Dpu.  # noqa: E501
        :type: list[BodyDriveCreate]
        """

        self._drives = drives

    @property
    def state(self):
        """Gets the state of this Dpu.  # noqa: E501


        :return: The state of this Dpu.  # noqa: E501
        :rtype: ResourceState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Dpu.


        :param state: The state of this Dpu.  # noqa: E501
        :type: ResourceState
        """

        self._state = state

    @property
    def additional_fields(self):
        """Gets the additional_fields of this Dpu.  # noqa: E501


        :return: The additional_fields of this Dpu.  # noqa: E501
        :rtype: AdditionalFields
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this Dpu.


        :param additional_fields: The additional_fields of this Dpu.  # noqa: E501
        :type: AdditionalFields
        """

        self._additional_fields = additional_fields

    @property
    def created_at(self):
        """Gets the created_at of this Dpu.  # noqa: E501

        set on create  # noqa: E501

        :return: The created_at of this Dpu.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Dpu.

        set on create  # noqa: E501

        :param created_at: The created_at of this Dpu.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Dpu.  # noqa: E501

        set when modified  # noqa: E501

        :return: The modified_at of this Dpu.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Dpu.

        set when modified  # noqa: E501

        :param modified_at: The modified_at of this Dpu.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dpu, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dpu):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
